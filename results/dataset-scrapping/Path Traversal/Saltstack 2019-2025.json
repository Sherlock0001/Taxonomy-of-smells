{
  "total_count": 141,
  "incomplete_results": false,
  "items": [
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/532bc3bf06dfd22bc04eb3abc0882560e88ff03e",
      "sha": "532bc3bf06dfd22bc04eb3abc0882560e88ff03e",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OjUzMmJjM2JmMDZkZmQyMmJjMDRlYjNhYmMwODgyNTYwZTg4ZmYwM2U=",
      "html_url": "https://github.com/etsal/aurora/commit/532bc3bf06dfd22bc04eb3abc0882560e88ff03e",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/532bc3bf06dfd22bc04eb3abc0882560e88ff03e/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/532bc3bf06dfd22bc04eb3abc0882560e88ff03e",
        "author": {
          "date": "2023-06-08T12:37:47.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2023-06-08T12:44:40.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "fix kmod reference counting bug on sls_memsnap error path\n\nSummary:\nThere is a missing sls_finishop() on an errorpath for the sls_memsnap ioctl()\nthat when triggered prevents subsequent module operations, including unloading the SLS module.\nAdd the missing op.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Thu Jun 8 12:38:42 EDT 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      4\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      5\n210-file-vnode.sh                        [ success ]     11\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      6\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      6\n220-pgroups.sh                           [ success ]     22\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      5\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      6\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      4\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      2\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      1\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      9\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      5\n247-remount-slos.sh                      [ success ]      5\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n250-simple-file-ckpt.sh                  [ success ]      6\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D780",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/ea5880f5436e21e920e679a845d88c164b48ebc1",
          "sha": "ea5880f5436e21e920e679a845d88c164b48ebc1"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/7ede1b2f1f496b37325cfae5a1d633f4874891cb",
          "html_url": "https://github.com/etsal/aurora/commit/7ede1b2f1f496b37325cfae5a1d633f4874891cb",
          "sha": "7ede1b2f1f496b37325cfae5a1d633f4874891cb"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/532bc3bf06dfd22bc04eb3abc0882560e88ff03e",
      "sha": "532bc3bf06dfd22bc04eb3abc0882560e88ff03e",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OjUzMmJjM2JmMDZkZmQyMmJjMDRlYjNhYmMwODgyNTYwZTg4ZmYwM2U=",
      "html_url": "https://github.com/rcslab/aurora/commit/532bc3bf06dfd22bc04eb3abc0882560e88ff03e",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/532bc3bf06dfd22bc04eb3abc0882560e88ff03e/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/532bc3bf06dfd22bc04eb3abc0882560e88ff03e",
        "author": {
          "date": "2023-06-08T12:37:47.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2023-06-08T12:44:40.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "fix kmod reference counting bug on sls_memsnap error path\n\nSummary:\nThere is a missing sls_finishop() on an errorpath for the sls_memsnap ioctl()\nthat when triggered prevents subsequent module operations, including unloading the SLS module.\nAdd the missing op.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Thu Jun 8 12:38:42 EDT 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      4\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      5\n210-file-vnode.sh                        [ success ]     11\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      6\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      6\n220-pgroups.sh                           [ success ]     22\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      5\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      6\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      4\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      2\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      1\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      9\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      5\n247-remount-slos.sh                      [ success ]      5\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n250-simple-file-ckpt.sh                  [ success ]      6\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D780",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/ea5880f5436e21e920e679a845d88c164b48ebc1",
          "sha": "ea5880f5436e21e920e679a845d88c164b48ebc1"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/7ede1b2f1f496b37325cfae5a1d633f4874891cb",
          "html_url": "https://github.com/rcslab/aurora/commit/7ede1b2f1f496b37325cfae5a1d633f4874891cb",
          "sha": "7ede1b2f1f496b37325cfae5a1d633f4874891cb"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/nco/nco/commits/2c5f164b131588770c209438c7a7426a92b1384f",
      "sha": "2c5f164b131588770c209438c7a7426a92b1384f",
      "node_id": "MDY6Q29tbWl0MzEyOTI1MzY6MmM1ZjE2NGIxMzE1ODg3NzBjMjA5NDM4YzdhNzQyNmE5MmIxMzg0Zg==",
      "html_url": "https://github.com/nco/nco/commit/2c5f164b131588770c209438c7a7426a92b1384f",
      "comments_url": "https://api.github.com/repos/nco/nco/commits/2c5f164b131588770c209438c7a7426a92b1384f/comments",
      "commit": {
        "url": "https://api.github.com/repos/nco/nco/git/commits/2c5f164b131588770c209438c7a7426a92b1384f",
        "author": {
          "date": "2012-08-09T21:33:25.000Z",
          "name": "Pedro Vicente",
          "email": "pedro.vicente@space-research.org"
        },
        "committer": {
          "date": "2012-08-09T21:33:25.000Z",
          "name": "Pedro Vicente",
          "email": "pedro.vicente@space-research.org"
        },
        "message": "ncks group implementation\n\nusage:\n\nncks -D 1 ~/nco/data/in_grp.nc\n\ndoing\n\nncks -D 5 ~/nco/data/in_grp.nc\n\nprints the full paths obtained with the group traversal stored in grp_tbl_t *trv_tbl\n\nModified my basic struct for file traversal \"grp_trv_t\" (in nco_grp_trv.h) as having\na) absolute name path\nb) enum that tells if the name path is a group or variable\n\nthis is a netCDF4 \"object\", a simple model , the same as HDF5 , that is a list of path names, each with a meaing (group or dataset)\n\nnew function\nnco4_var_lst_mk2\n\nthat uses the \"grp_trv_t\" array obtained earlier in the program, instead of \"nm_id_sct\" used by\nnco4_var_lst_mk\n\nin the call\n\nnco_prn_var_dfn(in_id,xtr_lst[idx].nm);\n\nthe NAME arg has to be a valid name for the ID (like a var relative name if ID is a group ID)\n\nfixed 2 bugs in\nnco4_var_lst_mk\n\nthe full group name was not being setup with\n\nvar_lst_all[var_idx_crr].grp_nm_fll=grp_nm_fll_sls;\n\nand also incrementing\n\nvar_idx_crr++;",
        "tree": {
          "url": "https://api.github.com/repos/nco/nco/git/trees/f60b4cefbf25c615d0b81d14caff8e4a86743a39",
          "sha": "f60b4cefbf25c615d0b81d14caff8e4a86743a39"
        },
        "comment_count": 0
      },
      "author": {
        "login": "pedro-vicente",
        "id": 6119070,
        "node_id": "MDQ6VXNlcjYxMTkwNzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6119070?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pedro-vicente",
        "html_url": "https://github.com/pedro-vicente",
        "followers_url": "https://api.github.com/users/pedro-vicente/followers",
        "following_url": "https://api.github.com/users/pedro-vicente/following{/other_user}",
        "gists_url": "https://api.github.com/users/pedro-vicente/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pedro-vicente/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pedro-vicente/subscriptions",
        "organizations_url": "https://api.github.com/users/pedro-vicente/orgs",
        "repos_url": "https://api.github.com/users/pedro-vicente/repos",
        "events_url": "https://api.github.com/users/pedro-vicente/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pedro-vicente/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "pedro-vicente",
        "id": 6119070,
        "node_id": "MDQ6VXNlcjYxMTkwNzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6119070?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pedro-vicente",
        "html_url": "https://github.com/pedro-vicente",
        "followers_url": "https://api.github.com/users/pedro-vicente/followers",
        "following_url": "https://api.github.com/users/pedro-vicente/following{/other_user}",
        "gists_url": "https://api.github.com/users/pedro-vicente/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pedro-vicente/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pedro-vicente/subscriptions",
        "organizations_url": "https://api.github.com/users/pedro-vicente/orgs",
        "repos_url": "https://api.github.com/users/pedro-vicente/repos",
        "events_url": "https://api.github.com/users/pedro-vicente/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pedro-vicente/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/nco/nco/commits/eb2e6f81f481b5bee7334356b47a2ad6942fbabb",
          "html_url": "https://github.com/nco/nco/commit/eb2e6f81f481b5bee7334356b47a2ad6942fbabb",
          "sha": "eb2e6f81f481b5bee7334356b47a2ad6942fbabb"
        }
      ],
      "repository": {
        "id": 31292536,
        "node_id": "MDEwOlJlcG9zaXRvcnkzMTI5MjUzNg==",
        "name": "nco",
        "full_name": "nco/nco",
        "private": false,
        "owner": {
          "login": "nco",
          "id": 13952264,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjEzOTUyMjY0",
          "avatar_url": "https://avatars.githubusercontent.com/u/13952264?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/nco",
          "html_url": "https://github.com/nco",
          "followers_url": "https://api.github.com/users/nco/followers",
          "following_url": "https://api.github.com/users/nco/following{/other_user}",
          "gists_url": "https://api.github.com/users/nco/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/nco/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/nco/subscriptions",
          "organizations_url": "https://api.github.com/users/nco/orgs",
          "repos_url": "https://api.github.com/users/nco/repos",
          "events_url": "https://api.github.com/users/nco/events{/privacy}",
          "received_events_url": "https://api.github.com/users/nco/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/nco/nco",
        "description": "netCDF Operators",
        "fork": false,
        "url": "https://api.github.com/repos/nco/nco",
        "forks_url": "https://api.github.com/repos/nco/nco/forks",
        "keys_url": "https://api.github.com/repos/nco/nco/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/nco/nco/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/nco/nco/teams",
        "hooks_url": "https://api.github.com/repos/nco/nco/hooks",
        "issue_events_url": "https://api.github.com/repos/nco/nco/issues/events{/number}",
        "events_url": "https://api.github.com/repos/nco/nco/events",
        "assignees_url": "https://api.github.com/repos/nco/nco/assignees{/user}",
        "branches_url": "https://api.github.com/repos/nco/nco/branches{/branch}",
        "tags_url": "https://api.github.com/repos/nco/nco/tags",
        "blobs_url": "https://api.github.com/repos/nco/nco/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/nco/nco/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/nco/nco/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/nco/nco/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/nco/nco/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/nco/nco/languages",
        "stargazers_url": "https://api.github.com/repos/nco/nco/stargazers",
        "contributors_url": "https://api.github.com/repos/nco/nco/contributors",
        "subscribers_url": "https://api.github.com/repos/nco/nco/subscribers",
        "subscription_url": "https://api.github.com/repos/nco/nco/subscription",
        "commits_url": "https://api.github.com/repos/nco/nco/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/nco/nco/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/nco/nco/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/nco/nco/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/nco/nco/contents/{+path}",
        "compare_url": "https://api.github.com/repos/nco/nco/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/nco/nco/merges",
        "archive_url": "https://api.github.com/repos/nco/nco/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/nco/nco/downloads",
        "issues_url": "https://api.github.com/repos/nco/nco/issues{/number}",
        "pulls_url": "https://api.github.com/repos/nco/nco/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/nco/nco/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/nco/nco/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/nco/nco/labels{/name}",
        "releases_url": "https://api.github.com/repos/nco/nco/releases{/id}",
        "deployments_url": "https://api.github.com/repos/nco/nco/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/commits/2c5f164b131588770c209438c7a7426a92b1384f",
      "sha": "2c5f164b131588770c209438c7a7426a92b1384f",
      "node_id": "MDY6Q29tbWl0MzExMTUxNTU6MmM1ZjE2NGIxMzE1ODg3NzBjMjA5NDM4YzdhNzQyNmE5MmIxMzg0Zg==",
      "html_url": "https://github.com/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/commit/2c5f164b131588770c209438c7a7426a92b1384f",
      "comments_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/commits/2c5f164b131588770c209438c7a7426a92b1384f/comments",
      "commit": {
        "url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/git/commits/2c5f164b131588770c209438c7a7426a92b1384f",
        "author": {
          "date": "2012-08-09T21:33:25.000Z",
          "name": "Pedro Vicente",
          "email": "pedro.vicente@space-research.org"
        },
        "committer": {
          "date": "2012-08-09T21:33:25.000Z",
          "name": "Pedro Vicente",
          "email": "pedro.vicente@space-research.org"
        },
        "message": "ncks group implementation\n\nusage:\n\nncks -D 1 ~/nco/data/in_grp.nc\n\ndoing\n\nncks -D 5 ~/nco/data/in_grp.nc\n\nprints the full paths obtained with the group traversal stored in grp_tbl_t *trv_tbl\n\nModified my basic struct for file traversal \"grp_trv_t\" (in nco_grp_trv.h) as having\na) absolute name path\nb) enum that tells if the name path is a group or variable\n\nthis is a netCDF4 \"object\", a simple model , the same as HDF5 , that is a list of path names, each with a meaing (group or dataset)\n\nnew function\nnco4_var_lst_mk2\n\nthat uses the \"grp_trv_t\" array obtained earlier in the program, instead of \"nm_id_sct\" used by\nnco4_var_lst_mk\n\nin the call\n\nnco_prn_var_dfn(in_id,xtr_lst[idx].nm);\n\nthe NAME arg has to be a valid name for the ID (like a var relative name if ID is a group ID)\n\nfixed 2 bugs in\nnco4_var_lst_mk\n\nthe full group name was not being setup with\n\nvar_lst_all[var_idx_crr].grp_nm_fll=grp_nm_fll_sls;\n\nand also incrementing\n\nvar_idx_crr++;",
        "tree": {
          "url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/git/trees/f60b4cefbf25c615d0b81d14caff8e4a86743a39",
          "sha": "f60b4cefbf25c615d0b81d14caff8e4a86743a39"
        },
        "comment_count": 0
      },
      "author": {
        "login": "pedro-vicente",
        "id": 6119070,
        "node_id": "MDQ6VXNlcjYxMTkwNzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6119070?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pedro-vicente",
        "html_url": "https://github.com/pedro-vicente",
        "followers_url": "https://api.github.com/users/pedro-vicente/followers",
        "following_url": "https://api.github.com/users/pedro-vicente/following{/other_user}",
        "gists_url": "https://api.github.com/users/pedro-vicente/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pedro-vicente/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pedro-vicente/subscriptions",
        "organizations_url": "https://api.github.com/users/pedro-vicente/orgs",
        "repos_url": "https://api.github.com/users/pedro-vicente/repos",
        "events_url": "https://api.github.com/users/pedro-vicente/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pedro-vicente/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "pedro-vicente",
        "id": 6119070,
        "node_id": "MDQ6VXNlcjYxMTkwNzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6119070?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pedro-vicente",
        "html_url": "https://github.com/pedro-vicente",
        "followers_url": "https://api.github.com/users/pedro-vicente/followers",
        "following_url": "https://api.github.com/users/pedro-vicente/following{/other_user}",
        "gists_url": "https://api.github.com/users/pedro-vicente/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pedro-vicente/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pedro-vicente/subscriptions",
        "organizations_url": "https://api.github.com/users/pedro-vicente/orgs",
        "repos_url": "https://api.github.com/users/pedro-vicente/repos",
        "events_url": "https://api.github.com/users/pedro-vicente/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pedro-vicente/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/commits/eb2e6f81f481b5bee7334356b47a2ad6942fbabb",
          "html_url": "https://github.com/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/commit/eb2e6f81f481b5bee7334356b47a2ad6942fbabb",
          "sha": "eb2e6f81f481b5bee7334356b47a2ad6942fbabb"
        }
      ],
      "repository": {
        "id": 31115155,
        "node_id": "MDEwOlJlcG9zaXRvcnkzMTExNTE1NQ==",
        "name": "nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git",
        "full_name": "czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git",
        "private": false,
        "owner": {
          "login": "czender",
          "id": 5597049,
          "node_id": "MDQ6VXNlcjU1OTcwNDk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5597049?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/czender",
          "html_url": "https://github.com/czender",
          "followers_url": "https://api.github.com/users/czender/followers",
          "following_url": "https://api.github.com/users/czender/following{/other_user}",
          "gists_url": "https://api.github.com/users/czender/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/czender/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/czender/subscriptions",
          "organizations_url": "https://api.github.com/users/czender/orgs",
          "repos_url": "https://api.github.com/users/czender/repos",
          "events_url": "https://api.github.com/users/czender/events{/privacy}",
          "received_events_url": "https://api.github.com/users/czender/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git",
        "forks_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/forks",
        "keys_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/teams",
        "hooks_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/hooks",
        "issue_events_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/issues/events{/number}",
        "events_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/events",
        "assignees_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/assignees{/user}",
        "branches_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/branches{/branch}",
        "tags_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/tags",
        "blobs_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/languages",
        "stargazers_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/stargazers",
        "contributors_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/contributors",
        "subscribers_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/subscribers",
        "subscription_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/subscription",
        "commits_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/contents/{+path}",
        "compare_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/merges",
        "archive_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/downloads",
        "issues_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/issues{/number}",
        "pulls_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/labels{/name}",
        "releases_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/releases{/id}",
        "deployments_url": "https://api.github.com/repos/czender/nco_backup_from_unmodified_20150216_CVS_dumpfile_converted_to_SVN_and_then_svn2git/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/b8f4ac69fb1c92768bc3422ef863ea8db11010f4",
      "sha": "b8f4ac69fb1c92768bc3422ef863ea8db11010f4",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OmI4ZjRhYzY5ZmIxYzkyNzY4YmMzNDIyZWY4NjNlYThkYjExMDEwZjQ=",
      "html_url": "https://github.com/etsal/aurora/commit/b8f4ac69fb1c92768bc3422ef863ea8db11010f4",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/b8f4ac69fb1c92768bc3422ef863ea8db11010f4/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/b8f4ac69fb1c92768bc3422ef863ea8db11010f4",
        "author": {
          "date": "2021-01-10T15:23:52.000-05:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-01-10T15:23:58.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "disown bp lock in the async path, fix async flag inversion\n\nSummary: When asynchronously pumping kernel buffers into the SLOS taskqueue, we need to disown the lock from the main SLS thread so that the kernel assumes ownership. This bug was not found because the async flag set in the SLS was treated as a sync flag in the SLOS, causing the testbench to not exercise that path. Fix both bugs.\n\nTest Plan:\nTestbench:\n\nBuild: FreeBSD 12.1-Build: FreeBSD 12.1-RELEASE PERF\nHost: skylake4.rcs.uwaterloo.ca\nTest started: Sun Jan 10 14:09:15 UTC 2021\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      2\n002-load-mount-unload.sh                 [ success ]      3\n003-mount-unmount.sh                     [ success ]      1\n004-load-double-sls.sh                   [ success ]      1\n005-unload-double-sls.sh                 [ success ]      0\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      1\n008-mount-double.sh                      [ success ]      1\n009-unload-slos-before-sls.sh            [ success ]      1\n010-unmount-before-sls.sh                [ success ]      0\n101-simple-file-io.sh                    [ success ]      1\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      3\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n213-fork-deltas.sh                       [ success ]      0\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      5\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     14\n219-file-socketpair.sh                   [ success ]      0\n220-fork-shared-mapping.sh               [ success ]      0\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      3\n226-memsnap-osd.sh                       [ success ]      2\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ success ]     16\n\nReviewers: tavianator, ali, ryan\n\nReviewed By: tavianator\n\nTags: #aurora\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D404",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/04bd0158c0d45e01416d6cddc026c2dafebd1b1a",
          "sha": "04bd0158c0d45e01416d6cddc026c2dafebd1b1a"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/ba061f2c9cb8689fdd70bf9e09cbaf8ec0776f28",
          "html_url": "https://github.com/etsal/aurora/commit/ba061f2c9cb8689fdd70bf9e09cbaf8ec0776f28",
          "sha": "ba061f2c9cb8689fdd70bf9e09cbaf8ec0776f28"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/b8f4ac69fb1c92768bc3422ef863ea8db11010f4",
      "sha": "b8f4ac69fb1c92768bc3422ef863ea8db11010f4",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OmI4ZjRhYzY5ZmIxYzkyNzY4YmMzNDIyZWY4NjNlYThkYjExMDEwZjQ=",
      "html_url": "https://github.com/rcslab/aurora/commit/b8f4ac69fb1c92768bc3422ef863ea8db11010f4",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/b8f4ac69fb1c92768bc3422ef863ea8db11010f4/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/b8f4ac69fb1c92768bc3422ef863ea8db11010f4",
        "author": {
          "date": "2021-01-10T15:23:52.000-05:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-01-10T15:23:58.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "disown bp lock in the async path, fix async flag inversion\n\nSummary: When asynchronously pumping kernel buffers into the SLOS taskqueue, we need to disown the lock from the main SLS thread so that the kernel assumes ownership. This bug was not found because the async flag set in the SLS was treated as a sync flag in the SLOS, causing the testbench to not exercise that path. Fix both bugs.\n\nTest Plan:\nTestbench:\n\nBuild: FreeBSD 12.1-Build: FreeBSD 12.1-RELEASE PERF\nHost: skylake4.rcs.uwaterloo.ca\nTest started: Sun Jan 10 14:09:15 UTC 2021\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      2\n002-load-mount-unload.sh                 [ success ]      3\n003-mount-unmount.sh                     [ success ]      1\n004-load-double-sls.sh                   [ success ]      1\n005-unload-double-sls.sh                 [ success ]      0\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      1\n008-mount-double.sh                      [ success ]      1\n009-unload-slos-before-sls.sh            [ success ]      1\n010-unmount-before-sls.sh                [ success ]      0\n101-simple-file-io.sh                    [ success ]      1\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      3\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n213-fork-deltas.sh                       [ success ]      0\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      5\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     14\n219-file-socketpair.sh                   [ success ]      0\n220-fork-shared-mapping.sh               [ success ]      0\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      3\n226-memsnap-osd.sh                       [ success ]      2\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ success ]     16\n\nReviewers: tavianator, ali, ryan\n\nReviewed By: tavianator\n\nTags: #aurora\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D404",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/04bd0158c0d45e01416d6cddc026c2dafebd1b1a",
          "sha": "04bd0158c0d45e01416d6cddc026c2dafebd1b1a"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/ba061f2c9cb8689fdd70bf9e09cbaf8ec0776f28",
          "html_url": "https://github.com/rcslab/aurora/commit/ba061f2c9cb8689fdd70bf9e09cbaf8ec0776f28",
          "sha": "ba061f2c9cb8689fdd70bf9e09cbaf8ec0776f28"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/9cdbf7f3f86cf501201d4413a1b9ef91d47d1fb7",
      "sha": "9cdbf7f3f86cf501201d4413a1b9ef91d47d1fb7",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OjljZGJmN2YzZjg2Y2Y1MDEyMDFkNDQxM2ExYjllZjkxZDQ3ZDFmYjc=",
      "html_url": "https://github.com/etsal/aurora/commit/9cdbf7f3f86cf501201d4413a1b9ef91d47d1fb7",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/9cdbf7f3f86cf501201d4413a1b9ef91d47d1fb7/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/9cdbf7f3f86cf501201d4413a1b9ef91d47d1fb7",
        "author": {
          "date": "2022-11-16T10:52:12.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2022-11-16T10:52:43.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "use Aurora-specific vnode mapping path\n\nSummary:\nMapping library vnodes into a process address space\nduring restores adds significant overhead to the operatrion.\nTo remove it we have introduced in the kernel a new path to be\nused only when mapping vnodes during restores, which skips\nspecific parts of the operations which are unnecessary in that\ncontext. Modify the mapping call to use the new path.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Tue Aug 2 16:38:32 EDT 2022\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      0\n002-load-mount-unload.sh                 [ success ]      2\n003-mount-unmount.sh                     [ success ]      0\n004-load-double-sls.sh                   [ success ]      2\n005-unload-double-sls.sh                 [ success ]      1\n006-load-double-slos.sh                  [ success ]      0\n007-unload-double-slos.sh                [ success ]      0\n008-mount-double.sh                      [ success ]      0\n009-unload-slos-before-unmount.sh        [ success ]      1\n010-unmount-before-sls.sh                [ success ]      1\n011-sls-without-slsfs.sh                 [ success ]      0\n012-invalid-slsfs.sh                     [ success ]      5\n013-mount-snapshots.sh                   [ success ]      4\n014-remount-check.sh                     [ disabled ]    N/A\n101-simple-file-io.sh                    [ success ]      1\n102-fd-chroot.sh                         [ success ]    309\n103-kilofile.sh                          [ success ]      4\n201-simple-mem-ckpt.sh                   [ success ]      3\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      2\n204-print-stdout.sh                      [ success ]      5\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      4\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      3\n210-file-vnode.sh                        [ success ]      9\n211-fork-simple.sh                       [ success ]      6\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      7\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     22\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      2\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      2\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      0\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      4\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      0\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      7\n245-amplified-checkpoint.sh              [ success ]      2\n246-remount-sls.sh                       [ success ]      6\n247-remount-slos.sh                      [ success ]      4\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D718",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/3f70afa2290f2f97865c98543ddb56e9e352437c",
          "sha": "3f70afa2290f2f97865c98543ddb56e9e352437c"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/168484dc6b347f1e0d82d261bf13f7fe8d5ed6f5",
          "html_url": "https://github.com/etsal/aurora/commit/168484dc6b347f1e0d82d261bf13f7fe8d5ed6f5",
          "sha": "168484dc6b347f1e0d82d261bf13f7fe8d5ed6f5"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/9cdbf7f3f86cf501201d4413a1b9ef91d47d1fb7",
      "sha": "9cdbf7f3f86cf501201d4413a1b9ef91d47d1fb7",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OjljZGJmN2YzZjg2Y2Y1MDEyMDFkNDQxM2ExYjllZjkxZDQ3ZDFmYjc=",
      "html_url": "https://github.com/rcslab/aurora/commit/9cdbf7f3f86cf501201d4413a1b9ef91d47d1fb7",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/9cdbf7f3f86cf501201d4413a1b9ef91d47d1fb7/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/9cdbf7f3f86cf501201d4413a1b9ef91d47d1fb7",
        "author": {
          "date": "2022-11-16T10:52:12.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2022-11-16T10:52:43.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "use Aurora-specific vnode mapping path\n\nSummary:\nMapping library vnodes into a process address space\nduring restores adds significant overhead to the operatrion.\nTo remove it we have introduced in the kernel a new path to be\nused only when mapping vnodes during restores, which skips\nspecific parts of the operations which are unnecessary in that\ncontext. Modify the mapping call to use the new path.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Tue Aug 2 16:38:32 EDT 2022\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      0\n002-load-mount-unload.sh                 [ success ]      2\n003-mount-unmount.sh                     [ success ]      0\n004-load-double-sls.sh                   [ success ]      2\n005-unload-double-sls.sh                 [ success ]      1\n006-load-double-slos.sh                  [ success ]      0\n007-unload-double-slos.sh                [ success ]      0\n008-mount-double.sh                      [ success ]      0\n009-unload-slos-before-unmount.sh        [ success ]      1\n010-unmount-before-sls.sh                [ success ]      1\n011-sls-without-slsfs.sh                 [ success ]      0\n012-invalid-slsfs.sh                     [ success ]      5\n013-mount-snapshots.sh                   [ success ]      4\n014-remount-check.sh                     [ disabled ]    N/A\n101-simple-file-io.sh                    [ success ]      1\n102-fd-chroot.sh                         [ success ]    309\n103-kilofile.sh                          [ success ]      4\n201-simple-mem-ckpt.sh                   [ success ]      3\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      2\n204-print-stdout.sh                      [ success ]      5\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      4\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      3\n210-file-vnode.sh                        [ success ]      9\n211-fork-simple.sh                       [ success ]      6\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      7\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     22\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      2\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      2\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      0\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      4\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      0\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      7\n245-amplified-checkpoint.sh              [ success ]      2\n246-remount-sls.sh                       [ success ]      6\n247-remount-slos.sh                      [ success ]      4\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D718",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/3f70afa2290f2f97865c98543ddb56e9e352437c",
          "sha": "3f70afa2290f2f97865c98543ddb56e9e352437c"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/168484dc6b347f1e0d82d261bf13f7fe8d5ed6f5",
          "html_url": "https://github.com/rcslab/aurora/commit/168484dc6b347f1e0d82d261bf13f7fe8d5ed6f5",
          "sha": "168484dc6b347f1e0d82d261bf13f7fe8d5ed6f5"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/a9eda9e0408a3022f28d3e2c9a9f6546aa588b14",
      "sha": "a9eda9e0408a3022f28d3e2c9a9f6546aa588b14",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OmE5ZWRhOWUwNDA4YTMwMjJmMjhkM2UyYzlhOWY2NTQ2YWE1ODhiMTQ=",
      "html_url": "https://github.com/etsal/aurora/commit/a9eda9e0408a3022f28d3e2c9a9f6546aa588b14",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/a9eda9e0408a3022f28d3e2c9a9f6546aa588b14/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/a9eda9e0408a3022f28d3e2c9a9f6546aa588b14",
        "author": {
          "date": "2021-11-05T10:03:21.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-11-05T10:13:01.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "fixed race between restore and swapper unload\n\nSummary:\nThere is a race between processes restoring and the module unload routines destroying the SLS swapper.  The restore path creates SLS swap objects whose creation involves taking\nthe module lock and ensuring the SLS is not exiting. In case it is, the VM objects are not created. The code currently assumes we always get an object from the SLS swapper with vm_pager_allocate.\n\nFix this bug by checking if we got a NULL object. Also ensure that the SLS cannot unload while an operation is in progress.\n\nTest Plan:\nRunning the tests, with a special emphasis on 242 that was the first to trigger the bug.\n\nBuild: FreeBSD 12.1-RELEASE SLOWDBG\nHost: aurora.rcs.uwaterloo.ca\nTest started: Fri Nov 5 14:03:37 UTC 2021\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      0\n002-load-mount-unload.sh                 [ success ]      9\n003-mount-unmount.sh                     [ success ]      0\n004-load-double-sls.sh                   [ success ]      8\n005-unload-double-sls.sh                 [ success ]      2\n006-load-double-slos.sh                  [ success ]      0\n007-unload-double-slos.sh                [ success ]      0\n008-mount-double.sh                      [ success ]      0\n009-unload-slos-before-unmount.sh        [ success ]      3\n010-unmount-before-sls.sh                [ success ]      3\n011-sls-without-slsfs.sh                 [ success ]      5\n012-invalid-slsfs.sh                     [ success ]      5\n101-simple-file-io.sh                    [ success ]      3\n102-fd-chroot.sh                         [ success ]      5\n201-simple-mem-ckpt.sh                   [ success ]      6\n202-simple-osd-ckpt.sh                   [ success ]      4\n203-busy-loop.sh                         [ success ]     10\n204-print-stdout.sh                      [ success ]      6\n205-array-traversal.sh                   [ success ]     10\n206-mmap-file.sh                         [ success ]      6\n207-mmap-anonymous.sh                    [ success ]     11\n208-signal-handler.sh                    [ success ]      7\n209-pthreads-mutex.sh                    [ success ]      9\n210-file-vnode.sh                        [ success ]     17\n211-fork-simple.sh                       [ success ]      7\n212-file-fifo.sh                         [ success ]     12\n214-file-pipes.sh                        [ success ]      5\n215-file-posixshm.sh                     [ success ]     12\n216-sysv-shm.sh                          [ success ]      5\n217-file-udplisten.sh                    [ success ]     12\n218-file-tcplisten.sh                    [ success ]     16\n219-kqueue.sh                            [ success ]      7\n220-pgroups.sh                           [ success ]     29\n221-lazy-osd-ckpt.sh                     [ success ]      5\n222-self-ckpt-mem.sh                     [ success ]     13\n223-restore-mem-multiple.sh              [ success ]     11\n224-restore-osd-multiple.sh              [ success ]      5\n225-memsnap-osd-poll.sh                  [ success ]     11\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]     10\n228-wal.sh                               [ success ]      3\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      7\n232-metropolis.sh                        [ success ]      8\n233-metropolis-fork.sh                   [ success ]      2\n234-metropolis-exec.sh                   [ success ]      3\n235-metropolis-accept.sh                 [ success ]      3\n236-metropolis-exit.sh                   [ success ]      9\n237-metropolis-accept4.sh                [ success ]      3\n238-metropolis-pymetro.sh                [ success ]      2\n239-metropolis-pymetro-multiple.sh       [ success ]     10\n240-metropolis-pymetro-partitions.sh     [ success ]      3\n241-metropolis-pymetro-cachedparts.sh    [ success ]      3\n242-cached-restore.sh                    [ success ]     10\n243-prefault-restore.sh                  [ success ]     16\n244-precopy-restore.sh                   [ success ]     11\n301-mem-rest.sh                          [ success ]     13\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D628",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/420054100d2ad23e03a0f37ed5a0e57947a6e5c9",
          "sha": "420054100d2ad23e03a0f37ed5a0e57947a6e5c9"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/18608f09763b3dbe311a62fb3ab79502d34f871d",
          "html_url": "https://github.com/etsal/aurora/commit/18608f09763b3dbe311a62fb3ab79502d34f871d",
          "sha": "18608f09763b3dbe311a62fb3ab79502d34f871d"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/dda4ce07b7faee71c85594bf22aea64284471385",
      "sha": "dda4ce07b7faee71c85594bf22aea64284471385",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OmRkYTRjZTA3YjdmYWVlNzFjODU1OTRiZjIyYWVhNjQyODQ0NzEzODU=",
      "html_url": "https://github.com/rcslab/aurora/commit/dda4ce07b7faee71c85594bf22aea64284471385",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/dda4ce07b7faee71c85594bf22aea64284471385/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/dda4ce07b7faee71c85594bf22aea64284471385",
        "author": {
          "date": "2023-09-25T18:59:43.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "committer": {
          "date": "2023-09-25T19:07:57.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "message": "fix trace buffer and objprotect protection paths for region checkpointing\n\nSummary: The page protection path logic for region checkpointing is inaccurate because of missing TLB shootdowns for sls_objprotect. Fix and clean up the page protection path and add tests to test that COW is properly applied both for application and for region checkpoints.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Mon Sep 25 19:02:40 EDT 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      1\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      2\n204-print-stdout.sh                      [ success ]      3\n205-array-traversal.sh                   [ success ]      3\n206-mmap-file.sh                         [ success ]      3\n207-mmap-anonymous.sh                    [ success ]      4\n208-signal-handler.sh                    [ success ]      4\n209-pthreads-mutex.sh                    [ success ]      3\n210-file-vnode.sh                        [ success ]     10\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      4\n213-fork-shm.sh                          [ success ]     21\n214-file-pipes.sh                        [ success ]      3\n215-file-posixshm.sh                     [ success ]      3\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      4\n218-file-tcplisten.sh                    [ success ]     13\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     21\n221-lazy-osd-ckpt.sh                     [ success ]      1\n222-self-ckpt-mem.sh                     [ success ]      5\n223-restore-mem-multiple.sh              [ success ]      2\n224-restore-osd-multiple.sh              [ success ]      2\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      4\n227-memsnap-mem.sh                       [ success ]      1\n228-wal.sh                               [ success ]      0\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      4\n232-metropolis.sh                        [ success ]      0\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      0\n235-metropolis-accept.sh                 [ success ]      0\n236-metropolis-exit.sh                   [ success ]      2\n237-metropolis-accept4.sh                [ success ]      0\n238-metropolis-simple.sh                 [ success ]      0\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      0\n241-metropolis-partitions-cached.sh      [ success ]      1\n242-cached-restore.sh                    [ success ]      7\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      7\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      3\n247-remount-slos.sh                      [ success ]      4\n248-delta-restore.sh                     [ success ]      0\n249-pgresident.sh                        [ success ]      1\n250-simple-file-ckpt.sh                  [ success ]      4\n251-simple-socket-ckpt.sh                [ success ]      7\n252-simple-socket-restore.sh             [ success ]      8\n254-delta-checkpoint.sh                  [ success ]      4\n255-delta-socket.sh                      [ success ]      8\n256-memsnap-unaligned.sh                 [ success ]      1\n257-memsnap-sync.sh                      [ success ]      4\n258-shadow-default.sh                    [ success ]      4\n259-shadow-objprotect.sh                 [ success ]      4\n260-shadow-tracebuf.sh                   [ success ]      4\n261-memshadow-default.sh                 [ success ]      4\n262-memshadow-objprotect.sh              [ success ]      4\n263-memshadow-tracebuf.sh                [ success ]      4\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D838",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/a76552894c6cf8cf7784f0f9d024b823ad2d3d02",
          "sha": "a76552894c6cf8cf7784f0f9d024b823ad2d3d02"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/b99530f4d75093ad3d750876eea29622431d5217",
          "html_url": "https://github.com/rcslab/aurora/commit/b99530f4d75093ad3d750876eea29622431d5217",
          "sha": "b99530f4d75093ad3d750876eea29622431d5217"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/a9eda9e0408a3022f28d3e2c9a9f6546aa588b14",
      "sha": "a9eda9e0408a3022f28d3e2c9a9f6546aa588b14",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OmE5ZWRhOWUwNDA4YTMwMjJmMjhkM2UyYzlhOWY2NTQ2YWE1ODhiMTQ=",
      "html_url": "https://github.com/rcslab/aurora/commit/a9eda9e0408a3022f28d3e2c9a9f6546aa588b14",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/a9eda9e0408a3022f28d3e2c9a9f6546aa588b14/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/a9eda9e0408a3022f28d3e2c9a9f6546aa588b14",
        "author": {
          "date": "2021-11-05T10:03:21.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-11-05T10:13:01.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "fixed race between restore and swapper unload\n\nSummary:\nThere is a race between processes restoring and the module unload routines destroying the SLS swapper.  The restore path creates SLS swap objects whose creation involves taking\nthe module lock and ensuring the SLS is not exiting. In case it is, the VM objects are not created. The code currently assumes we always get an object from the SLS swapper with vm_pager_allocate.\n\nFix this bug by checking if we got a NULL object. Also ensure that the SLS cannot unload while an operation is in progress.\n\nTest Plan:\nRunning the tests, with a special emphasis on 242 that was the first to trigger the bug.\n\nBuild: FreeBSD 12.1-RELEASE SLOWDBG\nHost: aurora.rcs.uwaterloo.ca\nTest started: Fri Nov 5 14:03:37 UTC 2021\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      0\n002-load-mount-unload.sh                 [ success ]      9\n003-mount-unmount.sh                     [ success ]      0\n004-load-double-sls.sh                   [ success ]      8\n005-unload-double-sls.sh                 [ success ]      2\n006-load-double-slos.sh                  [ success ]      0\n007-unload-double-slos.sh                [ success ]      0\n008-mount-double.sh                      [ success ]      0\n009-unload-slos-before-unmount.sh        [ success ]      3\n010-unmount-before-sls.sh                [ success ]      3\n011-sls-without-slsfs.sh                 [ success ]      5\n012-invalid-slsfs.sh                     [ success ]      5\n101-simple-file-io.sh                    [ success ]      3\n102-fd-chroot.sh                         [ success ]      5\n201-simple-mem-ckpt.sh                   [ success ]      6\n202-simple-osd-ckpt.sh                   [ success ]      4\n203-busy-loop.sh                         [ success ]     10\n204-print-stdout.sh                      [ success ]      6\n205-array-traversal.sh                   [ success ]     10\n206-mmap-file.sh                         [ success ]      6\n207-mmap-anonymous.sh                    [ success ]     11\n208-signal-handler.sh                    [ success ]      7\n209-pthreads-mutex.sh                    [ success ]      9\n210-file-vnode.sh                        [ success ]     17\n211-fork-simple.sh                       [ success ]      7\n212-file-fifo.sh                         [ success ]     12\n214-file-pipes.sh                        [ success ]      5\n215-file-posixshm.sh                     [ success ]     12\n216-sysv-shm.sh                          [ success ]      5\n217-file-udplisten.sh                    [ success ]     12\n218-file-tcplisten.sh                    [ success ]     16\n219-kqueue.sh                            [ success ]      7\n220-pgroups.sh                           [ success ]     29\n221-lazy-osd-ckpt.sh                     [ success ]      5\n222-self-ckpt-mem.sh                     [ success ]     13\n223-restore-mem-multiple.sh              [ success ]     11\n224-restore-osd-multiple.sh              [ success ]      5\n225-memsnap-osd-poll.sh                  [ success ]     11\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]     10\n228-wal.sh                               [ success ]      3\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      7\n232-metropolis.sh                        [ success ]      8\n233-metropolis-fork.sh                   [ success ]      2\n234-metropolis-exec.sh                   [ success ]      3\n235-metropolis-accept.sh                 [ success ]      3\n236-metropolis-exit.sh                   [ success ]      9\n237-metropolis-accept4.sh                [ success ]      3\n238-metropolis-pymetro.sh                [ success ]      2\n239-metropolis-pymetro-multiple.sh       [ success ]     10\n240-metropolis-pymetro-partitions.sh     [ success ]      3\n241-metropolis-pymetro-cachedparts.sh    [ success ]      3\n242-cached-restore.sh                    [ success ]     10\n243-prefault-restore.sh                  [ success ]     16\n244-precopy-restore.sh                   [ success ]     11\n301-mem-rest.sh                          [ success ]     13\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D628",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/420054100d2ad23e03a0f37ed5a0e57947a6e5c9",
          "sha": "420054100d2ad23e03a0f37ed5a0e57947a6e5c9"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/18608f09763b3dbe311a62fb3ab79502d34f871d",
          "html_url": "https://github.com/rcslab/aurora/commit/18608f09763b3dbe311a62fb3ab79502d34f871d",
          "sha": "18608f09763b3dbe311a62fb3ab79502d34f871d"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/dda4ce07b7faee71c85594bf22aea64284471385",
      "sha": "dda4ce07b7faee71c85594bf22aea64284471385",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OmRkYTRjZTA3YjdmYWVlNzFjODU1OTRiZjIyYWVhNjQyODQ0NzEzODU=",
      "html_url": "https://github.com/etsal/aurora/commit/dda4ce07b7faee71c85594bf22aea64284471385",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/dda4ce07b7faee71c85594bf22aea64284471385/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/dda4ce07b7faee71c85594bf22aea64284471385",
        "author": {
          "date": "2023-09-25T18:59:43.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "committer": {
          "date": "2023-09-25T19:07:57.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "message": "fix trace buffer and objprotect protection paths for region checkpointing\n\nSummary: The page protection path logic for region checkpointing is inaccurate because of missing TLB shootdowns for sls_objprotect. Fix and clean up the page protection path and add tests to test that COW is properly applied both for application and for region checkpoints.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Mon Sep 25 19:02:40 EDT 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      1\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      2\n204-print-stdout.sh                      [ success ]      3\n205-array-traversal.sh                   [ success ]      3\n206-mmap-file.sh                         [ success ]      3\n207-mmap-anonymous.sh                    [ success ]      4\n208-signal-handler.sh                    [ success ]      4\n209-pthreads-mutex.sh                    [ success ]      3\n210-file-vnode.sh                        [ success ]     10\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      4\n213-fork-shm.sh                          [ success ]     21\n214-file-pipes.sh                        [ success ]      3\n215-file-posixshm.sh                     [ success ]      3\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      4\n218-file-tcplisten.sh                    [ success ]     13\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     21\n221-lazy-osd-ckpt.sh                     [ success ]      1\n222-self-ckpt-mem.sh                     [ success ]      5\n223-restore-mem-multiple.sh              [ success ]      2\n224-restore-osd-multiple.sh              [ success ]      2\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      4\n227-memsnap-mem.sh                       [ success ]      1\n228-wal.sh                               [ success ]      0\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      4\n232-metropolis.sh                        [ success ]      0\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      0\n235-metropolis-accept.sh                 [ success ]      0\n236-metropolis-exit.sh                   [ success ]      2\n237-metropolis-accept4.sh                [ success ]      0\n238-metropolis-simple.sh                 [ success ]      0\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      0\n241-metropolis-partitions-cached.sh      [ success ]      1\n242-cached-restore.sh                    [ success ]      7\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      7\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      3\n247-remount-slos.sh                      [ success ]      4\n248-delta-restore.sh                     [ success ]      0\n249-pgresident.sh                        [ success ]      1\n250-simple-file-ckpt.sh                  [ success ]      4\n251-simple-socket-ckpt.sh                [ success ]      7\n252-simple-socket-restore.sh             [ success ]      8\n254-delta-checkpoint.sh                  [ success ]      4\n255-delta-socket.sh                      [ success ]      8\n256-memsnap-unaligned.sh                 [ success ]      1\n257-memsnap-sync.sh                      [ success ]      4\n258-shadow-default.sh                    [ success ]      4\n259-shadow-objprotect.sh                 [ success ]      4\n260-shadow-tracebuf.sh                   [ success ]      4\n261-memshadow-default.sh                 [ success ]      4\n262-memshadow-objprotect.sh              [ success ]      4\n263-memshadow-tracebuf.sh                [ success ]      4\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D838",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/a76552894c6cf8cf7784f0f9d024b823ad2d3d02",
          "sha": "a76552894c6cf8cf7784f0f9d024b823ad2d3d02"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/b99530f4d75093ad3d750876eea29622431d5217",
          "html_url": "https://github.com/etsal/aurora/commit/b99530f4d75093ad3d750876eea29622431d5217",
          "sha": "b99530f4d75093ad3d750876eea29622431d5217"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/90b7530e774b4b4ec002c9349e2ecc88283485eb",
      "sha": "90b7530e774b4b4ec002c9349e2ecc88283485eb",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OjkwYjc1MzBlNzc0YjRiNGVjMDAyYzkzNDllMmVjYzg4MjgzNDg1ZWI=",
      "html_url": "https://github.com/etsal/aurora/commit/90b7530e774b4b4ec002c9349e2ecc88283485eb",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/90b7530e774b4b4ec002c9349e2ecc88283485eb/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/90b7530e774b4b4ec002c9349e2ecc88283485eb",
        "author": {
          "date": "2021-06-20T10:09:18.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-06-20T10:09:25.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "added slsp_signal to all appropriate checkpoint paths\n\nSummary: Certain paths in sls_checkpoint() like in the case of empty partitiions lead to the waiting process never being notified that checkpointing is done. The issue manifests only once in a while because it is triggered on a race between the caller and the checkpointer. Add slsp_signal() to all paths in sls_checkpoint() to prevent this.\n\nTest Plan:\nBuild: FreeBSD 12.1-RELEASE FASTDBG\nHost: aurora\nTest started: Sat 19 Jun 2021 15:09:42 EDT\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      8\n002-load-mount-unload.sh                 [ success ]      6\n003-mount-unmount.sh                     [ success ]      0\n004-load-double-sls.sh                   [ success ]      4\n005-unload-double-sls.sh                 [ success ]      2\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      2\n008-mount-double.sh                      [ success ]      2\n009-unload-slos-before-sls.sh            [ success ]      2\n010-unmount-before-sls.sh                [ success ]      0\n101-simple-file-io.sh                    [ success ]      4\n102-fd-chroot.sh                         [ success ]      4\n201-simple-mem-ckpt.sh                   [ success ]      3\n202-simple-osd-ckpt.sh                   [ success ]      6\n203-busy-loop.sh                         [ success ]      4\n204-print-stdout.sh                      [ success ]      5\n205-array-traversal.sh                   [ success ]      7\n206-mmap-file.sh                         [ success ]      5\n207-mmap-anonymous.sh                    [ success ]      6\n208-signal-handler.sh                    [ success ]      6\n209-pthreads-mutex.sh                    [ success ]      6\n210-file-vnode.sh                        [ success ]     13\n211-fork-simple.sh                       [ success ]      6\n212-file-fifo.sh                         [ success ]      7\n214-file-pipes.sh                        [ success ]      5\n215-file-posixshm.sh                     [ success ]      5\n216-sysv-shm.sh                          [ success ]      8\n217-file-udplisten.sh                    [ success ]      6\n218-file-tcplisten.sh                    [ success ]     17\n221-lazy-osd-ckpt.sh                     [ success ]      3\n222-self-ckpt-mem.sh                     [ success ]     10\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      4\n225-memsnap-osd-poll.sh                  [ success ]      6\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      3\n228-wal.sh                               [ success ]      4\n229-chroot.sh                            [ success ]      5\n230-chroot-devfs.sh                      [ success ]     14\n231-memsnap-osd-nowait.sh                [ success ]      7\n232-metropolis.sh                        [ success ]      2\n233-metropolis-fork.sh                   [ success ]      2\n234-metropolis-exec.sh                   [ success ]      2\n235-metropolis-accept.sh                 [ success ]      2\n236-metropolis-exit.sh                   [ success ]      5\n237-metropolis-accept4.sh                [ success ]      2\n238-metropolis-pymetro.sh                [ success ]      2\n239-metropolis-pymetro-multiple.sh       [ success ]      2\n240-metropolis-pymetro-partitions.sh     [ success ]      3\n241-metropolis-pymetro-cachedparts.sh    [ success ]      5\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]     12\n244-precopy-restore.sh                   [ success ]     10\n301-mem-rest.sh                          [ success ]     10\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D532",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/b8caa840956653762e61cef15efa96f1d43276cd",
          "sha": "b8caa840956653762e61cef15efa96f1d43276cd"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/a9176b69d50d5f5480ecd2621048878bd6b0572a",
          "html_url": "https://github.com/etsal/aurora/commit/a9176b69d50d5f5480ecd2621048878bd6b0572a",
          "sha": "a9176b69d50d5f5480ecd2621048878bd6b0572a"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/90b7530e774b4b4ec002c9349e2ecc88283485eb",
      "sha": "90b7530e774b4b4ec002c9349e2ecc88283485eb",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OjkwYjc1MzBlNzc0YjRiNGVjMDAyYzkzNDllMmVjYzg4MjgzNDg1ZWI=",
      "html_url": "https://github.com/rcslab/aurora/commit/90b7530e774b4b4ec002c9349e2ecc88283485eb",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/90b7530e774b4b4ec002c9349e2ecc88283485eb/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/90b7530e774b4b4ec002c9349e2ecc88283485eb",
        "author": {
          "date": "2021-06-20T10:09:18.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-06-20T10:09:25.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "added slsp_signal to all appropriate checkpoint paths\n\nSummary: Certain paths in sls_checkpoint() like in the case of empty partitiions lead to the waiting process never being notified that checkpointing is done. The issue manifests only once in a while because it is triggered on a race between the caller and the checkpointer. Add slsp_signal() to all paths in sls_checkpoint() to prevent this.\n\nTest Plan:\nBuild: FreeBSD 12.1-RELEASE FASTDBG\nHost: aurora\nTest started: Sat 19 Jun 2021 15:09:42 EDT\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      8\n002-load-mount-unload.sh                 [ success ]      6\n003-mount-unmount.sh                     [ success ]      0\n004-load-double-sls.sh                   [ success ]      4\n005-unload-double-sls.sh                 [ success ]      2\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      2\n008-mount-double.sh                      [ success ]      2\n009-unload-slos-before-sls.sh            [ success ]      2\n010-unmount-before-sls.sh                [ success ]      0\n101-simple-file-io.sh                    [ success ]      4\n102-fd-chroot.sh                         [ success ]      4\n201-simple-mem-ckpt.sh                   [ success ]      3\n202-simple-osd-ckpt.sh                   [ success ]      6\n203-busy-loop.sh                         [ success ]      4\n204-print-stdout.sh                      [ success ]      5\n205-array-traversal.sh                   [ success ]      7\n206-mmap-file.sh                         [ success ]      5\n207-mmap-anonymous.sh                    [ success ]      6\n208-signal-handler.sh                    [ success ]      6\n209-pthreads-mutex.sh                    [ success ]      6\n210-file-vnode.sh                        [ success ]     13\n211-fork-simple.sh                       [ success ]      6\n212-file-fifo.sh                         [ success ]      7\n214-file-pipes.sh                        [ success ]      5\n215-file-posixshm.sh                     [ success ]      5\n216-sysv-shm.sh                          [ success ]      8\n217-file-udplisten.sh                    [ success ]      6\n218-file-tcplisten.sh                    [ success ]     17\n221-lazy-osd-ckpt.sh                     [ success ]      3\n222-self-ckpt-mem.sh                     [ success ]     10\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      4\n225-memsnap-osd-poll.sh                  [ success ]      6\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      3\n228-wal.sh                               [ success ]      4\n229-chroot.sh                            [ success ]      5\n230-chroot-devfs.sh                      [ success ]     14\n231-memsnap-osd-nowait.sh                [ success ]      7\n232-metropolis.sh                        [ success ]      2\n233-metropolis-fork.sh                   [ success ]      2\n234-metropolis-exec.sh                   [ success ]      2\n235-metropolis-accept.sh                 [ success ]      2\n236-metropolis-exit.sh                   [ success ]      5\n237-metropolis-accept4.sh                [ success ]      2\n238-metropolis-pymetro.sh                [ success ]      2\n239-metropolis-pymetro-multiple.sh       [ success ]      2\n240-metropolis-pymetro-partitions.sh     [ success ]      3\n241-metropolis-pymetro-cachedparts.sh    [ success ]      5\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]     12\n244-precopy-restore.sh                   [ success ]     10\n301-mem-rest.sh                          [ success ]     10\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D532",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/b8caa840956653762e61cef15efa96f1d43276cd",
          "sha": "b8caa840956653762e61cef15efa96f1d43276cd"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/a9176b69d50d5f5480ecd2621048878bd6b0572a",
          "html_url": "https://github.com/rcslab/aurora/commit/a9176b69d50d5f5480ecd2621048878bd6b0572a",
          "sha": "a9176b69d50d5f5480ecd2621048878bd6b0572a"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/9cb6c546470029bdb7413afe6ed85823e1d847e2",
      "sha": "9cb6c546470029bdb7413afe6ed85823e1d847e2",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OjljYjZjNTQ2NDcwMDI5YmRiNzQxM2FmZTZlZDg1ODIzZTFkODQ3ZTI=",
      "html_url": "https://github.com/rcslab/aurora/commit/9cb6c546470029bdb7413afe6ed85823e1d847e2",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/9cb6c546470029bdb7413afe6ed85823e1d847e2/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/9cb6c546470029bdb7413afe6ed85823e1d847e2",
        "author": {
          "date": "2023-10-03T18:35:32.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "committer": {
          "date": "2023-10-03T18:36:29.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "message": "moved all Metropolis logic into separate module\n\nSummary: Aurora currently has code paths exclusive to Metropolis that complicate maintenance and development. These code paths form the bulk of Metropolis logic and can be reorganized into a fully separate module. Refactor Metropolis-specific logic out of the SLS into the Metropolis module.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Tue Oct 3 18:16:31 EDT 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      1\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      2\n204-print-stdout.sh                      [ success ]      3\n205-array-traversal.sh                   [ success ]      3\n206-mmap-file.sh                         [ success ]      3\n207-mmap-anonymous.sh                    [ success ]      4\n208-signal-handler.sh                    [ success ]      4\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]     10\n211-fork-simple.sh                       [ success ]      4\n212-file-fifo.sh                         [ success ]      4\n213-fork-shm.sh                          [ success ]     19\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      3\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      4\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      4\n220-pgroups.sh                           [ success ]     21\n221-lazy-osd-ckpt.sh                     [ success ]      1\n222-self-ckpt-mem.sh                     [ success ]      4\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      2\n225-memsnap-osd-poll.sh                  [ success ]      4\n226-memsnap-osd-block.sh                 [ success ]      4\n227-memsnap-mem.sh                       [ success ]      1\n228-wal.sh                               [ success ]      0\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      0\n233-metropolis-fork.sh                   [ success ]      0\n234-metropolis-exec.sh                   [ success ]      0\n235-metropolis-accept.sh                 [ success ]      0\n236-metropolis-exit.sh                   [ success ]      2\n237-metropolis-accept4.sh                [ success ]      0\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      0\n240-metropolis-partitions.sh             [ success ]      0\n241-metropolis-partitions-cached.sh      [ success ]      0\n242-cached-restore.sh                    [ success ]      7\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      7\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      3\n247-remount-slos.sh                      [ success ]      4\n248-delta-restore.sh                     [ success ]      0\n249-pgresident.sh                        [ success ]      1\n250-simple-file-ckpt.sh                  [ success ]      3\n251-simple-socket-ckpt.sh                [ success ]      8\n252-simple-socket-restore.sh             [ success ]      8\n254-delta-checkpoint.sh                  [ success ]      3\n255-delta-socket.sh                      [ success ]      8\n256-memsnap-unaligned.sh                 [ success ]      2\n257-memsnap-sync.sh                      [ success ]      4\n258-shadow-default.sh                    [ success ]      4\n259-shadow-objprotect.sh                 [ success ]      3\n260-shadow-tracebuf.sh                   [ success ]      4\n261-memshadow-default.sh                 [ success ]      4\n262-memshadow-objprotect.sh              [ success ]      4\n263-memshadow-tracebuf.sh                [ success ]      5\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D841",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/fd6ad9edee6bb28223db6c46d0d20f7ba638aa2d",
          "sha": "fd6ad9edee6bb28223db6c46d0d20f7ba638aa2d"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/e365a3bc37f0bccca7a90af7ef40ff7a228c58db",
          "html_url": "https://github.com/rcslab/aurora/commit/e365a3bc37f0bccca7a90af7ef40ff7a228c58db",
          "sha": "e365a3bc37f0bccca7a90af7ef40ff7a228c58db"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/9cb6c546470029bdb7413afe6ed85823e1d847e2",
      "sha": "9cb6c546470029bdb7413afe6ed85823e1d847e2",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OjljYjZjNTQ2NDcwMDI5YmRiNzQxM2FmZTZlZDg1ODIzZTFkODQ3ZTI=",
      "html_url": "https://github.com/etsal/aurora/commit/9cb6c546470029bdb7413afe6ed85823e1d847e2",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/9cb6c546470029bdb7413afe6ed85823e1d847e2/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/9cb6c546470029bdb7413afe6ed85823e1d847e2",
        "author": {
          "date": "2023-10-03T18:35:32.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "committer": {
          "date": "2023-10-03T18:36:29.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "message": "moved all Metropolis logic into separate module\n\nSummary: Aurora currently has code paths exclusive to Metropolis that complicate maintenance and development. These code paths form the bulk of Metropolis logic and can be reorganized into a fully separate module. Refactor Metropolis-specific logic out of the SLS into the Metropolis module.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Tue Oct 3 18:16:31 EDT 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      1\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      2\n204-print-stdout.sh                      [ success ]      3\n205-array-traversal.sh                   [ success ]      3\n206-mmap-file.sh                         [ success ]      3\n207-mmap-anonymous.sh                    [ success ]      4\n208-signal-handler.sh                    [ success ]      4\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]     10\n211-fork-simple.sh                       [ success ]      4\n212-file-fifo.sh                         [ success ]      4\n213-fork-shm.sh                          [ success ]     19\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      3\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      4\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      4\n220-pgroups.sh                           [ success ]     21\n221-lazy-osd-ckpt.sh                     [ success ]      1\n222-self-ckpt-mem.sh                     [ success ]      4\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      2\n225-memsnap-osd-poll.sh                  [ success ]      4\n226-memsnap-osd-block.sh                 [ success ]      4\n227-memsnap-mem.sh                       [ success ]      1\n228-wal.sh                               [ success ]      0\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      0\n233-metropolis-fork.sh                   [ success ]      0\n234-metropolis-exec.sh                   [ success ]      0\n235-metropolis-accept.sh                 [ success ]      0\n236-metropolis-exit.sh                   [ success ]      2\n237-metropolis-accept4.sh                [ success ]      0\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      0\n240-metropolis-partitions.sh             [ success ]      0\n241-metropolis-partitions-cached.sh      [ success ]      0\n242-cached-restore.sh                    [ success ]      7\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      7\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      3\n247-remount-slos.sh                      [ success ]      4\n248-delta-restore.sh                     [ success ]      0\n249-pgresident.sh                        [ success ]      1\n250-simple-file-ckpt.sh                  [ success ]      3\n251-simple-socket-ckpt.sh                [ success ]      8\n252-simple-socket-restore.sh             [ success ]      8\n254-delta-checkpoint.sh                  [ success ]      3\n255-delta-socket.sh                      [ success ]      8\n256-memsnap-unaligned.sh                 [ success ]      2\n257-memsnap-sync.sh                      [ success ]      4\n258-shadow-default.sh                    [ success ]      4\n259-shadow-objprotect.sh                 [ success ]      3\n260-shadow-tracebuf.sh                   [ success ]      4\n261-memshadow-default.sh                 [ success ]      4\n262-memshadow-objprotect.sh              [ success ]      4\n263-memshadow-tracebuf.sh                [ success ]      5\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D841",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/fd6ad9edee6bb28223db6c46d0d20f7ba638aa2d",
          "sha": "fd6ad9edee6bb28223db6c46d0d20f7ba638aa2d"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/e365a3bc37f0bccca7a90af7ef40ff7a228c58db",
          "html_url": "https://github.com/etsal/aurora/commit/e365a3bc37f0bccca7a90af7ef40ff7a228c58db",
          "sha": "e365a3bc37f0bccca7a90af7ef40ff7a228c58db"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/f6ea8870c0ae457a164a7b802f9c8d90522c9e3e",
      "sha": "f6ea8870c0ae457a164a7b802f9c8d90522c9e3e",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OmY2ZWE4ODcwYzBhZTQ1N2ExNjRhN2I4MDJmOWM4ZDkwNTIyYzllM2U=",
      "html_url": "https://github.com/rcslab/aurora/commit/f6ea8870c0ae457a164a7b802f9c8d90522c9e3e",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/f6ea8870c0ae457a164a7b802f9c8d90522c9e3e/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/f6ea8870c0ae457a164a7b802f9c8d90522c9e3e",
        "author": {
          "date": "2022-12-15T12:23:27.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2022-12-15T12:32:03.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "fixed PHOLD error paths\n\nSummary:\nThe SLS grabs a reference to processes during checkpointing using PHOLD, but some error\npaths do not account for this by calling PRELE before exiting. Add the missing PRELE to the error paths.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Fri Nov 25 15:49:54 EST 2022\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      4\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      8\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     25\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      6\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      0\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      2\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      2\n246-remount-sls.sh                       [ success ]      5\n247-remount-slos.sh                      [ success ]      5\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D724",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/91bd02e80e02172a60c14960dc0a583cfafb2677",
          "sha": "91bd02e80e02172a60c14960dc0a583cfafb2677"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/09af788bffe2d3baeacb43a54da08afe5548d269",
          "html_url": "https://github.com/rcslab/aurora/commit/09af788bffe2d3baeacb43a54da08afe5548d269",
          "sha": "09af788bffe2d3baeacb43a54da08afe5548d269"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/f6ea8870c0ae457a164a7b802f9c8d90522c9e3e",
      "sha": "f6ea8870c0ae457a164a7b802f9c8d90522c9e3e",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OmY2ZWE4ODcwYzBhZTQ1N2ExNjRhN2I4MDJmOWM4ZDkwNTIyYzllM2U=",
      "html_url": "https://github.com/etsal/aurora/commit/f6ea8870c0ae457a164a7b802f9c8d90522c9e3e",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/f6ea8870c0ae457a164a7b802f9c8d90522c9e3e/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/f6ea8870c0ae457a164a7b802f9c8d90522c9e3e",
        "author": {
          "date": "2022-12-15T12:23:27.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2022-12-15T12:32:03.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "fixed PHOLD error paths\n\nSummary:\nThe SLS grabs a reference to processes during checkpointing using PHOLD, but some error\npaths do not account for this by calling PRELE before exiting. Add the missing PRELE to the error paths.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Fri Nov 25 15:49:54 EST 2022\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      4\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      8\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     25\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      6\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      0\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      2\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      2\n246-remount-sls.sh                       [ success ]      5\n247-remount-slos.sh                      [ success ]      5\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D724",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/91bd02e80e02172a60c14960dc0a583cfafb2677",
          "sha": "91bd02e80e02172a60c14960dc0a583cfafb2677"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/09af788bffe2d3baeacb43a54da08afe5548d269",
          "html_url": "https://github.com/etsal/aurora/commit/09af788bffe2d3baeacb43a54da08afe5548d269",
          "sha": "09af788bffe2d3baeacb43a54da08afe5548d269"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/18608f09763b3dbe311a62fb3ab79502d34f871d",
      "sha": "18608f09763b3dbe311a62fb3ab79502d34f871d",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OjE4NjA4ZjA5NzYzYjNkYmUzMTFhNjJmYjNhYjc5NTAyZDM0Zjg3MWQ=",
      "html_url": "https://github.com/etsal/aurora/commit/18608f09763b3dbe311a62fb3ab79502d34f871d",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/18608f09763b3dbe311a62fb3ab79502d34f871d/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/18608f09763b3dbe311a62fb3ab79502d34f871d",
        "author": {
          "date": "2021-10-28T14:13:36.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-10-28T18:58:42.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "Stress test under SLOWDBG\n\nSummary:\nUsing the STRESS_TEST=on flag under SLOWDBG uncovers various bugs in both the SLOS and the SLS. Among those are:\n\n- The SLOS' error paths do not gracefully handle attempting to mount an invalid file system. Fix up the error handling to handle this case.\n- Metropolis tests sometimes deadlock on unload because of a race between exiting processes and the SLS. Fix this race.\n- Fix lock inversions in sls_syscall\n- Fix memory leaks when restoring pipes and kqueues\n- Plug memory leak for root vnode on unmount\n\nAlso do some housecleaning:\n\n- Remove obsolete btree tests\n- Add some explanatory comments for certain operations on the SLOS like the root change callbacks\n\nTest Plan:\nBuild: FreeBSD 12.1-RELEASE SLOWDBG\nHost: aurora.rcs.uwaterloo.ca\nTest started: Thu Oct 28 22:52:34 UTC 2021\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      0\n002-load-mount-unload.sh                 [ success ]     10\n003-mount-unmount.sh                     [ success ]      0\n004-load-double-sls.sh                   [ success ]      3\n005-unload-double-sls.sh                 [ success ]      5\n006-load-double-slos.sh                  [ success ]      0\n007-unload-double-slos.sh                [ success ]      0\n008-mount-double.sh                      [ success ]      0\n009-unload-slos-before-unmount.sh        [ success ]      3\n010-unmount-before-sls.sh                [ success ]      2\n011-sls-without-slsfs.sh                 [ success ]      0\n012-invalid-slsfs.sh                     [ success ]      5\n101-simple-file-io.sh                    [ success ]      3\n102-fd-chroot.sh                         [ success ]      5\n201-simple-mem-ckpt.sh                   [ success ]      4\n202-simple-osd-ckpt.sh                   [ success ]      6\n203-busy-loop.sh                         [ success ]      5\n204-print-stdout.sh                      [ success ]      7\n205-array-traversal.sh                   [ success ]      6\n206-mmap-file.sh                         [ success ]      8\n207-mmap-anonymous.sh                    [ success ]      5\n208-signal-handler.sh                    [ success ]      9\n209-pthreads-mutex.sh                    [ success ]      6\n210-file-vnode.sh                        [ success ]     12\n211-fork-simple.sh                       [ success ]      6\n212-file-fifo.sh                         [ success ]      9\n214-file-pipes.sh                        [ success ]      9\n215-file-posixshm.sh                     [ success ]      6\n216-sysv-shm.sh                          [ success ]      9\n217-file-udplisten.sh                    [ success ]      7\n218-file-tcplisten.sh                    [ success ]     15\n219-kqueue.sh                            [ success ]      7\n220-pgroups.sh                           [ success ]     25\n221-lazy-osd-ckpt.sh                     [ success ]      7\n222-self-ckpt-mem.sh                     [ success ]     12\n223-restore-mem-multiple.sh              [ success ]      5\n224-restore-osd-multiple.sh              [ success ]      6\n225-memsnap-osd-poll.sh                  [ success ]      9\n226-memsnap-osd-block.sh                 [ success ]      9\n227-memsnap-mem.sh                       [ success ]      4\n228-wal.sh                               [ success ]      2\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      9\n232-metropolis.sh                        [ success ]      3\n233-metropolis-fork.sh                   [ success ]      2\n234-metropolis-exec.sh                   [ success ]      3\n235-metropolis-accept.sh                 [ success ]      7\n236-metropolis-exit.sh                   [ success ]      5\n237-metropolis-accept4.sh                [ success ]      2\n238-metropolis-pymetro.sh                [ success ]      4\n239-metropolis-pymetro-multiple.sh       [ success ]      5\n240-metropolis-pymetro-partitions.sh     [ success ]      3\n241-metropolis-pymetro-cachedparts.sh    [ success ]      3\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]     11\n244-precopy-restore.sh                   [ success ]     12\n301-mem-rest.sh                          [ success ]      8\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D624",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/a9667a80b502e4f8b8639313a7e5792bcf659c7e",
          "sha": "a9667a80b502e4f8b8639313a7e5792bcf659c7e"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/76ecbbeb9ab6bd147d80d2a08473bfc7b59d15b8",
          "html_url": "https://github.com/etsal/aurora/commit/76ecbbeb9ab6bd147d80d2a08473bfc7b59d15b8",
          "sha": "76ecbbeb9ab6bd147d80d2a08473bfc7b59d15b8"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/18608f09763b3dbe311a62fb3ab79502d34f871d",
      "sha": "18608f09763b3dbe311a62fb3ab79502d34f871d",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OjE4NjA4ZjA5NzYzYjNkYmUzMTFhNjJmYjNhYjc5NTAyZDM0Zjg3MWQ=",
      "html_url": "https://github.com/rcslab/aurora/commit/18608f09763b3dbe311a62fb3ab79502d34f871d",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/18608f09763b3dbe311a62fb3ab79502d34f871d/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/18608f09763b3dbe311a62fb3ab79502d34f871d",
        "author": {
          "date": "2021-10-28T14:13:36.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-10-28T18:58:42.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "Stress test under SLOWDBG\n\nSummary:\nUsing the STRESS_TEST=on flag under SLOWDBG uncovers various bugs in both the SLOS and the SLS. Among those are:\n\n- The SLOS' error paths do not gracefully handle attempting to mount an invalid file system. Fix up the error handling to handle this case.\n- Metropolis tests sometimes deadlock on unload because of a race between exiting processes and the SLS. Fix this race.\n- Fix lock inversions in sls_syscall\n- Fix memory leaks when restoring pipes and kqueues\n- Plug memory leak for root vnode on unmount\n\nAlso do some housecleaning:\n\n- Remove obsolete btree tests\n- Add some explanatory comments for certain operations on the SLOS like the root change callbacks\n\nTest Plan:\nBuild: FreeBSD 12.1-RELEASE SLOWDBG\nHost: aurora.rcs.uwaterloo.ca\nTest started: Thu Oct 28 22:52:34 UTC 2021\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      0\n002-load-mount-unload.sh                 [ success ]     10\n003-mount-unmount.sh                     [ success ]      0\n004-load-double-sls.sh                   [ success ]      3\n005-unload-double-sls.sh                 [ success ]      5\n006-load-double-slos.sh                  [ success ]      0\n007-unload-double-slos.sh                [ success ]      0\n008-mount-double.sh                      [ success ]      0\n009-unload-slos-before-unmount.sh        [ success ]      3\n010-unmount-before-sls.sh                [ success ]      2\n011-sls-without-slsfs.sh                 [ success ]      0\n012-invalid-slsfs.sh                     [ success ]      5\n101-simple-file-io.sh                    [ success ]      3\n102-fd-chroot.sh                         [ success ]      5\n201-simple-mem-ckpt.sh                   [ success ]      4\n202-simple-osd-ckpt.sh                   [ success ]      6\n203-busy-loop.sh                         [ success ]      5\n204-print-stdout.sh                      [ success ]      7\n205-array-traversal.sh                   [ success ]      6\n206-mmap-file.sh                         [ success ]      8\n207-mmap-anonymous.sh                    [ success ]      5\n208-signal-handler.sh                    [ success ]      9\n209-pthreads-mutex.sh                    [ success ]      6\n210-file-vnode.sh                        [ success ]     12\n211-fork-simple.sh                       [ success ]      6\n212-file-fifo.sh                         [ success ]      9\n214-file-pipes.sh                        [ success ]      9\n215-file-posixshm.sh                     [ success ]      6\n216-sysv-shm.sh                          [ success ]      9\n217-file-udplisten.sh                    [ success ]      7\n218-file-tcplisten.sh                    [ success ]     15\n219-kqueue.sh                            [ success ]      7\n220-pgroups.sh                           [ success ]     25\n221-lazy-osd-ckpt.sh                     [ success ]      7\n222-self-ckpt-mem.sh                     [ success ]     12\n223-restore-mem-multiple.sh              [ success ]      5\n224-restore-osd-multiple.sh              [ success ]      6\n225-memsnap-osd-poll.sh                  [ success ]      9\n226-memsnap-osd-block.sh                 [ success ]      9\n227-memsnap-mem.sh                       [ success ]      4\n228-wal.sh                               [ success ]      2\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      9\n232-metropolis.sh                        [ success ]      3\n233-metropolis-fork.sh                   [ success ]      2\n234-metropolis-exec.sh                   [ success ]      3\n235-metropolis-accept.sh                 [ success ]      7\n236-metropolis-exit.sh                   [ success ]      5\n237-metropolis-accept4.sh                [ success ]      2\n238-metropolis-pymetro.sh                [ success ]      4\n239-metropolis-pymetro-multiple.sh       [ success ]      5\n240-metropolis-pymetro-partitions.sh     [ success ]      3\n241-metropolis-pymetro-cachedparts.sh    [ success ]      3\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]     11\n244-precopy-restore.sh                   [ success ]     12\n301-mem-rest.sh                          [ success ]      8\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D624",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/a9667a80b502e4f8b8639313a7e5792bcf659c7e",
          "sha": "a9667a80b502e4f8b8639313a7e5792bcf659c7e"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/76ecbbeb9ab6bd147d80d2a08473bfc7b59d15b8",
          "html_url": "https://github.com/rcslab/aurora/commit/76ecbbeb9ab6bd147d80d2a08473bfc7b59d15b8",
          "sha": "76ecbbeb9ab6bd147d80d2a08473bfc7b59d15b8"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/2082bfc70f38156b29fb084c96f3f2ade26046c8",
      "sha": "2082bfc70f38156b29fb084c96f3f2ade26046c8",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OjIwODJiZmM3MGYzODE1NmIyOWZiMDg0Yzk2ZjNmMmFkZTI2MDQ2Yzg=",
      "html_url": "https://github.com/etsal/aurora/commit/2082bfc70f38156b29fb084c96f3f2ade26046c8",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/2082bfc70f38156b29fb084c96f3f2ade26046c8/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/2082bfc70f38156b29fb084c96f3f2ade26046c8",
        "author": {
          "date": "2021-06-14T18:32:35.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-06-14T18:37:42.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "refactoring and bugfixing\n\nSummary: Some parts of the code, like the logic handling memory and disk checkpoints in the restore path, are needlessly complicated and impede progress in implementing different restore strategies (e.g., prefaulting restores). Tidy up the code paths in anticipation of these additions.\n\nTest Plan:\nBuild: FreeBSD 12.1-RELEASE FASTDBG\nHost: aurora\nTest started: Mon 14 Jun 2021 18:33:45 EDT\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      4\n002-load-mount-unload.sh                 [ success ]      4\n003-mount-unmount.sh                     [ success ]      0\n004-load-double-sls.sh                   [ success ]      2\n005-unload-double-sls.sh                 [ success ]      2\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      1\n008-mount-double.sh                      [ success ]      1\n009-unload-slos-before-sls.sh            [ success ]      1\n010-unmount-before-sls.sh                [ success ]      1\n101-simple-file-io.sh                    [ success ]      1\n102-fd-chroot.sh                         [ success ]      4\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      3\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      5\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      5\n207-mmap-anonymous.sh                    [ success ]      4\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      5\n210-file-vnode.sh                        [ success ]     10\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      6\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      5\n216-sysv-shm.sh                          [ success ]      5\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     15\n221-lazy-osd-ckpt.sh                     [ success ]      3\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      5\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      6\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ success ]      6\n230-chroot-devfs.sh                      [ success ]     13\n231-memsnap-osd-nowait.sh                [ success ]      7\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      2\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-pymetro.sh                [ success ]      3\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-pymetro-partitions.sh     [ success ]      2\n301-mem-rest.sh                          [ success ]      6\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D519",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/12768f4d73e52bcaf171caef305f1dfe4cd1c8af",
          "sha": "12768f4d73e52bcaf171caef305f1dfe4cd1c8af"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/2228719f2a57a9496f0eb13a8080f6e0d76b6be1",
          "html_url": "https://github.com/etsal/aurora/commit/2228719f2a57a9496f0eb13a8080f6e0d76b6be1",
          "sha": "2228719f2a57a9496f0eb13a8080f6e0d76b6be1"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/2082bfc70f38156b29fb084c96f3f2ade26046c8",
      "sha": "2082bfc70f38156b29fb084c96f3f2ade26046c8",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OjIwODJiZmM3MGYzODE1NmIyOWZiMDg0Yzk2ZjNmMmFkZTI2MDQ2Yzg=",
      "html_url": "https://github.com/rcslab/aurora/commit/2082bfc70f38156b29fb084c96f3f2ade26046c8",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/2082bfc70f38156b29fb084c96f3f2ade26046c8/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/2082bfc70f38156b29fb084c96f3f2ade26046c8",
        "author": {
          "date": "2021-06-14T18:32:35.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-06-14T18:37:42.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "refactoring and bugfixing\n\nSummary: Some parts of the code, like the logic handling memory and disk checkpoints in the restore path, are needlessly complicated and impede progress in implementing different restore strategies (e.g., prefaulting restores). Tidy up the code paths in anticipation of these additions.\n\nTest Plan:\nBuild: FreeBSD 12.1-RELEASE FASTDBG\nHost: aurora\nTest started: Mon 14 Jun 2021 18:33:45 EDT\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      4\n002-load-mount-unload.sh                 [ success ]      4\n003-mount-unmount.sh                     [ success ]      0\n004-load-double-sls.sh                   [ success ]      2\n005-unload-double-sls.sh                 [ success ]      2\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      1\n008-mount-double.sh                      [ success ]      1\n009-unload-slos-before-sls.sh            [ success ]      1\n010-unmount-before-sls.sh                [ success ]      1\n101-simple-file-io.sh                    [ success ]      1\n102-fd-chroot.sh                         [ success ]      4\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      3\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      5\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      5\n207-mmap-anonymous.sh                    [ success ]      4\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      5\n210-file-vnode.sh                        [ success ]     10\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      6\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      5\n216-sysv-shm.sh                          [ success ]      5\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     15\n221-lazy-osd-ckpt.sh                     [ success ]      3\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      5\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      6\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ success ]      6\n230-chroot-devfs.sh                      [ success ]     13\n231-memsnap-osd-nowait.sh                [ success ]      7\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      2\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-pymetro.sh                [ success ]      3\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-pymetro-partitions.sh     [ success ]      2\n301-mem-rest.sh                          [ success ]      6\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D519",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/12768f4d73e52bcaf171caef305f1dfe4cd1c8af",
          "sha": "12768f4d73e52bcaf171caef305f1dfe4cd1c8af"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/2228719f2a57a9496f0eb13a8080f6e0d76b6be1",
          "html_url": "https://github.com/rcslab/aurora/commit/2228719f2a57a9496f0eb13a8080f6e0d76b6be1",
          "sha": "2228719f2a57a9496f0eb13a8080f6e0d76b6be1"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/8b15994d39bb3561fcb6d0fcc40ad1663c81e211",
      "sha": "8b15994d39bb3561fcb6d0fcc40ad1663c81e211",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OjhiMTU5OTRkMzliYjM1NjFmY2I2ZDBmY2M0MGFkMTY2M2M4MWUyMTE=",
      "html_url": "https://github.com/rcslab/aurora/commit/8b15994d39bb3561fcb6d0fcc40ad1663c81e211",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/8b15994d39bb3561fcb6d0fcc40ad1663c81e211/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/8b15994d39bb3561fcb6d0fcc40ad1663c81e211",
        "author": {
          "date": "2023-09-11T15:16:44.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "committer": {
          "date": "2023-09-11T18:12:32.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "message": "split region checkpointing off of the main checkpoint file (non-functional change)\n\nSummary:\nThe application and region checkpointing code paths have diverged to the point\nthat they are completely independent. Spin off the region checkpointing code path to a\ndifferent file to make this distinction clearer.\n\nTest Plan:\nRerunning the tests:\n\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Mon Sep 11 14:50:51 EDT 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      1\n203-busy-loop.sh                         [ success ]      2\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      3\n206-mmap-file.sh                         [ success ]      3\n207-mmap-anonymous.sh                    [ success ]      2\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      3\n210-file-vnode.sh                        [ success ]     11\n211-fork-simple.sh                       [ success ]      4\n212-file-fifo.sh                         [ success ]      4\n213-fork-shm.sh                          [ success ]     23\n214-file-pipes.sh                        [ success ]      3\n215-file-posixshm.sh                     [ success ]      3\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     13\n219-kqueue.sh                            [ success ]      4\n220-pgroups.sh                           [ success ]     21\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      4\n223-restore-mem-multiple.sh              [ success ]      2\n224-restore-osd-multiple.sh              [ success ]      2\n225-memsnap-osd-poll.sh                  [ success ]      4\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      1\n228-wal.sh                               [ success ]      0\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      4\n232-metropolis.sh                        [ success ]      0\n233-metropolis-fork.sh                   [ success ]      0\n234-metropolis-exec.sh                   [ success ]      0\n235-metropolis-accept.sh                 [ success ]      0\n236-metropolis-exit.sh                   [ success ]      2\n237-metropolis-accept4.sh                [ success ]      0\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      0\n240-metropolis-partitions.sh             [ success ]      0\n241-metropolis-partitions-cached.sh      [ success ]      0\n242-cached-restore.sh                    [ success ]      7\n243-prefault-restore.sh                  [ success ]      7\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      3\n247-remount-slos.sh                      [ success ]      4\n248-delta-restore.sh                     [ success ]      0\n249-pgresident.sh                        [ success ]      1\n250-simple-file-ckpt.sh                  [ success ]      3\n251-simple-socket-ckpt.sh                [ success ]      7\n252-simple-socket-restore.sh             [ success ]      8\n254-delta-checkpoint.sh                  [ success ]      3\n255-delta-socket.sh                      [ success ]      8\n256-memsnap-unaligned.sh                 [ success ]      1\n257-memsnap-sync.sh                      [ success ]      4\n\nReviewers: ryan, ali, tavianator\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D816",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/271be31af8c6273439a431a96af2965a06790548",
          "sha": "271be31af8c6273439a431a96af2965a06790548"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/37ce0c630f1af445802e4cd1035add3f32e46c2c",
          "html_url": "https://github.com/rcslab/aurora/commit/37ce0c630f1af445802e4cd1035add3f32e46c2c",
          "sha": "37ce0c630f1af445802e4cd1035add3f32e46c2c"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/8b15994d39bb3561fcb6d0fcc40ad1663c81e211",
      "sha": "8b15994d39bb3561fcb6d0fcc40ad1663c81e211",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OjhiMTU5OTRkMzliYjM1NjFmY2I2ZDBmY2M0MGFkMTY2M2M4MWUyMTE=",
      "html_url": "https://github.com/etsal/aurora/commit/8b15994d39bb3561fcb6d0fcc40ad1663c81e211",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/8b15994d39bb3561fcb6d0fcc40ad1663c81e211/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/8b15994d39bb3561fcb6d0fcc40ad1663c81e211",
        "author": {
          "date": "2023-09-11T15:16:44.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "committer": {
          "date": "2023-09-11T18:12:32.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "message": "split region checkpointing off of the main checkpoint file (non-functional change)\n\nSummary:\nThe application and region checkpointing code paths have diverged to the point\nthat they are completely independent. Spin off the region checkpointing code path to a\ndifferent file to make this distinction clearer.\n\nTest Plan:\nRerunning the tests:\n\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Mon Sep 11 14:50:51 EDT 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      1\n203-busy-loop.sh                         [ success ]      2\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      3\n206-mmap-file.sh                         [ success ]      3\n207-mmap-anonymous.sh                    [ success ]      2\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      3\n210-file-vnode.sh                        [ success ]     11\n211-fork-simple.sh                       [ success ]      4\n212-file-fifo.sh                         [ success ]      4\n213-fork-shm.sh                          [ success ]     23\n214-file-pipes.sh                        [ success ]      3\n215-file-posixshm.sh                     [ success ]      3\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     13\n219-kqueue.sh                            [ success ]      4\n220-pgroups.sh                           [ success ]     21\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      4\n223-restore-mem-multiple.sh              [ success ]      2\n224-restore-osd-multiple.sh              [ success ]      2\n225-memsnap-osd-poll.sh                  [ success ]      4\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      1\n228-wal.sh                               [ success ]      0\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      4\n232-metropolis.sh                        [ success ]      0\n233-metropolis-fork.sh                   [ success ]      0\n234-metropolis-exec.sh                   [ success ]      0\n235-metropolis-accept.sh                 [ success ]      0\n236-metropolis-exit.sh                   [ success ]      2\n237-metropolis-accept4.sh                [ success ]      0\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      0\n240-metropolis-partitions.sh             [ success ]      0\n241-metropolis-partitions-cached.sh      [ success ]      0\n242-cached-restore.sh                    [ success ]      7\n243-prefault-restore.sh                  [ success ]      7\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      3\n247-remount-slos.sh                      [ success ]      4\n248-delta-restore.sh                     [ success ]      0\n249-pgresident.sh                        [ success ]      1\n250-simple-file-ckpt.sh                  [ success ]      3\n251-simple-socket-ckpt.sh                [ success ]      7\n252-simple-socket-restore.sh             [ success ]      8\n254-delta-checkpoint.sh                  [ success ]      3\n255-delta-socket.sh                      [ success ]      8\n256-memsnap-unaligned.sh                 [ success ]      1\n257-memsnap-sync.sh                      [ success ]      4\n\nReviewers: ryan, ali, tavianator\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D816",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/271be31af8c6273439a431a96af2965a06790548",
          "sha": "271be31af8c6273439a431a96af2965a06790548"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/37ce0c630f1af445802e4cd1035add3f32e46c2c",
          "html_url": "https://github.com/etsal/aurora/commit/37ce0c630f1af445802e4cd1035add3f32e46c2c",
          "sha": "37ce0c630f1af445802e4cd1035add3f32e46c2c"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/de5a7670e5e2b584f261ba56a0ad3fdce6a8eb75",
      "sha": "de5a7670e5e2b584f261ba56a0ad3fdce6a8eb75",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OmRlNWE3NjcwZTVlMmI1ODRmMjYxYmE1NmEwYWQzZmRjZTZhOGViNzU=",
      "html_url": "https://github.com/etsal/aurora/commit/de5a7670e5e2b584f261ba56a0ad3fdce6a8eb75",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/de5a7670e5e2b584f261ba56a0ad3fdce6a8eb75/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/de5a7670e5e2b584f261ba56a0ad3fdce6a8eb75",
        "author": {
          "date": "2021-02-20T13:19:00.000-05:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-02-20T13:23:50.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "added Metropolis mode\n\nSummary: Aurora supports the Metropolis serverless mechanism. Container init functions mark themselves to be in Metropolis mode, which persists across fork() and execve() calls. Metropolis mode triggers a checkpoint for every accept() call, making snapshot creation trivial and allowing functions to do arbitrary setup before the checkpoint.\n\nTest Plan:\nRunning the new tests to exercise the Metropolis paths:\n\nBuild: FreeBSD 12.1-RELEASE PERF\nHost: skylake4.rcs.uwaterloo.ca\nTest started: Fri Feb 19 12:04:49 UTC 2021\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      2\n002-load-mount-unload.sh                 [ success ]      3\n003-mount-unmount.sh                     [ success ]      1\n004-load-double-sls.sh                   [ success ]      0\n005-unload-double-sls.sh                 [ success ]      1\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      1\n008-mount-double.sh                      [ success ]      1\n009-unload-slos-before-sls.sh            [ success ]      1\n010-unmount-before-sls.sh                [ success ]      0\n101-simple-file-io.sh                    [ success ]      1\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      1\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      5\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      3\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     15\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ success ]      4\n230-chroot-devfs.sh                      [ success ]      3\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D419",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/bb87d48b2a2340b67a18b79e6e449624814c646e",
          "sha": "bb87d48b2a2340b67a18b79e6e449624814c646e"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/898a2f7660f2bbbc470fd50789d57e3e13eaa91a",
          "html_url": "https://github.com/etsal/aurora/commit/898a2f7660f2bbbc470fd50789d57e3e13eaa91a",
          "sha": "898a2f7660f2bbbc470fd50789d57e3e13eaa91a"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/de5a7670e5e2b584f261ba56a0ad3fdce6a8eb75",
      "sha": "de5a7670e5e2b584f261ba56a0ad3fdce6a8eb75",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OmRlNWE3NjcwZTVlMmI1ODRmMjYxYmE1NmEwYWQzZmRjZTZhOGViNzU=",
      "html_url": "https://github.com/rcslab/aurora/commit/de5a7670e5e2b584f261ba56a0ad3fdce6a8eb75",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/de5a7670e5e2b584f261ba56a0ad3fdce6a8eb75/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/de5a7670e5e2b584f261ba56a0ad3fdce6a8eb75",
        "author": {
          "date": "2021-02-20T13:19:00.000-05:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-02-20T13:23:50.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "added Metropolis mode\n\nSummary: Aurora supports the Metropolis serverless mechanism. Container init functions mark themselves to be in Metropolis mode, which persists across fork() and execve() calls. Metropolis mode triggers a checkpoint for every accept() call, making snapshot creation trivial and allowing functions to do arbitrary setup before the checkpoint.\n\nTest Plan:\nRunning the new tests to exercise the Metropolis paths:\n\nBuild: FreeBSD 12.1-RELEASE PERF\nHost: skylake4.rcs.uwaterloo.ca\nTest started: Fri Feb 19 12:04:49 UTC 2021\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      2\n002-load-mount-unload.sh                 [ success ]      3\n003-mount-unmount.sh                     [ success ]      1\n004-load-double-sls.sh                   [ success ]      0\n005-unload-double-sls.sh                 [ success ]      1\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      1\n008-mount-double.sh                      [ success ]      1\n009-unload-slos-before-sls.sh            [ success ]      1\n010-unmount-before-sls.sh                [ success ]      0\n101-simple-file-io.sh                    [ success ]      1\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      1\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      5\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      3\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     15\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ success ]      4\n230-chroot-devfs.sh                      [ success ]      3\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D419",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/bb87d48b2a2340b67a18b79e6e449624814c646e",
          "sha": "bb87d48b2a2340b67a18b79e6e449624814c646e"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/898a2f7660f2bbbc470fd50789d57e3e13eaa91a",
          "html_url": "https://github.com/rcslab/aurora/commit/898a2f7660f2bbbc470fd50789d57e3e13eaa91a",
          "sha": "898a2f7660f2bbbc470fd50789d57e3e13eaa91a"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/4f9584ca0e8d7ef640bbad5c4e29fba166e17082",
      "sha": "4f9584ca0e8d7ef640bbad5c4e29fba166e17082",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OjRmOTU4NGNhMGU4ZDdlZjY0MGJiYWQ1YzRlMjlmYmExNjZlMTcwODI=",
      "html_url": "https://github.com/rcslab/aurora/commit/4f9584ca0e8d7ef640bbad5c4e29fba166e17082",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/4f9584ca0e8d7ef640bbad5c4e29fba166e17082/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/4f9584ca0e8d7ef640bbad5c4e29fba166e17082",
        "author": {
          "date": "2021-07-16T14:40:08.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-07-16T14:40:17.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "vectorized file restore path\n\nSummary:\nThe file restore function slsrest_file holds a lot of code specific to individual file types. Vectorize the path, spinning out\nthe file type specific code to its appropriate file.\n\nTest Plan:\nUsing the testbench:\n\nBuild: FreeBSD 12.1-RELEASE FASTDBG\nHost: aurora\nTest started: Fri 16 Jul 2021 14:20:56 EDT\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      9\n002-load-mount-unload.sh                 [ success ]      5\n003-mount-unmount.sh                     [ success ]      1\n004-load-double-sls.sh                   [ success ]      1\n005-unload-double-sls.sh                 [ success ]      6\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      2\n008-mount-double.sh                      [ success ]      2\n009-unload-slos-before-sls.sh            [ success ]      2\n010-unmount-before-sls.sh                [ success ]      0\n101-simple-file-io.sh                    [ success ]      2\n102-fd-chroot.sh                         [ success ]      4\n201-simple-mem-ckpt.sh                   [ success ]      3\n202-simple-osd-ckpt.sh                   [ success ]      3\n203-busy-loop.sh                         [ success ]      4\n204-print-stdout.sh                      [ success ]      7\n205-array-traversal.sh                   [ success ]      5\n206-mmap-file.sh                         [ success ]      7\n207-mmap-anonymous.sh                    [ success ]      4\n208-signal-handler.sh                    [ success ]     10\n209-pthreads-mutex.sh                    [ success ]      5\n210-file-vnode.sh                        [ success ]     10\n211-fork-simple.sh                       [ success ]      6\n212-file-fifo.sh                         [ success ]      9\n214-file-pipes.sh                        [ success ]      5\n215-file-posixshm.sh                     [ success ]      7\n216-sysv-shm.sh                          [ success ]      5\n217-file-udplisten.sh                    [ success ]      8\n218-file-tcplisten.sh                    [ success ]     15\n221-lazy-osd-ckpt.sh                     [ success ]      3\n222-self-ckpt-mem.sh                     [ success ]     10\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      4\n225-memsnap-osd-poll.sh                  [ success ]      6\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      3\n228-wal.sh                               [ success ]      5\n229-chroot.sh                            [ success ]      5\n230-chroot-devfs.sh                      [ success ]     13\n231-memsnap-osd-nowait.sh                [ success ]      9\n232-metropolis.sh                        [ success ]      2\n233-metropolis-fork.sh                   [ success ]      2\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      2\n236-metropolis-exit.sh                   [ success ]      7\n237-metropolis-accept4.sh                [ success ]      2\n238-metropolis-pymetro.sh                [ success ]      2\n239-metropolis-pymetro-multiple.sh       [ success ]      2\n240-metropolis-pymetro-partitions.sh     [ success ]      2\n241-metropolis-pymetro-cachedparts.sh    [ success ]      6\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]      9\n244-precopy-restore.sh                   [ success ]     11\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: tavianator\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D531",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/e27d822c1bd671530ecbe79c7d55e3f61a3c14d6",
          "sha": "e27d822c1bd671530ecbe79c7d55e3f61a3c14d6"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/90b7530e774b4b4ec002c9349e2ecc88283485eb",
          "html_url": "https://github.com/rcslab/aurora/commit/90b7530e774b4b4ec002c9349e2ecc88283485eb",
          "sha": "90b7530e774b4b4ec002c9349e2ecc88283485eb"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/4f9584ca0e8d7ef640bbad5c4e29fba166e17082",
      "sha": "4f9584ca0e8d7ef640bbad5c4e29fba166e17082",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OjRmOTU4NGNhMGU4ZDdlZjY0MGJiYWQ1YzRlMjlmYmExNjZlMTcwODI=",
      "html_url": "https://github.com/etsal/aurora/commit/4f9584ca0e8d7ef640bbad5c4e29fba166e17082",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/4f9584ca0e8d7ef640bbad5c4e29fba166e17082/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/4f9584ca0e8d7ef640bbad5c4e29fba166e17082",
        "author": {
          "date": "2021-07-16T14:40:08.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-07-16T14:40:17.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "vectorized file restore path\n\nSummary:\nThe file restore function slsrest_file holds a lot of code specific to individual file types. Vectorize the path, spinning out\nthe file type specific code to its appropriate file.\n\nTest Plan:\nUsing the testbench:\n\nBuild: FreeBSD 12.1-RELEASE FASTDBG\nHost: aurora\nTest started: Fri 16 Jul 2021 14:20:56 EDT\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      9\n002-load-mount-unload.sh                 [ success ]      5\n003-mount-unmount.sh                     [ success ]      1\n004-load-double-sls.sh                   [ success ]      1\n005-unload-double-sls.sh                 [ success ]      6\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      2\n008-mount-double.sh                      [ success ]      2\n009-unload-slos-before-sls.sh            [ success ]      2\n010-unmount-before-sls.sh                [ success ]      0\n101-simple-file-io.sh                    [ success ]      2\n102-fd-chroot.sh                         [ success ]      4\n201-simple-mem-ckpt.sh                   [ success ]      3\n202-simple-osd-ckpt.sh                   [ success ]      3\n203-busy-loop.sh                         [ success ]      4\n204-print-stdout.sh                      [ success ]      7\n205-array-traversal.sh                   [ success ]      5\n206-mmap-file.sh                         [ success ]      7\n207-mmap-anonymous.sh                    [ success ]      4\n208-signal-handler.sh                    [ success ]     10\n209-pthreads-mutex.sh                    [ success ]      5\n210-file-vnode.sh                        [ success ]     10\n211-fork-simple.sh                       [ success ]      6\n212-file-fifo.sh                         [ success ]      9\n214-file-pipes.sh                        [ success ]      5\n215-file-posixshm.sh                     [ success ]      7\n216-sysv-shm.sh                          [ success ]      5\n217-file-udplisten.sh                    [ success ]      8\n218-file-tcplisten.sh                    [ success ]     15\n221-lazy-osd-ckpt.sh                     [ success ]      3\n222-self-ckpt-mem.sh                     [ success ]     10\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      4\n225-memsnap-osd-poll.sh                  [ success ]      6\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      3\n228-wal.sh                               [ success ]      5\n229-chroot.sh                            [ success ]      5\n230-chroot-devfs.sh                      [ success ]     13\n231-memsnap-osd-nowait.sh                [ success ]      9\n232-metropolis.sh                        [ success ]      2\n233-metropolis-fork.sh                   [ success ]      2\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      2\n236-metropolis-exit.sh                   [ success ]      7\n237-metropolis-accept4.sh                [ success ]      2\n238-metropolis-pymetro.sh                [ success ]      2\n239-metropolis-pymetro-multiple.sh       [ success ]      2\n240-metropolis-pymetro-partitions.sh     [ success ]      2\n241-metropolis-pymetro-cachedparts.sh    [ success ]      6\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]      9\n244-precopy-restore.sh                   [ success ]     11\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: tavianator\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D531",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/e27d822c1bd671530ecbe79c7d55e3f61a3c14d6",
          "sha": "e27d822c1bd671530ecbe79c7d55e3f61a3c14d6"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/90b7530e774b4b4ec002c9349e2ecc88283485eb",
          "html_url": "https://github.com/etsal/aurora/commit/90b7530e774b4b4ec002c9349e2ecc88283485eb",
          "sha": "90b7530e774b4b4ec002c9349e2ecc88283485eb"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/15696b08d6afb877a0d3a7e54bfd446812653e79",
      "sha": "15696b08d6afb877a0d3a7e54bfd446812653e79",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OjE1Njk2YjA4ZDZhZmI4NzdhMGQzYTdlNTRiZmQ0NDY4MTI2NTNlNzk=",
      "html_url": "https://github.com/rcslab/aurora/commit/15696b08d6afb877a0d3a7e54bfd446812653e79",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/15696b08d6afb877a0d3a7e54bfd446812653e79/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/15696b08d6afb877a0d3a7e54bfd446812653e79",
        "author": {
          "date": "2023-06-16T16:49:22.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2023-06-16T16:55:15.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "251: use relative path to call userspace server\n\nSummary:\nTest 251 prefixes the path to the userspace server with $SRCROOT, and so fails spuriously when the variable is not\nset in the shell. Call the server binary present in the local repo using a relative path to make the test robust.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Fri Jun 16 16:50:20 EDT 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      3\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      5\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]     11\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n213-fork-shm.sh                          [ success ]     26\n214-file-pipes.sh                        [ success ]      5\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      5\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      6\n220-pgroups.sh                           [ success ]     22\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      5\n223-restore-mem-multiple.sh              [ success ]      5\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      6\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      5\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      1\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]      9\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      3\n246-remount-sls.sh                       [ success ]      6\n247-remount-slos.sh                      [ success ]      6\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n250-simple-file-ckpt.sh                  [ success ]      5\n251-simple-socket-ckpt.sh                [ success ]      8\n252-simple-socket-restore.sh             [ success ]      9\n254-delta-checkpoint.sh                  [ success ]      4\n255-delta-socket.sh                      [ success ]     10\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D785",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/c5b04676644a6b3add5711f88d43cfc68cdeecfd",
          "sha": "c5b04676644a6b3add5711f88d43cfc68cdeecfd"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/496d1087a0f4c33e635d059fb02caa2fb336c5ec",
          "html_url": "https://github.com/rcslab/aurora/commit/496d1087a0f4c33e635d059fb02caa2fb336c5ec",
          "sha": "496d1087a0f4c33e635d059fb02caa2fb336c5ec"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/15696b08d6afb877a0d3a7e54bfd446812653e79",
      "sha": "15696b08d6afb877a0d3a7e54bfd446812653e79",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OjE1Njk2YjA4ZDZhZmI4NzdhMGQzYTdlNTRiZmQ0NDY4MTI2NTNlNzk=",
      "html_url": "https://github.com/etsal/aurora/commit/15696b08d6afb877a0d3a7e54bfd446812653e79",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/15696b08d6afb877a0d3a7e54bfd446812653e79/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/15696b08d6afb877a0d3a7e54bfd446812653e79",
        "author": {
          "date": "2023-06-16T16:49:22.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2023-06-16T16:55:15.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "251: use relative path to call userspace server\n\nSummary:\nTest 251 prefixes the path to the userspace server with $SRCROOT, and so fails spuriously when the variable is not\nset in the shell. Call the server binary present in the local repo using a relative path to make the test robust.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Fri Jun 16 16:50:20 EDT 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      3\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      5\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]     11\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n213-fork-shm.sh                          [ success ]     26\n214-file-pipes.sh                        [ success ]      5\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      5\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      6\n220-pgroups.sh                           [ success ]     22\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      5\n223-restore-mem-multiple.sh              [ success ]      5\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      6\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      5\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      1\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]      9\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      3\n246-remount-sls.sh                       [ success ]      6\n247-remount-slos.sh                      [ success ]      6\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n250-simple-file-ckpt.sh                  [ success ]      5\n251-simple-socket-ckpt.sh                [ success ]      8\n252-simple-socket-restore.sh             [ success ]      9\n254-delta-checkpoint.sh                  [ success ]      4\n255-delta-socket.sh                      [ success ]     10\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D785",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/c5b04676644a6b3add5711f88d43cfc68cdeecfd",
          "sha": "c5b04676644a6b3add5711f88d43cfc68cdeecfd"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/496d1087a0f4c33e635d059fb02caa2fb336c5ec",
          "html_url": "https://github.com/etsal/aurora/commit/496d1087a0f4c33e635d059fb02caa2fb336c5ec",
          "sha": "496d1087a0f4c33e635d059fb02caa2fb336c5ec"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/31cb1220d7daae060a1f5a13d928d23237622c4a",
      "sha": "31cb1220d7daae060a1f5a13d928d23237622c4a",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OjMxY2IxMjIwZDdkYWFlMDYwYTFmNWExM2Q5MjhkMjMyMzc2MjJjNGE=",
      "html_url": "https://github.com/rcslab/aurora/commit/31cb1220d7daae060a1f5a13d928d23237622c4a",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/31cb1220d7daae060a1f5a13d928d23237622c4a/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/31cb1220d7daae060a1f5a13d928d23237622c4a",
        "author": {
          "date": "2023-09-02T17:42:20.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "committer": {
          "date": "2023-09-02T17:42:36.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "message": "use the optimized sckpt allocation path everywhere\n\nSummary: Allocating an slsckpt_data structure is costly, but partitions require at most two such data structures at any given time. Add code to reuse the slsckpt_data structure after finishing a checkpoint to avoid allocating new instances.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Fri Aug 25 18:50:55 EDT 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      1\n203-busy-loop.sh                         [ success ]      2\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      3\n206-mmap-file.sh                         [ success ]      3\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      4\n209-pthreads-mutex.sh                    [ success ]      3\n210-file-vnode.sh                        [ success ]     10\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      4\n213-fork-shm.sh                          [ success ]     28\n214-file-pipes.sh                        [ success ]      3\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      4\n218-file-tcplisten.sh                    [ success ]     13\n219-kqueue.sh                            [ success ]      4\n220-pgroups.sh                           [ success ]     21\n221-lazy-osd-ckpt.sh                     [ success ]      1\n222-self-ckpt-mem.sh                     [ success ]      5\n223-restore-mem-multiple.sh              [ success ]      2\n224-restore-osd-multiple.sh              [ success ]      2\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      4\n227-memsnap-mem.sh                       [ success ]      1\n228-wal.sh                               [ success ]      0\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      0\n233-metropolis-fork.sh                   [ success ]      0\n234-metropolis-exec.sh                   [ success ]      0\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      2\n237-metropolis-accept4.sh                [ success ]      0\n238-metropolis-simple.sh                 [ success ]      0\n239-metropolis-pymetro-multiple.sh       [ success ]      0\n240-metropolis-partitions.sh             [ success ]      0\n241-metropolis-partitions-cached.sh      [ success ]      1\n242-cached-restore.sh                    [ success ]      7\n243-prefault-restore.sh                  [ success ]      7\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      4\n247-remount-slos.sh                      [ success ]      3\n248-delta-restore.sh                     [ success ]      0\n249-pgresident.sh                        [ success ]      2\n250-simple-file-ckpt.sh                  [ success ]      3\n251-simple-socket-ckpt.sh                [ success ]      7\n252-simple-socket-restore.sh             [ success ]      9\n254-delta-checkpoint.sh                  [ success ]      3\n255-delta-socket.sh                      [ success ]      8\n256-memsnap-unaligned.sh                 [ success ]      1\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D786",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/f29a6c923d03a60ed9385e34bd10c88c108aba78",
          "sha": "f29a6c923d03a60ed9385e34bd10c88c108aba78"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/514f3b457c269bee9179d0734a26b4a30a284b2e",
          "html_url": "https://github.com/rcslab/aurora/commit/514f3b457c269bee9179d0734a26b4a30a284b2e",
          "sha": "514f3b457c269bee9179d0734a26b4a30a284b2e"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/31cb1220d7daae060a1f5a13d928d23237622c4a",
      "sha": "31cb1220d7daae060a1f5a13d928d23237622c4a",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OjMxY2IxMjIwZDdkYWFlMDYwYTFmNWExM2Q5MjhkMjMyMzc2MjJjNGE=",
      "html_url": "https://github.com/etsal/aurora/commit/31cb1220d7daae060a1f5a13d928d23237622c4a",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/31cb1220d7daae060a1f5a13d928d23237622c4a/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/31cb1220d7daae060a1f5a13d928d23237622c4a",
        "author": {
          "date": "2023-09-02T17:42:20.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "committer": {
          "date": "2023-09-02T17:42:36.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "emil@etsalapatis.com"
        },
        "message": "use the optimized sckpt allocation path everywhere\n\nSummary: Allocating an slsckpt_data structure is costly, but partitions require at most two such data structures at any given time. Add code to reuse the slsckpt_data structure after finishing a checkpoint to avoid allocating new instances.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Fri Aug 25 18:50:55 EDT 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      1\n203-busy-loop.sh                         [ success ]      2\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      3\n206-mmap-file.sh                         [ success ]      3\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      4\n209-pthreads-mutex.sh                    [ success ]      3\n210-file-vnode.sh                        [ success ]     10\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      4\n213-fork-shm.sh                          [ success ]     28\n214-file-pipes.sh                        [ success ]      3\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      4\n218-file-tcplisten.sh                    [ success ]     13\n219-kqueue.sh                            [ success ]      4\n220-pgroups.sh                           [ success ]     21\n221-lazy-osd-ckpt.sh                     [ success ]      1\n222-self-ckpt-mem.sh                     [ success ]      5\n223-restore-mem-multiple.sh              [ success ]      2\n224-restore-osd-multiple.sh              [ success ]      2\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      4\n227-memsnap-mem.sh                       [ success ]      1\n228-wal.sh                               [ success ]      0\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      0\n233-metropolis-fork.sh                   [ success ]      0\n234-metropolis-exec.sh                   [ success ]      0\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      2\n237-metropolis-accept4.sh                [ success ]      0\n238-metropolis-simple.sh                 [ success ]      0\n239-metropolis-pymetro-multiple.sh       [ success ]      0\n240-metropolis-partitions.sh             [ success ]      0\n241-metropolis-partitions-cached.sh      [ success ]      1\n242-cached-restore.sh                    [ success ]      7\n243-prefault-restore.sh                  [ success ]      7\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      4\n247-remount-slos.sh                      [ success ]      3\n248-delta-restore.sh                     [ success ]      0\n249-pgresident.sh                        [ success ]      2\n250-simple-file-ckpt.sh                  [ success ]      3\n251-simple-socket-ckpt.sh                [ success ]      7\n252-simple-socket-restore.sh             [ success ]      9\n254-delta-checkpoint.sh                  [ success ]      3\n255-delta-socket.sh                      [ success ]      8\n256-memsnap-unaligned.sh                 [ success ]      1\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D786",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/f29a6c923d03a60ed9385e34bd10c88c108aba78",
          "sha": "f29a6c923d03a60ed9385e34bd10c88c108aba78"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/514f3b457c269bee9179d0734a26b4a30a284b2e",
          "html_url": "https://github.com/etsal/aurora/commit/514f3b457c269bee9179d0734a26b4a30a284b2e",
          "sha": "514f3b457c269bee9179d0734a26b4a30a284b2e"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/4030f56c741c1b525c83a6510bfe50e3ead79ec4",
      "sha": "4030f56c741c1b525c83a6510bfe50e3ead79ec4",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OjQwMzBmNTZjNzQxYzFiNTI1YzgzYTY1MTBiZmU1MGUzZWFkNzllYzQ=",
      "html_url": "https://github.com/etsal/aurora/commit/4030f56c741c1b525c83a6510bfe50e3ead79ec4",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/4030f56c741c1b525c83a6510bfe50e3ead79ec4/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/4030f56c741c1b525c83a6510bfe50e3ead79ec4",
        "author": {
          "date": "2022-04-13T14:44:33.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2022-04-13T14:44:36.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "Metropolis throughput benchmark preparation\n\nSummary:\nModify the codebase to allow for the sustained throughput Metropolis benchmark. Changes include:\n\n- fixing PTY handling on the restore path for Metropolis functions\n- changing metadata checkpointing to occupy a single record for each checkpoint in order to avoid collisions between unrelated functions\n\nTest Plan:\nBuild: FreeBSD 12.1-RELEASE PERF\nHost: skylake4.rcs.uwaterloo.ca\nTest started: Tue Mar 22 20:09:40 UTC 2022\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      0\n002-load-mount-unload.sh                 [ success ]      3\n003-mount-unmount.sh                     [ success ]      1\n004-load-double-sls.sh                   [ success ]      1\n005-unload-double-sls.sh                 [ success ]      1\n006-load-double-slos.sh                  [ success ]      0\n007-unload-double-slos.sh                [ success ]      0\n008-mount-double.sh                      [ success ]      0\n009-unload-slos-before-unmount.sh        [ success ]      1\n010-unmount-before-sls.sh                [ success ]      1\n011-sls-without-slsfs.sh                 [ success ]      0\n012-invalid-slsfs.sh                     [ success ]      6\n013-mount-snapshots.sh                   [ success ]      4\n014-remount-check.sh                     [ disabled ]    N/A\n101-simple-file-io.sh                    [ success ]      1\n102-fd-chroot.sh                         [ success ]     50\n103-kilofile.sh                          [ success ]      3\n201-simple-mem-ckpt.sh                   [ success ]      3\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      5\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      4\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      4\n210-file-vnode.sh                        [ success ]      7\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      6\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      5\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     15\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     23\n221-lazy-osd-ckpt.sh                     [ success ]      3\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      6\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      4\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      2\n241-metropolis-partitions-cached.sh      [ success ]      2\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      9\n301-mem-rest.sh                          [ success ]      6\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D648",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/4223a9d388e9b6e4f00388825c1f16bf1807bb43",
          "sha": "4223a9d388e9b6e4f00388825c1f16bf1807bb43"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/5d1660e89a133af5ad439a27eef0f8246893e5c3",
          "html_url": "https://github.com/etsal/aurora/commit/5d1660e89a133af5ad439a27eef0f8246893e5c3",
          "sha": "5d1660e89a133af5ad439a27eef0f8246893e5c3"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/4030f56c741c1b525c83a6510bfe50e3ead79ec4",
      "sha": "4030f56c741c1b525c83a6510bfe50e3ead79ec4",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OjQwMzBmNTZjNzQxYzFiNTI1YzgzYTY1MTBiZmU1MGUzZWFkNzllYzQ=",
      "html_url": "https://github.com/rcslab/aurora/commit/4030f56c741c1b525c83a6510bfe50e3ead79ec4",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/4030f56c741c1b525c83a6510bfe50e3ead79ec4/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/4030f56c741c1b525c83a6510bfe50e3ead79ec4",
        "author": {
          "date": "2022-04-13T14:44:33.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2022-04-13T14:44:36.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "Metropolis throughput benchmark preparation\n\nSummary:\nModify the codebase to allow for the sustained throughput Metropolis benchmark. Changes include:\n\n- fixing PTY handling on the restore path for Metropolis functions\n- changing metadata checkpointing to occupy a single record for each checkpoint in order to avoid collisions between unrelated functions\n\nTest Plan:\nBuild: FreeBSD 12.1-RELEASE PERF\nHost: skylake4.rcs.uwaterloo.ca\nTest started: Tue Mar 22 20:09:40 UTC 2022\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      0\n002-load-mount-unload.sh                 [ success ]      3\n003-mount-unmount.sh                     [ success ]      1\n004-load-double-sls.sh                   [ success ]      1\n005-unload-double-sls.sh                 [ success ]      1\n006-load-double-slos.sh                  [ success ]      0\n007-unload-double-slos.sh                [ success ]      0\n008-mount-double.sh                      [ success ]      0\n009-unload-slos-before-unmount.sh        [ success ]      1\n010-unmount-before-sls.sh                [ success ]      1\n011-sls-without-slsfs.sh                 [ success ]      0\n012-invalid-slsfs.sh                     [ success ]      6\n013-mount-snapshots.sh                   [ success ]      4\n014-remount-check.sh                     [ disabled ]    N/A\n101-simple-file-io.sh                    [ success ]      1\n102-fd-chroot.sh                         [ success ]     50\n103-kilofile.sh                          [ success ]      3\n201-simple-mem-ckpt.sh                   [ success ]      3\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      5\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      4\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      4\n210-file-vnode.sh                        [ success ]      7\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      6\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      5\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     15\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     23\n221-lazy-osd-ckpt.sh                     [ success ]      3\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      6\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      4\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      2\n241-metropolis-partitions-cached.sh      [ success ]      2\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      9\n301-mem-rest.sh                          [ success ]      6\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D648",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/4223a9d388e9b6e4f00388825c1f16bf1807bb43",
          "sha": "4223a9d388e9b6e4f00388825c1f16bf1807bb43"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/5d1660e89a133af5ad439a27eef0f8246893e5c3",
          "html_url": "https://github.com/rcslab/aurora/commit/5d1660e89a133af5ad439a27eef0f8246893e5c3",
          "sha": "5d1660e89a133af5ad439a27eef0f8246893e5c3"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/dff1ec14d58ec54b2c2c2cc5ad6f2ca3aa76c48e",
      "sha": "dff1ec14d58ec54b2c2c2cc5ad6f2ca3aa76c48e",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OmRmZjFlYzE0ZDU4ZWM1NGIyYzJjMmNjNWFkNmYyY2EzYWE3NmM0OGU=",
      "html_url": "https://github.com/rcslab/aurora/commit/dff1ec14d58ec54b2c2c2cc5ad6f2ca3aa76c48e",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/dff1ec14d58ec54b2c2c2cc5ad6f2ca3aa76c48e/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/dff1ec14d58ec54b2c2c2cc5ad6f2ca3aa76c48e",
        "author": {
          "date": "2023-02-23T17:45:54.000-05:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2023-02-23T17:45:59.000-05:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "fix unlinked node checkpointing path\n\nSummary: The fallback path for handling unlinked vnodes that are not in the SLSFS is broken because the flag is reversed. The error path is in addition wrong and does not properly clean up before exiting. Fix the code to properly handle unlinked files when checkpointing.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Thu Feb 23 17:40:24 EST 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      2\n204-print-stdout.sh                      [ success ]      6\n205-array-traversal.sh                   [ success ]      3\n206-mmap-file.sh                         [ success ]      6\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      5\n210-file-vnode.sh                        [ success ]     13\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      6\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      6\n220-pgroups.sh                           [ success ]     23\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      4\n227-memsnap-mem.sh                       [ success ]      1\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      0\n234-metropolis-exec.sh                   [ success ]      3\n235-metropolis-accept.sh                 [ success ]      4\n236-metropolis-exit.sh                   [ success ]      2\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      0\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      1\n240-metropolis-partitions.sh             [ success ]      0\n241-metropolis-partitions-cached.sh      [ success ]      1\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      5\n247-remount-slos.sh                      [ success ]      4\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D736",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/3e3c0847dc592d4c44d15f16abdb7f715fed60f0",
          "sha": "3e3c0847dc592d4c44d15f16abdb7f715fed60f0"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/c196930ab7a01b1f08e9294849b18a49e6d2c8fd",
          "html_url": "https://github.com/rcslab/aurora/commit/c196930ab7a01b1f08e9294849b18a49e6d2c8fd",
          "sha": "c196930ab7a01b1f08e9294849b18a49e6d2c8fd"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/bcccaf1dda47a813df9ec741df64e624e00c98b0",
      "sha": "bcccaf1dda47a813df9ec741df64e624e00c98b0",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OmJjY2NhZjFkZGE0N2E4MTNkZjllYzc0MWRmNjRlNjI0ZTAwYzk4YjA=",
      "html_url": "https://github.com/rcslab/aurora/commit/bcccaf1dda47a813df9ec741df64e624e00c98b0",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/bcccaf1dda47a813df9ec741df64e624e00c98b0/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/bcccaf1dda47a813df9ec741df64e624e00c98b0",
        "author": {
          "date": "2023-03-06T19:28:49.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2023-03-06T22:20:03.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "add noinline for easier tracing\n\nSummary: Prevent certain functions in the IO path from being inlined. This change helps us use DTrace to better monitor the IO path.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Mon Mar 6 22:10:09 EST 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      3\n202-simple-osd-ckpt.sh                   [ success ]      1\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      5\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      6\n209-pthreads-mutex.sh                    [ success ]      3\n210-file-vnode.sh                        [ success ]     11\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      5\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     22\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      8\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      4\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      3\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      4\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      2\n241-metropolis-partitions-cached.sh      [ success ]      1\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      9\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      5\n247-remount-slos.sh                      [ success ]      6\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n254-delta-checkpoint.sh                  [ success ]      4\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D759",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/1d154d9ca49e509bd6f8759c1cc0fabc09005be4",
          "sha": "1d154d9ca49e509bd6f8759c1cc0fabc09005be4"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/c4dbdea3faea46372a203a5a13f524d19ae42d0f",
          "html_url": "https://github.com/rcslab/aurora/commit/c4dbdea3faea46372a203a5a13f524d19ae42d0f",
          "sha": "c4dbdea3faea46372a203a5a13f524d19ae42d0f"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/dff1ec14d58ec54b2c2c2cc5ad6f2ca3aa76c48e",
      "sha": "dff1ec14d58ec54b2c2c2cc5ad6f2ca3aa76c48e",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OmRmZjFlYzE0ZDU4ZWM1NGIyYzJjMmNjNWFkNmYyY2EzYWE3NmM0OGU=",
      "html_url": "https://github.com/etsal/aurora/commit/dff1ec14d58ec54b2c2c2cc5ad6f2ca3aa76c48e",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/dff1ec14d58ec54b2c2c2cc5ad6f2ca3aa76c48e/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/dff1ec14d58ec54b2c2c2cc5ad6f2ca3aa76c48e",
        "author": {
          "date": "2023-02-23T17:45:54.000-05:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2023-02-23T17:45:59.000-05:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "fix unlinked node checkpointing path\n\nSummary: The fallback path for handling unlinked vnodes that are not in the SLSFS is broken because the flag is reversed. The error path is in addition wrong and does not properly clean up before exiting. Fix the code to properly handle unlinked files when checkpointing.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Thu Feb 23 17:40:24 EST 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      2\n204-print-stdout.sh                      [ success ]      6\n205-array-traversal.sh                   [ success ]      3\n206-mmap-file.sh                         [ success ]      6\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      5\n210-file-vnode.sh                        [ success ]     13\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      6\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      6\n220-pgroups.sh                           [ success ]     23\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      4\n227-memsnap-mem.sh                       [ success ]      1\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      0\n234-metropolis-exec.sh                   [ success ]      3\n235-metropolis-accept.sh                 [ success ]      4\n236-metropolis-exit.sh                   [ success ]      2\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      0\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      1\n240-metropolis-partitions.sh             [ success ]      0\n241-metropolis-partitions-cached.sh      [ success ]      1\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      5\n247-remount-slos.sh                      [ success ]      4\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D736",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/3e3c0847dc592d4c44d15f16abdb7f715fed60f0",
          "sha": "3e3c0847dc592d4c44d15f16abdb7f715fed60f0"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/c196930ab7a01b1f08e9294849b18a49e6d2c8fd",
          "html_url": "https://github.com/etsal/aurora/commit/c196930ab7a01b1f08e9294849b18a49e6d2c8fd",
          "sha": "c196930ab7a01b1f08e9294849b18a49e6d2c8fd"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/bcccaf1dda47a813df9ec741df64e624e00c98b0",
      "sha": "bcccaf1dda47a813df9ec741df64e624e00c98b0",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OmJjY2NhZjFkZGE0N2E4MTNkZjllYzc0MWRmNjRlNjI0ZTAwYzk4YjA=",
      "html_url": "https://github.com/etsal/aurora/commit/bcccaf1dda47a813df9ec741df64e624e00c98b0",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/bcccaf1dda47a813df9ec741df64e624e00c98b0/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/bcccaf1dda47a813df9ec741df64e624e00c98b0",
        "author": {
          "date": "2023-03-06T19:28:49.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2023-03-06T22:20:03.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "add noinline for easier tracing\n\nSummary: Prevent certain functions in the IO path from being inlined. This change helps us use DTrace to better monitor the IO path.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Mon Mar 6 22:10:09 EST 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      3\n202-simple-osd-ckpt.sh                   [ success ]      1\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      5\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      6\n209-pthreads-mutex.sh                    [ success ]      3\n210-file-vnode.sh                        [ success ]     11\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      5\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     22\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      8\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      4\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      3\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      4\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      2\n241-metropolis-partitions-cached.sh      [ success ]      1\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      9\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      5\n247-remount-slos.sh                      [ success ]      6\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n254-delta-checkpoint.sh                  [ success ]      4\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D759",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/1d154d9ca49e509bd6f8759c1cc0fabc09005be4",
          "sha": "1d154d9ca49e509bd6f8759c1cc0fabc09005be4"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/c4dbdea3faea46372a203a5a13f524d19ae42d0f",
          "html_url": "https://github.com/etsal/aurora/commit/c4dbdea3faea46372a203a5a13f524d19ae42d0f",
          "sha": "c4dbdea3faea46372a203a5a13f524d19ae42d0f"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/3a672fc83c0717fc7a95672b0ce6ba6c29f95a14",
      "sha": "3a672fc83c0717fc7a95672b0ce6ba6c29f95a14",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OjNhNjcyZmM4M2MwNzE3ZmM3YTk1NjcyYjBjZTZiYTZjMjlmOTVhMTQ=",
      "html_url": "https://github.com/rcslab/aurora/commit/3a672fc83c0717fc7a95672b0ce6ba6c29f95a14",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/3a672fc83c0717fc7a95672b0ce6ba6c29f95a14/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/3a672fc83c0717fc7a95672b0ce6ba6c29f95a14",
        "author": {
          "date": "2023-03-15T20:56:26.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "you@example.com"
        },
        "committer": {
          "date": "2023-03-15T21:00:52.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "refactored the ioctl API and IO path to prepare for the additional backends\n\nSummary: The IO path for checkpoints and restores currently assumes the only possible backend is the SLOS (the memory backend does not initiate IO). Many otherwise generic file IO routines are treated as SLOS-specific, and the IO path does not cleanly separate the serialization of the checkpoint and the creation of the IOs. The serialization step should be generic and reusable between backends. Refactor the code to decouple the two operations, and prepare stubs for the IO routines of the other backends.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Wed Mar 15 20:56:58 EDT 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      4\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      3\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]     11\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      4\n214-file-pipes.sh                        [ success ]      5\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      6\n218-file-tcplisten.sh                    [ success ]     13\n219-kqueue.sh                            [ success ]      7\n220-pgroups.sh                           [ success ]     23\n221-lazy-osd-ckpt.sh                     [ success ]      1\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      2\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      1\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      0\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      0\n236-metropolis-exit.sh                   [ success ]      4\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      0\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      0\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      9\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      6\n247-remount-slos.sh                      [ success ]      4\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      1\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D748",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/4f5ab82d99440136f7794f1b87b31b0bf8d3e027",
          "sha": "4f5ab82d99440136f7794f1b87b31b0bf8d3e027"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/7155b7d539fa4493bdad119dcb50523158c00693",
          "html_url": "https://github.com/rcslab/aurora/commit/7155b7d539fa4493bdad119dcb50523158c00693",
          "sha": "7155b7d539fa4493bdad119dcb50523158c00693"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/861c8060c79d2c51c0bb24e6ecc5e5b86a9d8261",
      "sha": "861c8060c79d2c51c0bb24e6ecc5e5b86a9d8261",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2Ojg2MWM4MDYwYzc5ZDJjNTFjMGJiMjRlNmVjYzVlNWI4NmE5ZDgyNjE=",
      "html_url": "https://github.com/etsal/aurora/commit/861c8060c79d2c51c0bb24e6ecc5e5b86a9d8261",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/861c8060c79d2c51c0bb24e6ecc5e5b86a9d8261/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/861c8060c79d2c51c0bb24e6ecc5e5b86a9d8261",
        "author": {
          "date": "2021-03-03T16:46:48.000-05:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-03-03T16:46:55.000-05:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "fix crashes for SLOS restoring\n\nSummary:\nThe restore path from persistent storage currently causes intermittent crashes. These are due to two different bugs, one of which is in the module code; the restoring process does not wait for the read threads to bring in the pages, leading to the application reading uninitialized data. Fix this to avoid these crashes.\n\nAlso remove stale VM object testing code that has outlived its usefulness.\n\nTest Plan:\nRunning the testbench without crashes:\n\nBuild: FreeBSD 12.1-RELEASE PERF\nHost: skylake4.rcs.uwaterloo.ca\nTest started: Tue Mar 2 18:55:37 UTC 2021\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      2\n002-load-mount-unload.sh                 [ success ]      2\n003-mount-unmount.sh                     [ success ]      1\n004-load-double-sls.sh                   [ success ]      1\n005-unload-double-sls.sh                 [ success ]      1\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      0\n008-mount-double.sh                      [ success ]      1\n009-unload-slos-before-sls.sh            [ success ]      1\n010-unmount-before-sls.sh                [ success ]      0\n101-simple-file-io.sh                    [ success ]      1\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      3\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      6\n218-file-tcplisten.sh                    [ success ]     14\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      0\n229-chroot.sh                            [ success ]      5\n230-chroot-devfs.sh                      [ success ]      2\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      0\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      0\n238-metropolis-pymetro.sh                [ success ]      2\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-pymetro-partitions.sh     [ success ]      1\n\nTest 240 stress test:\n\n[root@skylake4 ~/sls/tests]# STRESS_TEST=ON ./testbench 240-metropolis-pymetro-partitions.sh\nBuild: FreeBSD 12.1-RELEASE PERF\nHost: skylake4.rcs.uwaterloo.ca\nTest started: Tue Mar 2 19:22:10 UTC 2021\nStress testing: ON\nTest                                       Status      Time\n-----------------------------------------------------------\n240-metropolis-pymetro-partitions.sh     [ success ]    126\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D447",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/6aa132ba2071b8cee54e3043d203135ab87dca8c",
          "sha": "6aa132ba2071b8cee54e3043d203135ab87dca8c"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/254740824d9fd74aed56ac2b8178d4b8183821f3",
          "html_url": "https://github.com/etsal/aurora/commit/254740824d9fd74aed56ac2b8178d4b8183821f3",
          "sha": "254740824d9fd74aed56ac2b8178d4b8183821f3"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/861c8060c79d2c51c0bb24e6ecc5e5b86a9d8261",
      "sha": "861c8060c79d2c51c0bb24e6ecc5e5b86a9d8261",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0Ojg2MWM4MDYwYzc5ZDJjNTFjMGJiMjRlNmVjYzVlNWI4NmE5ZDgyNjE=",
      "html_url": "https://github.com/rcslab/aurora/commit/861c8060c79d2c51c0bb24e6ecc5e5b86a9d8261",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/861c8060c79d2c51c0bb24e6ecc5e5b86a9d8261/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/861c8060c79d2c51c0bb24e6ecc5e5b86a9d8261",
        "author": {
          "date": "2021-03-03T16:46:48.000-05:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-03-03T16:46:55.000-05:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "fix crashes for SLOS restoring\n\nSummary:\nThe restore path from persistent storage currently causes intermittent crashes. These are due to two different bugs, one of which is in the module code; the restoring process does not wait for the read threads to bring in the pages, leading to the application reading uninitialized data. Fix this to avoid these crashes.\n\nAlso remove stale VM object testing code that has outlived its usefulness.\n\nTest Plan:\nRunning the testbench without crashes:\n\nBuild: FreeBSD 12.1-RELEASE PERF\nHost: skylake4.rcs.uwaterloo.ca\nTest started: Tue Mar 2 18:55:37 UTC 2021\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      2\n002-load-mount-unload.sh                 [ success ]      2\n003-mount-unmount.sh                     [ success ]      1\n004-load-double-sls.sh                   [ success ]      1\n005-unload-double-sls.sh                 [ success ]      1\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      0\n008-mount-double.sh                      [ success ]      1\n009-unload-slos-before-sls.sh            [ success ]      1\n010-unmount-before-sls.sh                [ success ]      0\n101-simple-file-io.sh                    [ success ]      1\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      3\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      6\n218-file-tcplisten.sh                    [ success ]     14\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      0\n229-chroot.sh                            [ success ]      5\n230-chroot-devfs.sh                      [ success ]      2\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      0\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      0\n238-metropolis-pymetro.sh                [ success ]      2\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-pymetro-partitions.sh     [ success ]      1\n\nTest 240 stress test:\n\n[root@skylake4 ~/sls/tests]# STRESS_TEST=ON ./testbench 240-metropolis-pymetro-partitions.sh\nBuild: FreeBSD 12.1-RELEASE PERF\nHost: skylake4.rcs.uwaterloo.ca\nTest started: Tue Mar 2 19:22:10 UTC 2021\nStress testing: ON\nTest                                       Status      Time\n-----------------------------------------------------------\n240-metropolis-pymetro-partitions.sh     [ success ]    126\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D447",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/6aa132ba2071b8cee54e3043d203135ab87dca8c",
          "sha": "6aa132ba2071b8cee54e3043d203135ab87dca8c"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/254740824d9fd74aed56ac2b8178d4b8183821f3",
          "html_url": "https://github.com/rcslab/aurora/commit/254740824d9fd74aed56ac2b8178d4b8183821f3",
          "sha": "254740824d9fd74aed56ac2b8178d4b8183821f3"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/795f6d6406ee0edd5680613f9e24498d65b2744b",
      "sha": "795f6d6406ee0edd5680613f9e24498d65b2744b",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0Ojc5NWY2ZDY0MDZlZTBlZGQ1NjgwNjEzZjllMjQ0OThkNjViMjc0NGI=",
      "html_url": "https://github.com/rcslab/aurora/commit/795f6d6406ee0edd5680613f9e24498d65b2744b",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/795f6d6406ee0edd5680613f9e24498d65b2744b/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/795f6d6406ee0edd5680613f9e24498d65b2744b",
        "author": {
          "date": "2022-11-10T15:21:25.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2022-11-10T15:23:16.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "generalize page read path to handle vnodes\n\nSummary: Prefaulting currently involves using a custom read path which only handles anonymous objects, leaving us unable to prefault vnodes. Existing code paths in the kernel handle both anonymous and file memory without issue. Create a new code path which handles paging in both anonymous and file data.\n\nTest Plan:\nBuild: FreeBSD 12.1-RELEASE SLOWDBG\nHost: aurora121\nTest started: Thu Nov 10 01:37:23 UTC 2022\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      3\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      5\n210-file-vnode.sh                        [ success ]      9\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      3\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      4\n220-pgroups.sh                           [ success ]     23\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      1\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      0\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      0\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      0\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      9\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      2\n246-remount-sls.sh                       [ success ]      5\n247-remount-slos.sh                      [ success ]      5\n248-delta-restore.sh                     [ success ]      0\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D706",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/c3a7561c7a10184f2314958f86890776cc0dac65",
          "sha": "c3a7561c7a10184f2314958f86890776cc0dac65"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/ba329f59c378337cf27eb2fce3198d9c04e8346d",
          "html_url": "https://github.com/rcslab/aurora/commit/ba329f59c378337cf27eb2fce3198d9c04e8346d",
          "sha": "ba329f59c378337cf27eb2fce3198d9c04e8346d"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/3a672fc83c0717fc7a95672b0ce6ba6c29f95a14",
      "sha": "3a672fc83c0717fc7a95672b0ce6ba6c29f95a14",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OjNhNjcyZmM4M2MwNzE3ZmM3YTk1NjcyYjBjZTZiYTZjMjlmOTVhMTQ=",
      "html_url": "https://github.com/etsal/aurora/commit/3a672fc83c0717fc7a95672b0ce6ba6c29f95a14",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/3a672fc83c0717fc7a95672b0ce6ba6c29f95a14/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/3a672fc83c0717fc7a95672b0ce6ba6c29f95a14",
        "author": {
          "date": "2023-03-15T20:56:26.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "you@example.com"
        },
        "committer": {
          "date": "2023-03-15T21:00:52.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "refactored the ioctl API and IO path to prepare for the additional backends\n\nSummary: The IO path for checkpoints and restores currently assumes the only possible backend is the SLOS (the memory backend does not initiate IO). Many otherwise generic file IO routines are treated as SLOS-specific, and the IO path does not cleanly separate the serialization of the checkpoint and the creation of the IOs. The serialization step should be generic and reusable between backends. Refactor the code to decouple the two operations, and prepare stubs for the IO routines of the other backends.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Wed Mar 15 20:56:58 EDT 2023\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      4\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      3\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]     11\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      4\n214-file-pipes.sh                        [ success ]      5\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      3\n217-file-udplisten.sh                    [ success ]      6\n218-file-tcplisten.sh                    [ success ]     13\n219-kqueue.sh                            [ success ]      7\n220-pgroups.sh                           [ success ]     23\n221-lazy-osd-ckpt.sh                     [ success ]      1\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      2\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      1\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      0\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      0\n236-metropolis-exit.sh                   [ success ]      4\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      0\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      0\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      9\n245-amplified-checkpoint.sh              [ success ]      1\n246-remount-sls.sh                       [ success ]      6\n247-remount-slos.sh                      [ success ]      4\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      1\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D748",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/4f5ab82d99440136f7794f1b87b31b0bf8d3e027",
          "sha": "4f5ab82d99440136f7794f1b87b31b0bf8d3e027"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/7155b7d539fa4493bdad119dcb50523158c00693",
          "html_url": "https://github.com/etsal/aurora/commit/7155b7d539fa4493bdad119dcb50523158c00693",
          "sha": "7155b7d539fa4493bdad119dcb50523158c00693"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/795f6d6406ee0edd5680613f9e24498d65b2744b",
      "sha": "795f6d6406ee0edd5680613f9e24498d65b2744b",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2Ojc5NWY2ZDY0MDZlZTBlZGQ1NjgwNjEzZjllMjQ0OThkNjViMjc0NGI=",
      "html_url": "https://github.com/etsal/aurora/commit/795f6d6406ee0edd5680613f9e24498d65b2744b",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/795f6d6406ee0edd5680613f9e24498d65b2744b/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/795f6d6406ee0edd5680613f9e24498d65b2744b",
        "author": {
          "date": "2022-11-10T15:21:25.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2022-11-10T15:23:16.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "generalize page read path to handle vnodes\n\nSummary: Prefaulting currently involves using a custom read path which only handles anonymous objects, leaving us unable to prefault vnodes. Existing code paths in the kernel handle both anonymous and file memory without issue. Create a new code path which handles paging in both anonymous and file data.\n\nTest Plan:\nBuild: FreeBSD 12.1-RELEASE SLOWDBG\nHost: aurora121\nTest started: Thu Nov 10 01:37:23 UTC 2022\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      3\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      5\n210-file-vnode.sh                        [ success ]      9\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      3\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      4\n220-pgroups.sh                           [ success ]     23\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      1\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      0\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      0\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      0\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      9\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      2\n246-remount-sls.sh                       [ success ]      5\n247-remount-slos.sh                      [ success ]      5\n248-delta-restore.sh                     [ success ]      0\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ali\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D706",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/c3a7561c7a10184f2314958f86890776cc0dac65",
          "sha": "c3a7561c7a10184f2314958f86890776cc0dac65"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/ba329f59c378337cf27eb2fce3198d9c04e8346d",
          "html_url": "https://github.com/etsal/aurora/commit/ba329f59c378337cf27eb2fce3198d9c04e8346d",
          "sha": "ba329f59c378337cf27eb2fce3198d9c04e8346d"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/ef361e7186882c45062b0a099d4bc1cfe90bd304",
      "sha": "ef361e7186882c45062b0a099d4bc1cfe90bd304",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OmVmMzYxZTcxODY4ODJjNDUwNjJiMGEwOTlkNGJjMWNmZTkwYmQzMDQ=",
      "html_url": "https://github.com/etsal/aurora/commit/ef361e7186882c45062b0a099d4bc1cfe90bd304",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/ef361e7186882c45062b0a099d4bc1cfe90bd304/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/ef361e7186882c45062b0a099d4bc1cfe90bd304",
        "author": {
          "date": "2021-07-29T11:31:20.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-07-29T11:31:28.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "fixed bug causing ETXTBSY on executables used by restored processes\n\nSummary: Aurora currently uses VOP_SET_TEXT directly to mark executables as such, imncrementing the v_writecount of the vnode in the process. The check used to determine whether to call VOP_SET_TEXT is overly general, causing multiple increments to v_writecount that persist even after unloading Aurora, and preventing the modification (e.g., recompilation) of the executables. Modify the code path to call the upper level function vm_map_entry_set_vnode_text instead of VOP_SET_TEXT directly.\n\nTest Plan:\nBuild: FreeBSD 12.1-RELEASE FASTDBG\nHost: aurora\nTest started: Tue 27 Jul 2021 17:33:45 EDT\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      8\n002-load-mount-unload.sh                 [ success ]      6\n003-mount-unmount.sh                     [ success ]      0\n004-load-double-sls.sh                   [ success ]      1\n005-unload-double-sls.sh                 [ success ]      5\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      2\n008-mount-double.sh                      [ success ]      2\n009-unload-slos-before-sls.sh            [ success ]      2\n010-unmount-before-sls.sh                [ success ]      0\n101-simple-file-io.sh                    [ success ]      2\n102-fd-chroot.sh                         [ success ]      4\n201-simple-mem-ckpt.sh                   [ success ]      3\n202-simple-osd-ckpt.sh                   [ success ]      3\n203-busy-loop.sh                         [ success ]      7\n204-print-stdout.sh                      [ success ]      6\n205-array-traversal.sh                   [ success ]      7\n206-mmap-file.sh                         [ success ]      5\n207-mmap-anonymous.sh                    [ success ]      4\n208-signal-handler.sh                    [ success ]      9\n209-pthreads-mutex.sh                    [ success ]      5\n210-file-vnode.sh                        [ success ]     13\n211-fork-simple.sh                       [ success ]      8\n212-file-fifo.sh                         [ success ]      9\n214-file-pipes.sh                        [ success ]      5\n215-file-posixshm.sh                     [ success ]      5\n216-sysv-shm.sh                          [ success ]      7\n217-file-udplisten.sh                    [ success ]      7\n218-file-tcplisten.sh                    [ success ]     17\n221-lazy-osd-ckpt.sh                     [ success ]      3\n222-self-ckpt-mem.sh                     [ success ]     10\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      4\n225-memsnap-osd-poll.sh                  [ success ]      6\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      3\n228-wal.sh                               [ success ]      4\n229-chroot.sh                            [ success ]      5\n230-chroot-devfs.sh                      [ success ]     14\n231-memsnap-osd-nowait.sh                [ success ]      9\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      2\n234-metropolis-exec.sh                   [ success ]      2\n235-metropolis-accept.sh                 [ success ]      2\n236-metropolis-exit.sh                   [ success ]      6\n237-metropolis-accept4.sh                [ success ]      2\n238-metropolis-pymetro.sh                [ success ]      2\n239-metropolis-pymetro-multiple.sh       [ success ]      2\n240-metropolis-pymetro-partitions.sh     [ success ]      2\n241-metropolis-pymetro-cachedparts.sh    [ success ]      6\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]     13\n244-precopy-restore.sh                   [ success ]      9\n301-mem-rest.sh                          [ success ]     10\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D548",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/438a54896031901293b11d3026d5e8d4aabfabce",
          "sha": "438a54896031901293b11d3026d5e8d4aabfabce"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/4f9584ca0e8d7ef640bbad5c4e29fba166e17082",
          "html_url": "https://github.com/etsal/aurora/commit/4f9584ca0e8d7ef640bbad5c4e29fba166e17082",
          "sha": "4f9584ca0e8d7ef640bbad5c4e29fba166e17082"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/ef361e7186882c45062b0a099d4bc1cfe90bd304",
      "sha": "ef361e7186882c45062b0a099d4bc1cfe90bd304",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OmVmMzYxZTcxODY4ODJjNDUwNjJiMGEwOTlkNGJjMWNmZTkwYmQzMDQ=",
      "html_url": "https://github.com/rcslab/aurora/commit/ef361e7186882c45062b0a099d4bc1cfe90bd304",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/ef361e7186882c45062b0a099d4bc1cfe90bd304/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/ef361e7186882c45062b0a099d4bc1cfe90bd304",
        "author": {
          "date": "2021-07-29T11:31:20.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-07-29T11:31:28.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "fixed bug causing ETXTBSY on executables used by restored processes\n\nSummary: Aurora currently uses VOP_SET_TEXT directly to mark executables as such, imncrementing the v_writecount of the vnode in the process. The check used to determine whether to call VOP_SET_TEXT is overly general, causing multiple increments to v_writecount that persist even after unloading Aurora, and preventing the modification (e.g., recompilation) of the executables. Modify the code path to call the upper level function vm_map_entry_set_vnode_text instead of VOP_SET_TEXT directly.\n\nTest Plan:\nBuild: FreeBSD 12.1-RELEASE FASTDBG\nHost: aurora\nTest started: Tue 27 Jul 2021 17:33:45 EDT\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      8\n002-load-mount-unload.sh                 [ success ]      6\n003-mount-unmount.sh                     [ success ]      0\n004-load-double-sls.sh                   [ success ]      1\n005-unload-double-sls.sh                 [ success ]      5\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      2\n008-mount-double.sh                      [ success ]      2\n009-unload-slos-before-sls.sh            [ success ]      2\n010-unmount-before-sls.sh                [ success ]      0\n101-simple-file-io.sh                    [ success ]      2\n102-fd-chroot.sh                         [ success ]      4\n201-simple-mem-ckpt.sh                   [ success ]      3\n202-simple-osd-ckpt.sh                   [ success ]      3\n203-busy-loop.sh                         [ success ]      7\n204-print-stdout.sh                      [ success ]      6\n205-array-traversal.sh                   [ success ]      7\n206-mmap-file.sh                         [ success ]      5\n207-mmap-anonymous.sh                    [ success ]      4\n208-signal-handler.sh                    [ success ]      9\n209-pthreads-mutex.sh                    [ success ]      5\n210-file-vnode.sh                        [ success ]     13\n211-fork-simple.sh                       [ success ]      8\n212-file-fifo.sh                         [ success ]      9\n214-file-pipes.sh                        [ success ]      5\n215-file-posixshm.sh                     [ success ]      5\n216-sysv-shm.sh                          [ success ]      7\n217-file-udplisten.sh                    [ success ]      7\n218-file-tcplisten.sh                    [ success ]     17\n221-lazy-osd-ckpt.sh                     [ success ]      3\n222-self-ckpt-mem.sh                     [ success ]     10\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      4\n225-memsnap-osd-poll.sh                  [ success ]      6\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      3\n228-wal.sh                               [ success ]      4\n229-chroot.sh                            [ success ]      5\n230-chroot-devfs.sh                      [ success ]     14\n231-memsnap-osd-nowait.sh                [ success ]      9\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      2\n234-metropolis-exec.sh                   [ success ]      2\n235-metropolis-accept.sh                 [ success ]      2\n236-metropolis-exit.sh                   [ success ]      6\n237-metropolis-accept4.sh                [ success ]      2\n238-metropolis-pymetro.sh                [ success ]      2\n239-metropolis-pymetro-multiple.sh       [ success ]      2\n240-metropolis-pymetro-partitions.sh     [ success ]      2\n241-metropolis-pymetro-cachedparts.sh    [ success ]      6\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]     13\n244-precopy-restore.sh                   [ success ]      9\n301-mem-rest.sh                          [ success ]     10\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D548",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/438a54896031901293b11d3026d5e8d4aabfabce",
          "sha": "438a54896031901293b11d3026d5e8d4aabfabce"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/4f9584ca0e8d7ef640bbad5c4e29fba166e17082",
          "html_url": "https://github.com/rcslab/aurora/commit/4f9584ca0e8d7ef640bbad5c4e29fba166e17082",
          "sha": "4f9584ca0e8d7ef640bbad5c4e29fba166e17082"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/adb6dd6616871bf102c9119c0dc2b5e090b23b52",
      "sha": "adb6dd6616871bf102c9119c0dc2b5e090b23b52",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OmFkYjZkZDY2MTY4NzFiZjEwMmM5MTE5YzBkYzJiNWUwOTBiMjNiNTI=",
      "html_url": "https://github.com/rcslab/aurora/commit/adb6dd6616871bf102c9119c0dc2b5e090b23b52",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/adb6dd6616871bf102c9119c0dc2b5e090b23b52/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/adb6dd6616871bf102c9119c0dc2b5e090b23b52",
        "author": {
          "date": "2023-01-16T16:06:38.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2023-01-16T16:16:11.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "added vnode prefaulting\n\nSummary: We are currently not prefaulting vnodes. Build a  code path for vnode prefauting based on vm_object_populate() on the file's underlying vnode.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Fri Nov 25 16:27:30 EST 2022\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      5\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      8\n211-fork-simple.sh                       [ success ]      6\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      5\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     15\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     22\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      4\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      7\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      2\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      2\n241-metropolis-partitions-cached.sh      [ success ]      2\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      9\n245-amplified-checkpoint.sh              [ success ]      2\n246-remount-sls.sh                       [ success ]      5\n247-remount-slos.sh                      [ success ]      6\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ali, ryan\n\nTags: #aurora\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D713",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/a89770f75b56f64c6e772f97ca944efb00cd7660",
          "sha": "a89770f75b56f64c6e772f97ca944efb00cd7660"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/2477d616981da19cf69eaa8e3ef16cf622ecf567",
          "html_url": "https://github.com/rcslab/aurora/commit/2477d616981da19cf69eaa8e3ef16cf622ecf567",
          "sha": "2477d616981da19cf69eaa8e3ef16cf622ecf567"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/4b18bb1cfb1fd825a4e1ee7cdd6e2b832e6bf746",
      "sha": "4b18bb1cfb1fd825a4e1ee7cdd6e2b832e6bf746",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OjRiMThiYjFjZmIxZmQ4MjVhNGUxZWU3Y2RkNmUyYjgzMmU2YmY3NDY=",
      "html_url": "https://github.com/rcslab/aurora/commit/4b18bb1cfb1fd825a4e1ee7cdd6e2b832e6bf746",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/4b18bb1cfb1fd825a4e1ee7cdd6e2b832e6bf746/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/4b18bb1cfb1fd825a4e1ee7cdd6e2b832e6bf746",
        "author": {
          "date": "2021-08-12T22:14:33.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-08-12T22:14:45.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "UNIX socket and SYSV shared memory bugfixes\n\nSummary:\nMicrobenchmarks like the tests/posix test currently cause crashes due to the following bugs:\n\n- UNIX sockets are restored using the name stored in sockaddr_un, which is a relative path. This causes bugs when restoring from a different directory. As a result we instead checkpoint the underlying vnode if it exists.\n\n- The whitelist used to serialize vnodes into the disk does not include sockets (VSOCK). This not only causes restores to fail, since the vnode is missing, but also a deadlock at checkpoint time due to incomplete error handling in slsckpt_vnode_serialize().\n\n- SYSV shared memory segments are restored with the wrong identifier due to not storing the seq field. Fix the code to faithfully recreate the ID.\n\nFix these errors to enable proper restores.\n\nTest Plan:\nBuild: FreeBSD 12.1-RELEASE PERF\nHost: skylake4.rcs.uwaterloo.ca\nTest started: Thu Aug 12 11:24:37 UTC 2021\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      3\n002-load-mount-unload.sh                 [ success ]      4\n003-mount-unmount.sh                     [ success ]      0\n004-load-double-sls.sh                   [ success ]      1\n005-unload-double-sls.sh                 [ success ]      1\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      1\n008-mount-double.sh                      [ success ]      2\n009-unload-slos-before-sls.sh            [ success ]      1\n010-unmount-before-sls.sh                [ success ]      0\n101-simple-file-io.sh                    [ success ]      1\n102-fd-chroot.sh                         [ success ]      4\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      3\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      5\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      6\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      7\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      6\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      5\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     15\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     23\n221-lazy-osd-ckpt.sh                     [ success ]      3\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      4\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      3\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ success ]      4\n230-chroot-devfs.sh                      [ success ]      7\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      2\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      2\n238-metropolis-pymetro.sh                [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-pymetro-partitions.sh     [ success ]      2\n241-metropolis-pymetro-cachedparts.sh    [ success ]      2\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      9\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ali, ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D560",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/8cabbafad07bb214757f5524dc3943f443ac6ba2",
          "sha": "8cabbafad07bb214757f5524dc3943f443ac6ba2"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/bd9a4c9e11196ac261a30ec5d19a27718db992e1",
          "html_url": "https://github.com/rcslab/aurora/commit/bd9a4c9e11196ac261a30ec5d19a27718db992e1",
          "sha": "bd9a4c9e11196ac261a30ec5d19a27718db992e1"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/4b18bb1cfb1fd825a4e1ee7cdd6e2b832e6bf746",
      "sha": "4b18bb1cfb1fd825a4e1ee7cdd6e2b832e6bf746",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OjRiMThiYjFjZmIxZmQ4MjVhNGUxZWU3Y2RkNmUyYjgzMmU2YmY3NDY=",
      "html_url": "https://github.com/etsal/aurora/commit/4b18bb1cfb1fd825a4e1ee7cdd6e2b832e6bf746",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/4b18bb1cfb1fd825a4e1ee7cdd6e2b832e6bf746/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/4b18bb1cfb1fd825a4e1ee7cdd6e2b832e6bf746",
        "author": {
          "date": "2021-08-12T22:14:33.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2021-08-12T22:14:45.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "UNIX socket and SYSV shared memory bugfixes\n\nSummary:\nMicrobenchmarks like the tests/posix test currently cause crashes due to the following bugs:\n\n- UNIX sockets are restored using the name stored in sockaddr_un, which is a relative path. This causes bugs when restoring from a different directory. As a result we instead checkpoint the underlying vnode if it exists.\n\n- The whitelist used to serialize vnodes into the disk does not include sockets (VSOCK). This not only causes restores to fail, since the vnode is missing, but also a deadlock at checkpoint time due to incomplete error handling in slsckpt_vnode_serialize().\n\n- SYSV shared memory segments are restored with the wrong identifier due to not storing the seq field. Fix the code to faithfully recreate the ID.\n\nFix these errors to enable proper restores.\n\nTest Plan:\nBuild: FreeBSD 12.1-RELEASE PERF\nHost: skylake4.rcs.uwaterloo.ca\nTest started: Thu Aug 12 11:24:37 UTC 2021\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n001-load-unload.sh                       [ success ]      3\n002-load-mount-unload.sh                 [ success ]      4\n003-mount-unmount.sh                     [ success ]      0\n004-load-double-sls.sh                   [ success ]      1\n005-unload-double-sls.sh                 [ success ]      1\n006-load-double-slos.sh                  [ success ]      1\n007-unload-double-slos.sh                [ success ]      1\n008-mount-double.sh                      [ success ]      2\n009-unload-slos-before-sls.sh            [ success ]      1\n010-unmount-before-sls.sh                [ success ]      0\n101-simple-file-io.sh                    [ success ]      1\n102-fd-chroot.sh                         [ success ]      4\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      3\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      5\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      6\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      7\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      6\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      5\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     15\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     23\n221-lazy-osd-ckpt.sh                     [ success ]      3\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      4\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      5\n227-memsnap-mem.sh                       [ success ]      3\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ success ]      4\n230-chroot-devfs.sh                      [ success ]      7\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      2\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      2\n238-metropolis-pymetro.sh                [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-pymetro-partitions.sh     [ success ]      2\n241-metropolis-pymetro-cachedparts.sh    [ success ]      2\n242-cached-restore.sh                    [ success ]      9\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      9\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ali, ryan\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D560",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/8cabbafad07bb214757f5524dc3943f443ac6ba2",
          "sha": "8cabbafad07bb214757f5524dc3943f443ac6ba2"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/bd9a4c9e11196ac261a30ec5d19a27718db992e1",
          "html_url": "https://github.com/etsal/aurora/commit/bd9a4c9e11196ac261a30ec5d19a27718db992e1",
          "sha": "bd9a4c9e11196ac261a30ec5d19a27718db992e1"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/adb6dd6616871bf102c9119c0dc2b5e090b23b52",
      "sha": "adb6dd6616871bf102c9119c0dc2b5e090b23b52",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OmFkYjZkZDY2MTY4NzFiZjEwMmM5MTE5YzBkYzJiNWUwOTBiMjNiNTI=",
      "html_url": "https://github.com/etsal/aurora/commit/adb6dd6616871bf102c9119c0dc2b5e090b23b52",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/adb6dd6616871bf102c9119c0dc2b5e090b23b52/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/adb6dd6616871bf102c9119c0dc2b5e090b23b52",
        "author": {
          "date": "2023-01-16T16:06:38.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2023-01-16T16:16:11.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "added vnode prefaulting\n\nSummary: We are currently not prefaulting vnodes. Build a  code path for vnode prefauting based on vm_object_populate() on the file's underlying vnode.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Fri Nov 25 16:27:30 EST 2022\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      5\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      5\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      8\n211-fork-simple.sh                       [ success ]      6\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      5\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     15\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     22\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      3\n224-restore-osd-multiple.sh              [ success ]      4\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      7\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      2\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      2\n241-metropolis-partitions-cached.sh      [ success ]      2\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      9\n245-amplified-checkpoint.sh              [ success ]      2\n246-remount-sls.sh                       [ success ]      5\n247-remount-slos.sh                      [ success ]      6\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n\nReviewers: ali, tavianator, ryan\n\nReviewed By: ali, ryan\n\nTags: #aurora\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D713",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/a89770f75b56f64c6e772f97ca944efb00cd7660",
          "sha": "a89770f75b56f64c6e772f97ca944efb00cd7660"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/2477d616981da19cf69eaa8e3ef16cf622ecf567",
          "html_url": "https://github.com/etsal/aurora/commit/2477d616981da19cf69eaa8e3ef16cf622ecf567",
          "sha": "2477d616981da19cf69eaa8e3ef16cf622ecf567"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/clearlinux-pkgs/Z3/commits/caef1eaeffba0b15ea027650fe9f5a8dd34ca340",
      "sha": "caef1eaeffba0b15ea027650fe9f5a8dd34ca340",
      "node_id": "MDY6Q29tbWl0MTI2NDA5Mjc5OmNhZWYxZWFlZmZiYTBiMTVlYTAyNzY1MGZlOWY1YThkZDM0Y2EzNDA=",
      "html_url": "https://github.com/clearlinux-pkgs/Z3/commit/caef1eaeffba0b15ea027650fe9f5a8dd34ca340",
      "comments_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/commits/caef1eaeffba0b15ea027650fe9f5a8dd34ca340/comments",
      "commit": {
        "url": "https://api.github.com/repos/clearlinux-pkgs/Z3/git/commits/caef1eaeffba0b15ea027650fe9f5a8dd34ca340",
        "author": {
          "date": "2023-12-05T19:44:45.000-08:00",
          "name": "William Douglas",
          "email": "william.douglas@intel.com"
        },
        "committer": {
          "date": "2023-12-05T19:44:45.000-08:00",
          "name": "William Douglas",
          "email": "william.douglas@intel.com"
        },
        "message": "Z3: Autospec creation for update from version 4.12.1 to version 4.12.3\n\nAE1020 (1):\n      WARNINGS_AS_ERRORS is ON/OFF, not TRUE/FALSE (#6979)\n\nAlexander Grund (1):\n      CMake: Improve handling of git hash/describe (#7028)\n\nAlper Altuntas (1):\n      Add __enter__ and __exit__ methods to Solver class (#7025)\n\nAndrey Andreyevich Bienkowski (1):\n      Clarify optimizer guarantees (#7030)\n\nAntti Hyvärinen (1):\n      Implement proposed smtlib2 bitvector overflow predicates (#6715)\n\nArie Gurfinkel (1):\n      QEL: Fast Approximated Quantifier Elimination (#6820)\n\nBram V (1):\n      Make all methods show in java API (#6626)\n\nBruce Mitchener (7):\n      Remove `Z3_literals` remnants. (#6829)\n      docs: More intra-doc linking, bit of formatting. (#6963)\n      z3.h: Don't include `stdio.h` (#7014)\n      cmake: Require cmake 3.16 or later. (#7015)\n      mbp: term: Fix reorder ctor warning. (#7016)\n      cmake: Use `FindPython3`. (#7019)\n      Fix syntax warning when using Python 3.12. (#7022)\n\nChristoph M. Wintersteiger (7):\n      Add RCF functions to OCaml API (#6932)\n      Assorted fixes for floats (#6968)\n      Add Z3_solver_interrupt to OCaml API (#6976)\n      Revert unsound NaN constraints in theory_fpa (#6993)\n      Fix memory and concurrency issues in OCaml API (#6992)\n      Add accessors for RCF numeral internals (#7013)\n      Fix to_fp_signed (#7034)\n\nClemens Eisenhofer (8):\n      Some UP bugfixes in the new core (#6673)\n      Bugfix relevancy propagation + UP (old core) (#6678)\n      Fix UP's decide callback (#6707)\n      Equalities in C# UP-Propagation (#6786)\n      User Propagator: Return if propagated lemma is redundant (#6791)\n      Fix UP registration in final callback (#6929)\n      Fixed next_split call in pop (#6966)\n      Fixed parsing of | and \\  (#6975)\n\nDeclan Hwang (1):\n      fix typo (#6628)\n\nDing Fei (1):\n      fix tpl instantiation issue for mingw (#6597)\n\nEyalBrilling (1):\n      fixed possible undefined variable assigment (#6985)\n\nFrederick Robinson (1):\n      fix typo (#6569)\n\nGuido Martínez (2):\n      Adding some options in support of F* (#6774)\n      bool_rewriter: fix possible segfault when disabling rewriter.sort_disjunctions (#6779)\n\nGuillaume Bagan (1):\n      JS/TS:  add Optimize class (#6712)\n\nHari Govind V K (9):\n      bug fix. Prevent resetting gg stats #6062 (#6618)\n      fix unsound slice criteria (#6625)\n      Only print func-decl names for indexed parameters (#6663)\n      fix #5925 (#6846)\n      split on all ite terms. fix #6852 (#6859)\n      support or, and, implies, distinct in mbp_basic (#6867)\n      print deq in lits2pure. fix #6877 (#6878)\n      bug fix #6934 (#6940)\n      Qel fixes (#6999)\n\nJakob Rath (2):\n      Shared features from polysat branch (#6567)\n      Fix bvnego (#6750)\n\nJerry James (1):\n      Fix regular expression strings with escapes (#6797)\n\nJohn Fleisher (1):\n      Add c++ flags for vulcan assembly compliance (#6906)\n\nJulian Parsert (2):\n      Added overloaded versions of context::recfun in the c++ api that allow for the declaration of recursive functions where the domain is given by a z3::sort_vector instead of an arity and sort* (#6576)\n      Documentation on how to add z3 to CMake project using FetchContent and documentation to recdef function. (#6613)\n\nKevin Phoenix (1):\n      Use sys.getdefaultencoding() instead of sys.stdout.encoding (#6612)\n\nLev Nachmanson (139):\n      remove mps_reader\n      remove a lp_primal_simplex.cpp from CMakeLists\n      lp_dual_simplex.cpp removed from CMakeLists.txt\n      more removals\n      removals\n      remove includes of lp_dual_simplex\n      rm lp_dual_simplex\n      rm lp_primal_simplex\n      small removals\n      rm lp_solver\n      restore the previous state\n      before rm lu\n      rm get_column_in_lu_mode\n      rm lu\n      rm lu\n      rm_lp\n      rm_lu\n      rm lu\n      rm lu\n      rm lu\n      rm lu\n      rm lu\n      rm lu\n      rm lu\n      cleanup\n      rm breakpoints\n      rm dealing with doubles\n      Revert \"rm dealing with doubles\"\n      rm lu\n      rm lu\n      rm lu\n      rm scaler\n      rm square_sparse_matrix\n      more cleanup\n      rm dead code\n      rp precise\n      remove many methods dealing with double\n      rm lu related fields from lp_core_solver_base.h\n      remove dead code\n      more dead code removal\n      remove more dead code\n      more dead code\n      rm dead code\n      more dead code\n      fix lp_tst\n      more dead code\n      replace lp_assert(false) with UNREACHABLE\n      Remove non feasible costs (#6653)\n      fix sort_non_basis (#6755)\n      get cached tv value (#6756)\n      use heap to track infeasible columns. (#6771)\n      patching merge (#6780)\n      clean up and add clang-format off\n      find minimal deltas in patching\n      set clang format off for lp files (#6795)\n      a small change in trace feas\n      improve tracing and a small fix in\n      add a comment\n      remove dead code\n      add TRACE stmts, more efficient remove from inf_heap\n      edit tracing, add lar_solver::column_is_feasible()\n      remove dead code\n      remove the line with clang-format off\n      fix the build\n      code cleaning around m_touched_rows of lar_solver (#6814)\n      restore the change_rows population in lar_solver\n      relax an assertion in int_solver::patcher\n      comment out debug output\n      add to m_touched_rows only when bound\n      u_set replaced by indexed_uint_set (#6841)\n      new equality propagation scheme, etc\n      delete remove_fixed_vars_from_base() from\n      more efficient column_is_fixed\n      remove an assert\n      add a constructor from a variable to factor\n      small change in factor to support TRACE\n      use param_ref in nla_solver (#6862)\n      split free vars in nla\n      remove tracking of bounds\n      init m_literal_vec\n      handle monomial_bounds::unit_propagate()\n      propagate lineal monomial\n      fixes a bug\n      propagate monomial is nla\n      restore m_crossed* and create lemmas\n      restore the lemma scheme\n      renaming\n      fixing the bugs\n      runs a simple test\n      propagate monics with lp_bound_propagator\n      fix the build for gcc\n      add a comment\n      check m_unassigned_bounds in bound_is_interesting\n      debug lp_bound_propagator\n      remove an extrac check in bound_is_interesting\n      is_linear does not check for is_big\n      debug\n      fix dep calculations in lp_bound_propagator\n      refactor propagat_monic\n      change type of m_ibounds to std::vector\n      add an include file\n      add an include\n      using structures from util in lp_bound_propagator\n      remove dead code related to nla unit propagation\n      trying to get else on a new line\n      add features  to std_allocator\n      typo\n      fix a lambda bug\n      make m_ibounds inside of lp_bound_propagator\n      transfer propagate monomial bounds to nla_solver\n      try the lemma scheme\n      reject rows with columns with big numbers for lp bound propagation\n      Revert \"reject rows with columns with big numbers for lp bound propagation\"\n      do not use lemmase in monomial propagation\n      clean m_nla_lemma_vector in nla_solver\n      move monomial propagation from theory_lra to nla_solver\n      throttle monomial unit prop and and nl params\n      fix the build\n      track changed monics efficiently\n      propagate only one non-fixed monomial intrernally\n      better tracking changinc rows and monomials\n      change the order of lp and nlp propagation\n      fixes in lar_solver around nl unit propagation\n      merging master to unit_prop_on_monomials\n      debug new propagation scheme\n      restore the scheme of m_columns_with_changed_bounds\n      remove unnecessery call\n      merge changes from master\n      restore move_non_basic_to_bounds\n      use the simple version of move_non_basic_column_to_bounds\n      fixin nla_solver_test.cpp\n      add a comment\n      cosmetic changes\n      fix a bug in unit nl prop\n      add changes in lp with validate_bound and maximize_term\n      remove an assert\n      simplify the jump on entering\n      remove some warnings with clang\n      remove an unnecessary if\n\nLufyCZ (1):\n      increase wasm stack size (#6931)\n\nManuel Carrasco (1):\n      Add solver::interrupt to Python's API. (#6739)\n\nMichał Górny (1):\n      fix missing <cstdint> include (#6720)\n\nNikolaj Bjorner (537):\n      make euf-egraph resilient to when there are no consumers to literal propagation.\n      increment release version\n      change to manylinux2014 in setup.py\n      address compiler warnings, and user question #6544\n      remove msf example, add option to make model converter not reduce models\n      update release notes for 12.2\n      apply relevancy filtering on unsupported ops, fix term construction bug in bv2fpa_converter fix #6548\n      adding placeholder for refining power of 2\n      revert effect of filtering unsupported\n      Allow building AC functions without requiring arity check from API\n      detect bounds from mod\n      detect bounds from mod\n      revise bv-bounds-tactic\n      Update theory_lra.cpp\n      Add new tactic bound-simplifier for integer-based bit-vector reasoning.\n      remove debug out\n      add outline for interval reasoning\n      fix riscv/aarch/powerpc build warnings\n      use intervals for tracking bounds on arithmetic variables\n      handle to-real in variable mapping\n      initial outline of exponentiation\n      fix #6550\n      fix #6550\n      convert caml mk_real to int64\n      add trail to avoid stale references in expr2var\n      update ml example to 64 bit\n      force to_fp to disambiguate +zero and -zero, #6548, filter unsupported on relevancy\n      switch to expose fresh function instead of changing legacy function\n      update julia bindings to use 64-bit mk_real (real_val)\n      add contextual simplification to bv-bounds-tactic\n      remove passing proof parameter to expr-inverter\n      add stubs for proof production in elim_unconstrained\n      add module for handling axioms for powers\n      reshuffle pre-conditions for powers\n      bugfixes to incremental linearization for expanding power\n      #6555\n      move dominator simplifier functionality to rewriter and simplifier, move bv_bounds simplifier functionality to simplifier\n      Move modular interval to interval directory\n      add pragma\n      fix mk-project file for python build\n      fix #6561\n      convert reduce-args to a simplifier\n      fix build\n      handle non-linear division axioms, consolidate backtracking state in nla_core\n      fix division filter\n      fix division filter\n      move bounded division lemmas to nla solver/ nla_divisions.\n      create simplifier_solver wrapper to supply simplifier layer\n      Add simplification customization for SMTLIB2\n      updated doc generation script\n      android 16 byte alignment for stack allocated memory?\n      fix #6564\n      update release notes\n      remove empty file\n      fix release message\n      add shortcut filter to avoid traversing model reconstruction trail if there are no intersections with model\n      check if trail is empty to avoid collecting variables\n      fix build\n      add API for creating and attaching simplifiers\n      add ocaml signature for simplifier\n      disambiguate overloaded with for Julia bindings\n      update ml api\n      update ml api\n      update ml api\n      update ml api\n      update ml api\n      protecting add_simplifier API against mis-use\n      use setter method to easier track updates to settings.\n      initialize field\n      fix warning\n      fix warnings\n      fix test\n      fix incremental pre-processing to work with assumptions/cores and consequences\n      fix incremental pre-processing to work with consequences/cubes\n      add simplifiers to .net API\n      add simplifier to java API\n      compiler warning\n      compiler warning\n      compiler warning fix\n      remove unused field\n      compiler warnings/bugs\n      don't apply tactics in parse mode\n      fix #6559\n      update nuget packaging targets #6570\n      updates to ddfw, initial local search phase option\n      fix build\n      restart after sat solution\n      try side-by-side nightly\n      update stage name\n      update stage name\n      elaborating on local-search rephase strategy\n      update release script\n      remove debug out\n      fix #6571\n      adding arith sls\n      fix compilation\n      use phase\n      fix #6573\n      fixes to mbqi in the new core based on #6575\n      wip - integrating arithmetic local search\n      fixes for #6577\n      wip - local search for euf/arithmetic\n      fixes to build\n      wip - bounded local search for arithmetic\n      fixes related to #6577\n      patch regressions\n      fix #6580\n      annotate arith_sls\n      save on dtt\n      fix build\n      fix #6582\n      track assumptions when parsing into a solver. This enables solver.from_file/solver.from_string to support assumptions/cores #6587\n      wip experiments with sls\n      fix #6585\n      remove dependency on bool-rewriter in hoist rewriter\n      fix #6590\n      wip - local search\n      wip - local search - fix build\n      wip - local search - move to plugin model\n      fixes for #6590\n      fix #6346\n      add trichotomy for sequence comparison. #6586\n      wip - local search - use dispatch model from bool local search instead of separate phases.\n      fix #6595\n      wip - arith sls\n      revert debug only changes to sat-solver\n      fix #6599\n      deal with compiler warnings (unused variables etc)\n      add destructive equality resolution to the main simplifier.\n      Update api.cpp\n      update do logging\n      compile warnings\n      clean up build warnings\n      apply rewriting if result of destructive equality resolution is simplified\n      fix #6591\n      fix #6600\n      remove limiting error mode #6600\n      wip - arith local search\n      remove m_b from lar_core_solver\n      Update smt_context_pp.cpp\n      add preprocessor parameter whether to use bound simplifier\n      remove stale file\n      fixes and tests for arith-sls\n      fix bug in quasi macro identification: require quantifiers\n      fix #6615\n      add (disabled) code path to enable nested conjunctions\n      add back max_occs parameter dependency to solve-eqs\n      move sat.smt.proof.check_rup into solver.proof.check_rup #6616\n      remove parenthesis\n      fix build\n      bug fixes to new core, elim_predicates and elim_unconstrained\n      add unconstrained elimination for sequences\n      make generation of \"some\" Boolean value fair\n      print lemmas2console faster\n      missing updates\n      remove experimental files\n      fix unsound rewrite\n      fix #6637\n      fix #6635\n      fix #6624\n      enable interactive example\n      add parameter access to C++ API\n      #6646\n      fix #6648\n      fix #6644\n      fix build\n      use field 'm' for streamlined representation\n      fix #6650\n      fix #6652\n      #6658\n      fix #6655\n      fix #6660\n      fix #6659\n      extract multi-patterns when pattern can be decomposed\n      remove cast expression\n      #6654\n      fix #6665\n      fix #6661\n      fix #6661\n      fix regression from Grobner port\n      inherit and reset rlimit counter on children limits\n      fix #6671\n      fix #6670\n      fix #6662\n      fix #6623\n      fix #6677\n      add branch / cut selection heuristic from solver=2\n      fix #6682\n      fix #6680\n      fix #6676 get rid of rem0 declare it to be mod0 semantics to simplify code paths\n      module for maintaining probability distributions\n      formatting updates\n      count internal nodes, use to block expanding use of hoist, #6683\n      fix #6675\n      fix #6686\n      perf and memory smash fixes to internal node count routine\n      #6687\n      fix #6687\n      add tests for distribution utility and fix loose ends\n      fix #6690\n      fix soundness bug in disabled code\n      fix #6692\n      fix #6689\n      fix #6693\n      differentiate fixed from offset-eq in statistics\n      disable destructive equality resolution simplification if there are patterns\n      use only maxres if there is a lexicographic objective, fix #6697\n      weird latent bug in wmax: init() succeeds and it returns undef\n      return diagnostics\n      basic formatting updates\n      remove redundant function, add checker function to test missed propagations\n      add gcd-conflicts stats, formatting updates\n      count gcd conflicts\n      count gcd conflicts, log row id in rows\n      remove references to validating\n      add instrumentation to theory_lra for shuffling final check\n      ensure assume-eqs is invoked after check-lia statically\n      adding stubs to find fixed variables\n      fix regressions #6703\n      fix processing of else expression for model table\n      formatting updates\n      make default argument to ensure_def and mk_def explicit\n      remove debug output\n      fix #6713 fix #6714\n      reformat code to remove brackets\n      remove output\n      disable publish\n      updated release notes for 12.2\n      update version number\n      fix #6721\n      fix #6729\n      stubs for #6097\n      more stubs #6097\n      remove stub class, it may as well go into NativeStatic.txt as C++\n      fix #6734\n      sanity check parameters #6737\n      fix formatting bug reported by Alex Nutz\n      fix #6746, fix type errors in java bindings\n      make der selective to configuration. For F*, quantifiers are hand or machine generated in specific formats and the tool depends on e-matching to use precisely the format of the quantifiers that have been entered. For other cases of quantifiers, destructive equality resolution (der) can be expected to offer simplifications\n      regression on quantifier weight computation when weights are 0 vs non-0. It modifies a change made for the fix of #2667. That fix caused a regression in F*. Reported @mtzguido\n      remove debug output\n      fix #6748\n      fix #6749\n      avoid name clash for multiple special relations #6743\n      simplify bounds by subsumption checks\n      disable breaking change\n      fix context simplification\n      add guard for eq adapter\n      fix #6766\n      #6758\n      fix #6757\n      compile constants into different variables instead of reusing a single variable 1 and coefficients. It delays introducing large coefficients and allows more efficient bounds propagation\n      compile numeral constants into separate variables in the new core\n      fix #6778\n      fix #6783\n      missing negation\n      fixes to trim\n      categorize theory axioms as inferences in output to capture justifications\n      add dependency tracking to proof from trim\n      fixes to trim\n      fix memory smash in euf completion\n      fix #6785\n      fix indentation for python file\n      fix coefficient extraction and passing in Farkas lemmas, thanks to H. F. Bryant\n      revert log addition\n      add direct detection for integer expressions\n      fix #6792, add scaffolding for type variables\n      fix #6802\n      #6805\n      wip - alpha support for polymorphism\n      build fixes\n      build fixes\n      fix #6807\n      fix #6808\n      fix #6793, disable unbound_compressor when used in context of a moel converter\n      initialize poly solver in incremental mode\n      fix #6742\n      updating release-readme\n      revert lt change\n      #6696\n      #6523\n      fix #6813 - proofs terms are fragile with respect to simplificiation of not(not(e)). It would be better if proof terms didn't have to track this level of detail, but the legacy proof format assumes strictly checkable proofs. A patch is to fixup terms within the mk_transitivity constructor\n      fix #6813\n      fix build\n      add missing dependencies in rup\n      fixup dependencies for trim'\n      enable on-clause with dependencies\n      build fixes\n      separate hint literals\n      remove unused variable\n      #6822 string matching against version number of glibc to ensure inclusino\n      rename antecedent utilities for clarity\n      fix build warnings\n      simplify code\n      fix proof generation for euf-solver\n      tweak control flow for empty clauses\n      revert to logging conflict to get EUF trim to work\n      also add separate cut rule\n      patching up trim\n      add rewrite for partially interpreted arithmetic functions\n      fix order for inequalities in arithmetic justifications such that implied bound literal is last. The self-checker uses this property to identify the implied bound\n      update format and checker for implied-eq\n      update format and checker for implied-eq\n      try to add Ubuntu ARM64 to nightly #6835\n      rename artifacts apart\n      strengthen Tseitin checker to take true/false constants into account\n      track lia conflicts as cuts\n      update release.yml with linux-arm64\n      format\n      allow copy within a user scope #6827\n      #6523\n      nits\n      enable arm for non-osx\n      revert setting arm on linux\n      fix build\n      nits\n      update nightly script\n      update nightly script\n      create insert-fresh and insert for indexed_uint_set to make use cases with non-fresh inserts easier\n      update nightly to pull arm\n      update nightly to pull arm\n      update nightly to pull arm\n      update model validate to include arithmetic\n      revert arithmetic final check to original order\n      remove out\n      remove dead code\n      format\n      formatting hygiene\n      remove output\n      na\n      fix #6851\n      fix #6850\n      update pattern for glibc\n      fix 6800\n      remove output\n      lines that go away\n      #6822 - change to 2.31 for nuget packaging\n      remove package lock\n      update unit test to be compatible with C++ vs C exception semantics #6537\n      download 20.04\n      fix #6865\n      Arith min max (#6864)\n      make destructors virtual\n      remove if-def inside cpp file that should not be there #6869\n      fix regression in sign of literals from new solver\n      fixing calls, signs\n      fix #6876\n      include rewriter for recursive functions in model-evaluator\n      add stubs for monomial unit propagation\n      sketch linear monomial propagation\n      move unit propagation into monomial_bounds\n      logging pre-processing\n      some template instantiations #6869\n      add parameter to disable pattern inference #6884\n      fix #6894\n      fix #6894\n      #6902\n      simplify last_index function\n      move allocator to memory_manager and std_vector to vector\n      formatting of else\n      remove unused code\n      formatting updates\n      remove experimental code\n      get rid of int*, use lambda scoping\n      indetation\n      port bug fixes from unit prop branch\n      indentation\n      indentation\n      rmove debug out\n      #6916\n      fix #6914\n      Update smt_context.cpp\n      Update theory_lra.cpp\n      cache is_shared information in the enode\n      use format from unit_prop_on_monomials branch\n      fixup unit test for added argument to constructor of nla_solver\n      move m_nla_lemma_vector to be internal to nla_core\n      fix test build\n      add options to allow testing the effect of non-linear hammers\n      port over moving m_nla_lemmas into nla_core from the linear monomial propagation branch\n      port over moving m_nla_lemmas into nla_core from the linear monomial propagation branch\n      port over moving m_nla_lemmas into nla_core from the linear monomial propagation branch\n      port over cosmetics from unit_prop_on_monomials branch\n      add propagation flag to monic and method for updating it to emonics. This replaces the bool-vector tracking for propagation and internalizes it to the emonics class\n      port over std_vector and std-allocator functionality from monomial propagation branch\n      re-introduce simple implementation of linear monomial propagation for evaluation\n      debug output with the variable that is fixed and its value\n      sketch of internal propagation\n      sketch of internal propagation\n      non-fixed term should have bound 0\n      add theory propagation to linear monomial propagation\n      fix case for 0 multiplier in monomial_bounds\n      ensure bounds propagation on changed columns after nla propagation\n      #6930\n      column value is not necessarily at bounds\n      move initialization to header file\n      add code to enable unit propagation of bounds\n      #6935\n      fix #6937\n      fix #6936\n      formatting\n      remove unused variables\n      merge\n      normalize newlines for if\n      fix build\n      build\n      updates to monomial bounds\n      remove temporary configuration parameter used for testing\n      fix regression\n      build fixes\n      resurrect old bounds propagation\n      #6523\n      #6523\n      #6523\n      remove extra assume-eqs\n      #6523\n      delay detach\n      add facility to check for missing propagations\n      add facility to experiment with nla justified conflicts from Grobner equations\n      add facility to experiment with nla justified conflicts from Grobner equations\n      fix #6947\n      #6523\n      fix exception safety in pdd-solver\n      fix exception safety in pdd-solver\n      add Horner saturation to Grobner conflict detection\n      fix #6956\n      fix #6955\n      allow for propagations the trigger make-feasible check\n      update backoff for bounded_nla\n      enable propagate-linear-equations and extend to monomials\n      update add_lemmas to use check-feasible\n      enable more simplification in case inequality triggers a change.\n      #6953\n      add missing simplification; handle nit #6952\n      incremnet log level for debug output on cancelation\n      add hook for in-processing simplification for NLA\n      use cone of influence reduction before calling nlsat.\n      merge\n      fix build\n      fix build\n      initialize delay bound\n      useful string rewrites\n      regression test 2447\n      #6964\n      deal with non-termination in new arithmetic solver\n      add simplification experiment (disabled) for tracking, some reshuffling of equation/fixed_equation structs\n      fix #6969\n      fix #6969\n      remove experiment with theory lemmas\n      fix #6969, again\n      prepare for local version of Gomory cuts\n      tests\n      #6951, fix build\n      just use std::string\n      #6971\n      remove temporary algebraic numbers from upper layers, move to owner module\n      improved logging, use C++11 for loops instead of iterators\n      #6523 and other heap-use-after-free error\n      remove verbose logging\n      track number of Gomory cuts\n      remove template\n      Add utility to expand sub-terms\n      Gomory cut / branch and bound improvements\n      disable bound validation in debug mode\n      fix #6986\n      change to expr_ref to allow trying simplification\n      fix bug in bound simplification in Gomory for mixed integer linear cuts, enable fixed variable redution after bugfix, add notes that rewriting bounds does not work\n      #6523\n      #6523\n      fix #6988\n      fix #6984\n      fix #6978\n      prepare release script\n      use python3 in nightly\n      pip install importlib resources\n      pip install importlib resources\n      add comment regarding usage model for flush_objects() to relate with pr #6992\n      fix #6997\n      fix #6996\n      build issue\n      #6999 deal with implicit assumptions, more robust pattern matching\n      build fixes\n      use iterator shortcut\n      expose enode pp convenciences\n      household chores in legacy arithmetic solver\n      chores in theory_lra\n      add logging\n      #7003\n      #7001 - align is_numeral without to behavior if is_numeral with return numeral.\n      check cancel flag to avoid unsound conflicts\n      remove unused code\n      fix crash when api_solver sets reset_tracked_assertions\n      add API to access symbols associated with quantifiers\n      fix #7018\n      fix #7012\n      add comments for API versions of bit-vector overflow/underflow checks for #7011\n      fix #7017\n      fix #7006\n      fix typos in script\n      #6523 - contains_ptr bug regarding etable reinserts\n      remove separate to_add_literal queue\n      fix #7024\n      revert some fixes to euf\n      re-enable delayed literal propagation\n      re-enable delayed literal propagation\n      fix regression in fix for #7006\n      fix #7011\n      deal with ubuntu/clang warnings\n      add EUF plugin framework.\n      fix build\n      update output\n      Regressions reported by Guido\n      touch\n      fix #7029\n      try with missed bounds\n      #7027\n      remove assert #7032\n      Disable hoist entirely, it is bad on QF_LIA and does not help on other observed cases\n      #7027\n      missing header\n      pending files\n      fix build\n      #7033\n      #7027\n      refine no-effect predicate to include value of ret\n      fix cone of influence computation for terms with nested variables\n      minor simplification of terms during internalization.\n      minor simplification during internalization\n      handle ac-op in legacy special relations procedure by adding warning\n      remove hoist functionality\n      remove braces\n      install importlib-resources for ubuntu doc\n      install importlib-resources for ubuntu doc\n      install importlib-resources for ubuntu doc\n      fix #7037\n      clean up nla_grobner\n      update release notes\n\nNikolajBjorner (2):\n      try to instrument nightly with aarch compiler for arm64\n      try to instrument nightly with aarch compiler for arm64\n\nNuno Lopes (17):\n      fix tactic name in docs\n      minor code simplifications\n      BV: add missing neg internalizer\n      remove garbage file\n      optimize ~relevancy_propagator_imp() so it just dec refs the exprs in the trail\n      smt_context: we can't assert that the resource limits were exceeded on cancel_exception\n      remove unneeded virtual destructor (optimization)\n      attempt to fix clang buildbots\n      ast compare_nodes: fail faster when comparing quantifier expressions\n      revert removal of virtual destructor of relevancy_eh since clang doesnt play along\n      remove unused code\n      array theory: use expr_ref for mk_default() so it doesnt leak if internalize throws\n      minor code simplification\n      fix debug single-thread build\n      don't crash when a function doesn't have a model when converting a solver to string\n      minor code simplification\n      minor code simplification\n\nPatrick LaFontaine (1):\n      Fix Ocaml bindings FuncEntry to_string (#6639)\n\nSijmen (1):\n      Slightly improve Z3_LIBRARY_PATH error message (#6895)\n\nTHE Spellchecker (1):\n      Typo Fixes (#6803)\n\nTomasz Kłoczko (1):\n      Fix building with gcc 13 (#6723)\n\nWalden Yan (1):\n      [WIP] More TS Binding Features (#6412)\n\ndependabot[bot] (13):\n      Bump mymindstorm/setup-emsdk from 11 to 12 (#6541)\n      Bump docker/build-push-action from 3.2.0 to 3.3.0 (#6540)\n      Bump docker/build-push-action from 3.3.0 to 4.0.0 (#6562)\n      Bump docker/build-push-action from 4.0.0 to 4.1.1 (#6772)\n      Bump actions/checkout from 3 to 4 (#6888)\n      Bump docker/build-push-action from 4.1.1 to 4.2.1 (#6896)\n      Bump docker/build-push-action from 4.2.1 to 5.0.0 (#6909)\n      Bump docker/metadata-action from 4 to 5 (#6910)\n      Bump docker/login-action from 2 to 3 (#6911)\n      Bump @babel/traverse from 7.19.4 to 7.23.2 in /src/api/js (#6954)\n      Bump actions/setup-node from 3 to 4 (#6961)\n      Bump docker/build-push-action from 5.0.0 to 5.1.0 (#7008)\n      Bump mymindstorm/setup-emsdk from 12 to 13 (#7021)\n\nditto (1):\n      Java user propagator interface (#6733)\n\nhgvk94 (1):\n      fix #6543. don't assume order on bindings\n\nigcontreras (1):\n      use uintptr_t instead of size_t (tptr) for portability (#6627)\n\nitehax (1):\n      Update README.md (#6960)\n\nrsetaluri (1):\n      Update script to use importlib_resources (#6949)\n\ntcely (1):\n      pattern_inference.h: include rewriter_def.h (#6765)\n\n권승완 (1):\n      update ocaml binding to support more string apis (#6656)",
        "tree": {
          "url": "https://api.github.com/repos/clearlinux-pkgs/Z3/git/trees/be937087fc8911f0b4cd3ebc98b6377ff85c1d07",
          "sha": "be937087fc8911f0b4cd3ebc98b6377ff85c1d07"
        },
        "comment_count": 0
      },
      "author": {
        "login": "bryteise",
        "id": 15709,
        "node_id": "MDQ6VXNlcjE1NzA5",
        "avatar_url": "https://avatars.githubusercontent.com/u/15709?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bryteise",
        "html_url": "https://github.com/bryteise",
        "followers_url": "https://api.github.com/users/bryteise/followers",
        "following_url": "https://api.github.com/users/bryteise/following{/other_user}",
        "gists_url": "https://api.github.com/users/bryteise/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bryteise/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bryteise/subscriptions",
        "organizations_url": "https://api.github.com/users/bryteise/orgs",
        "repos_url": "https://api.github.com/users/bryteise/repos",
        "events_url": "https://api.github.com/users/bryteise/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bryteise/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "bryteise",
        "id": 15709,
        "node_id": "MDQ6VXNlcjE1NzA5",
        "avatar_url": "https://avatars.githubusercontent.com/u/15709?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bryteise",
        "html_url": "https://github.com/bryteise",
        "followers_url": "https://api.github.com/users/bryteise/followers",
        "following_url": "https://api.github.com/users/bryteise/following{/other_user}",
        "gists_url": "https://api.github.com/users/bryteise/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bryteise/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bryteise/subscriptions",
        "organizations_url": "https://api.github.com/users/bryteise/orgs",
        "repos_url": "https://api.github.com/users/bryteise/repos",
        "events_url": "https://api.github.com/users/bryteise/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bryteise/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/clearlinux-pkgs/Z3/commits/1c5fdeacf033cf54dee0b4b056e6266641ac01ce",
          "html_url": "https://github.com/clearlinux-pkgs/Z3/commit/1c5fdeacf033cf54dee0b4b056e6266641ac01ce",
          "sha": "1c5fdeacf033cf54dee0b4b056e6266641ac01ce"
        }
      ],
      "repository": {
        "id": 126409279,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMjY0MDkyNzk=",
        "name": "Z3",
        "full_name": "clearlinux-pkgs/Z3",
        "private": false,
        "owner": {
          "login": "clearlinux-pkgs",
          "id": 14979720,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE0OTc5NzIw",
          "avatar_url": "https://avatars.githubusercontent.com/u/14979720?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/clearlinux-pkgs",
          "html_url": "https://github.com/clearlinux-pkgs",
          "followers_url": "https://api.github.com/users/clearlinux-pkgs/followers",
          "following_url": "https://api.github.com/users/clearlinux-pkgs/following{/other_user}",
          "gists_url": "https://api.github.com/users/clearlinux-pkgs/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/clearlinux-pkgs/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/clearlinux-pkgs/subscriptions",
          "organizations_url": "https://api.github.com/users/clearlinux-pkgs/orgs",
          "repos_url": "https://api.github.com/users/clearlinux-pkgs/repos",
          "events_url": "https://api.github.com/users/clearlinux-pkgs/events{/privacy}",
          "received_events_url": "https://api.github.com/users/clearlinux-pkgs/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/clearlinux-pkgs/Z3",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/clearlinux-pkgs/Z3",
        "forks_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/forks",
        "keys_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/teams",
        "hooks_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/hooks",
        "issue_events_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/issues/events{/number}",
        "events_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/events",
        "assignees_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/assignees{/user}",
        "branches_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/branches{/branch}",
        "tags_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/tags",
        "blobs_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/languages",
        "stargazers_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/stargazers",
        "contributors_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/contributors",
        "subscribers_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/subscribers",
        "subscription_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/subscription",
        "commits_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/contents/{+path}",
        "compare_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/merges",
        "archive_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/downloads",
        "issues_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/issues{/number}",
        "pulls_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/labels{/name}",
        "releases_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/releases{/id}",
        "deployments_url": "https://api.github.com/repos/clearlinux-pkgs/Z3/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/09af788bffe2d3baeacb43a54da08afe5548d269",
      "sha": "09af788bffe2d3baeacb43a54da08afe5548d269",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OjA5YWY3ODhiZmZlMmQzYmFlYWNiNDNhNTRkYTA4YWZlNTU0OGQyNjk=",
      "html_url": "https://github.com/rcslab/aurora/commit/09af788bffe2d3baeacb43a54da08afe5548d269",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/09af788bffe2d3baeacb43a54da08afe5548d269/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/09af788bffe2d3baeacb43a54da08afe5548d269",
        "author": {
          "date": "2022-11-25T17:57:20.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2022-11-25T17:57:42.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "added optimized read path\n\nSummary:\nMost applications have their restore times bottlenecked by\nthe disk read operation for their data. We are currently using\nvm_object_populate(), which is not appropriate for performance-critical\noperations. We are also reading each record in succession, needlessly\nserializing otherwise independent disk read operations. Add a paralellized,\nefficient codepath for reading the data from the SLOS during restores.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Fri Nov 11 17:52:17 EST 2022\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      4\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      6\n209-pthreads-mutex.sh                    [ success ]      5\n210-file-vnode.sh                        [ success ]      8\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      7\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     22\n221-lazy-osd-ckpt.sh                     [ success ]      2\n220-pgroups.sh                           [ success ]     23\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      8\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      6\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      7\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      2\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      1\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      2\n246-remount-sls.sh                       [ success ]      5\n247-remount-slos.sh                      [ success ]      5\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ali, ryan\n\nTags: #aurora\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D712",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/242356099dfa365dfdf8471c4ce187c046322f99",
          "sha": "242356099dfa365dfdf8471c4ce187c046322f99"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/e9fb17552ba48daff8c8928fd4e7c25ae99c06d2",
          "html_url": "https://github.com/rcslab/aurora/commit/e9fb17552ba48daff8c8928fd4e7c25ae99c06d2",
          "sha": "e9fb17552ba48daff8c8928fd4e7c25ae99c06d2"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/09af788bffe2d3baeacb43a54da08afe5548d269",
      "sha": "09af788bffe2d3baeacb43a54da08afe5548d269",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OjA5YWY3ODhiZmZlMmQzYmFlYWNiNDNhNTRkYTA4YWZlNTU0OGQyNjk=",
      "html_url": "https://github.com/etsal/aurora/commit/09af788bffe2d3baeacb43a54da08afe5548d269",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/09af788bffe2d3baeacb43a54da08afe5548d269/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/09af788bffe2d3baeacb43a54da08afe5548d269",
        "author": {
          "date": "2022-11-25T17:57:20.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2022-11-25T17:57:42.000-05:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "added optimized read path\n\nSummary:\nMost applications have their restore times bottlenecked by\nthe disk read operation for their data. We are currently using\nvm_object_populate(), which is not appropriate for performance-critical\noperations. We are also reading each record in succession, needlessly\nserializing otherwise independent disk read operations. Add a paralellized,\nefficient codepath for reading the data from the SLOS during restores.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: aurora\nTest started: Fri Nov 11 17:52:17 EST 2022\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      2\n203-busy-loop.sh                         [ success ]      4\n204-print-stdout.sh                      [ success ]      4\n205-array-traversal.sh                   [ success ]      4\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      6\n209-pthreads-mutex.sh                    [ success ]      5\n210-file-vnode.sh                        [ success ]      8\n211-fork-simple.sh                       [ success ]      5\n212-file-fifo.sh                         [ success ]      7\n214-file-pipes.sh                        [ success ]      4\n215-file-posixshm.sh                     [ success ]      4\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     14\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     22\n221-lazy-osd-ckpt.sh                     [ success ]      2\n220-pgroups.sh                           [ success ]     23\n221-lazy-osd-ckpt.sh                     [ success ]      2\n222-self-ckpt-mem.sh                     [ success ]      8\n223-restore-mem-multiple.sh              [ success ]      4\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      6\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      7\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      1\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      1\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      1\n238-metropolis-simple.sh                 [ success ]      2\n239-metropolis-pymetro-multiple.sh       [ success ]      1\n240-metropolis-partitions.sh             [ success ]      1\n241-metropolis-partitions-cached.sh      [ success ]      1\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      2\n246-remount-sls.sh                       [ success ]      5\n247-remount-slos.sh                      [ success ]      5\n248-delta-restore.sh                     [ success ]      1\n249-pgresident.sh                        [ success ]      2\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: ali, ryan\n\nTags: #aurora\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D712",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/242356099dfa365dfdf8471c4ce187c046322f99",
          "sha": "242356099dfa365dfdf8471c4ce187c046322f99"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/e9fb17552ba48daff8c8928fd4e7c25ae99c06d2",
          "html_url": "https://github.com/etsal/aurora/commit/e9fb17552ba48daff8c8928fd4e7c25ae99c06d2",
          "sha": "e9fb17552ba48daff8c8928fd4e7c25ae99c06d2"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/rcslab/aurora/commits/fbb8bcc8c57dfeb0b6c486bcceeef3de48e5935f",
      "sha": "fbb8bcc8c57dfeb0b6c486bcceeef3de48e5935f",
      "node_id": "MDY6Q29tbWl0Mzk4MDE2NjE0OmZiYjhiY2M4YzU3ZGZlYjBiNmM0ODZiY2NlZWVmM2RlNDhlNTkzNWY=",
      "html_url": "https://github.com/rcslab/aurora/commit/fbb8bcc8c57dfeb0b6c486bcceeef3de48e5935f",
      "comments_url": "https://api.github.com/repos/rcslab/aurora/commits/fbb8bcc8c57dfeb0b6c486bcceeef3de48e5935f/comments",
      "commit": {
        "url": "https://api.github.com/repos/rcslab/aurora/git/commits/fbb8bcc8c57dfeb0b6c486bcceeef3de48e5935f",
        "author": {
          "date": "2022-07-25T12:18:02.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2022-07-25T12:18:12.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "parallelized KV tables by sacrificing serializability for iterations\n\nSummary:\nBasic KV table operations all take a KV-global lock and are thus a serialization bottleneck.\nKV tables have an iteration operation that goes through all buckets in the table. Interleaving writes\nwith iteration can lead to the latter operation being non serializable. However, we do not have this\nproblem in the code because iterations and writes happen in non overlapping code paths. Remove the global\nlock from the KV store and take use per-bucket locks when doing reads, writes, and iterations.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: freebsd123\nTest started: Tue May 3 15:05:44 EDT 2022\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      6\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      3\n205-array-traversal.sh                   [ success ]      6\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      7\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      3\n211-fork-simple.sh                       [ success ]      6\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      3\n215-file-posixshm.sh                     [ success ]      6\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     13\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     22\n221-lazy-osd-ckpt.sh                     [ success ]      7\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      5\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      0\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      5\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      2\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      2\n240-metropolis-partitions.sh             [ success ]      8\n241-metropolis-partitions-cached.sh      [ success ]      5\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      2\n246-remount-sls.sh                       [ success ]      4\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: tavianator\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D683",
        "tree": {
          "url": "https://api.github.com/repos/rcslab/aurora/git/trees/020098cdcdfbe3c619837dbbfb5a3b154e6d8ebb",
          "sha": "020098cdcdfbe3c619837dbbfb5a3b154e6d8ebb"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/rcslab/aurora/commits/b39d3e6df4a3e460bb38467081fe779f298154f9",
          "html_url": "https://github.com/rcslab/aurora/commit/b39d3e6df4a3e460bb38467081fe779f298154f9",
          "sha": "b39d3e6df4a3e460bb38467081fe779f298154f9"
        }
      ],
      "repository": {
        "id": 398016614,
        "node_id": "MDEwOlJlcG9zaXRvcnkzOTgwMTY2MTQ=",
        "name": "aurora",
        "full_name": "rcslab/aurora",
        "private": false,
        "owner": {
          "login": "rcslab",
          "id": 39885404,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM5ODg1NDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/39885404?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rcslab",
          "html_url": "https://github.com/rcslab",
          "followers_url": "https://api.github.com/users/rcslab/followers",
          "following_url": "https://api.github.com/users/rcslab/following{/other_user}",
          "gists_url": "https://api.github.com/users/rcslab/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rcslab/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rcslab/subscriptions",
          "organizations_url": "https://api.github.com/users/rcslab/orgs",
          "repos_url": "https://api.github.com/users/rcslab/repos",
          "events_url": "https://api.github.com/users/rcslab/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rcslab/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/rcslab/aurora",
        "description": "Aurora Single Level Store",
        "fork": false,
        "url": "https://api.github.com/repos/rcslab/aurora",
        "forks_url": "https://api.github.com/repos/rcslab/aurora/forks",
        "keys_url": "https://api.github.com/repos/rcslab/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/rcslab/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/rcslab/aurora/teams",
        "hooks_url": "https://api.github.com/repos/rcslab/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/rcslab/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/rcslab/aurora/events",
        "assignees_url": "https://api.github.com/repos/rcslab/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/rcslab/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/rcslab/aurora/tags",
        "blobs_url": "https://api.github.com/repos/rcslab/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/rcslab/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/rcslab/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/rcslab/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/rcslab/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/rcslab/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/rcslab/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/rcslab/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/rcslab/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/rcslab/aurora/subscription",
        "commits_url": "https://api.github.com/repos/rcslab/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/rcslab/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/rcslab/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/rcslab/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/rcslab/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/rcslab/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/rcslab/aurora/merges",
        "archive_url": "https://api.github.com/repos/rcslab/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/rcslab/aurora/downloads",
        "issues_url": "https://api.github.com/repos/rcslab/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/rcslab/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/rcslab/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/rcslab/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/rcslab/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/rcslab/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/rcslab/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/etsal/aurora/commits/fbb8bcc8c57dfeb0b6c486bcceeef3de48e5935f",
      "sha": "fbb8bcc8c57dfeb0b6c486bcceeef3de48e5935f",
      "node_id": "MDY6Q29tbWl0NDg4Nzg0NTk2OmZiYjhiY2M4YzU3ZGZlYjBiNmM0ODZiY2NlZWVmM2RlNDhlNTkzNWY=",
      "html_url": "https://github.com/etsal/aurora/commit/fbb8bcc8c57dfeb0b6c486bcceeef3de48e5935f",
      "comments_url": "https://api.github.com/repos/etsal/aurora/commits/fbb8bcc8c57dfeb0b6c486bcceeef3de48e5935f/comments",
      "commit": {
        "url": "https://api.github.com/repos/etsal/aurora/git/commits/fbb8bcc8c57dfeb0b6c486bcceeef3de48e5935f",
        "author": {
          "date": "2022-07-25T12:18:02.000-04:00",
          "name": "Emil Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "committer": {
          "date": "2022-07-25T12:18:12.000-04:00",
          "name": "Aimilios Tsalapatis",
          "email": "atsalapa@uwaterloo.ca"
        },
        "message": "parallelized KV tables by sacrificing serializability for iterations\n\nSummary:\nBasic KV table operations all take a KV-global lock and are thus a serialization bottleneck.\nKV tables have an iteration operation that goes through all buckets in the table. Interleaving writes\nwith iteration can lead to the latter operation being non serializable. However, we do not have this\nproblem in the code because iterations and writes happen in non overlapping code paths. Remove the global\nlock from the KV store and take use per-bucket locks when doing reads, writes, and iterations.\n\nTest Plan:\nBuild: FreeBSD 12.3-RELEASE-p5 SLOWDBG\nHost: freebsd123\nTest started: Tue May 3 15:05:44 EDT 2022\nStress testing: OFF\nTest                                       Status      Time\n-----------------------------------------------------------\n201-simple-mem-ckpt.sh                   [ success ]      2\n202-simple-osd-ckpt.sh                   [ success ]      6\n203-busy-loop.sh                         [ success ]      3\n204-print-stdout.sh                      [ success ]      3\n205-array-traversal.sh                   [ success ]      6\n206-mmap-file.sh                         [ success ]      4\n207-mmap-anonymous.sh                    [ success ]      3\n208-signal-handler.sh                    [ success ]      7\n209-pthreads-mutex.sh                    [ success ]      4\n210-file-vnode.sh                        [ success ]      3\n211-fork-simple.sh                       [ success ]      6\n212-file-fifo.sh                         [ success ]      5\n214-file-pipes.sh                        [ success ]      3\n215-file-posixshm.sh                     [ success ]      6\n216-sysv-shm.sh                          [ success ]      4\n217-file-udplisten.sh                    [ success ]      5\n218-file-tcplisten.sh                    [ success ]     13\n219-kqueue.sh                            [ success ]      5\n220-pgroups.sh                           [ success ]     22\n221-lazy-osd-ckpt.sh                     [ success ]      7\n222-self-ckpt-mem.sh                     [ success ]      7\n223-restore-mem-multiple.sh              [ success ]      5\n224-restore-osd-multiple.sh              [ success ]      3\n225-memsnap-osd-poll.sh                  [ success ]      5\n226-memsnap-osd-block.sh                 [ success ]      6\n227-memsnap-mem.sh                       [ success ]      2\n228-wal.sh                               [ success ]      1\n229-chroot.sh                            [ disabled ]    N/A\n230-chroot-devfs.sh                      [ disabled ]    N/A\n231-memsnap-osd-nowait.sh                [ success ]      5\n232-metropolis.sh                        [ success ]      1\n233-metropolis-fork.sh                   [ success ]      0\n234-metropolis-exec.sh                   [ success ]      1\n235-metropolis-accept.sh                 [ success ]      5\n236-metropolis-exit.sh                   [ success ]      3\n237-metropolis-accept4.sh                [ success ]      2\n238-metropolis-simple.sh                 [ success ]      1\n239-metropolis-pymetro-multiple.sh       [ success ]      2\n240-metropolis-partitions.sh             [ success ]      8\n241-metropolis-partitions-cached.sh      [ success ]      5\n242-cached-restore.sh                    [ success ]      8\n243-prefault-restore.sh                  [ success ]      8\n244-precopy-restore.sh                   [ success ]      8\n245-amplified-checkpoint.sh              [ success ]      2\n246-remount-sls.sh                       [ success ]      4\n\nReviewers: ali, ryan, tavianator\n\nReviewed By: tavianator\n\nDifferential Revision: https://review.rcs.uwaterloo.ca/D683",
        "tree": {
          "url": "https://api.github.com/repos/etsal/aurora/git/trees/020098cdcdfbe3c619837dbbfb5a3b154e6d8ebb",
          "sha": "020098cdcdfbe3c619837dbbfb5a3b154e6d8ebb"
        },
        "comment_count": 0
      },
      "author": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "etsal",
        "id": 6106600,
        "node_id": "MDQ6VXNlcjYxMDY2MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/etsal",
        "html_url": "https://github.com/etsal",
        "followers_url": "https://api.github.com/users/etsal/followers",
        "following_url": "https://api.github.com/users/etsal/following{/other_user}",
        "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
        "organizations_url": "https://api.github.com/users/etsal/orgs",
        "repos_url": "https://api.github.com/users/etsal/repos",
        "events_url": "https://api.github.com/users/etsal/events{/privacy}",
        "received_events_url": "https://api.github.com/users/etsal/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/etsal/aurora/commits/b39d3e6df4a3e460bb38467081fe779f298154f9",
          "html_url": "https://github.com/etsal/aurora/commit/b39d3e6df4a3e460bb38467081fe779f298154f9",
          "sha": "b39d3e6df4a3e460bb38467081fe779f298154f9"
        }
      ],
      "repository": {
        "id": 488784596,
        "node_id": "R_kgDOHSJC1A",
        "name": "aurora",
        "full_name": "etsal/aurora",
        "private": false,
        "owner": {
          "login": "etsal",
          "id": 6106600,
          "node_id": "MDQ6VXNlcjYxMDY2MDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6106600?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/etsal",
          "html_url": "https://github.com/etsal",
          "followers_url": "https://api.github.com/users/etsal/followers",
          "following_url": "https://api.github.com/users/etsal/following{/other_user}",
          "gists_url": "https://api.github.com/users/etsal/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/etsal/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/etsal/subscriptions",
          "organizations_url": "https://api.github.com/users/etsal/orgs",
          "repos_url": "https://api.github.com/users/etsal/repos",
          "events_url": "https://api.github.com/users/etsal/events{/privacy}",
          "received_events_url": "https://api.github.com/users/etsal/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/etsal/aurora",
        "description": "Single level store for persistence, application introspection, and more",
        "fork": false,
        "url": "https://api.github.com/repos/etsal/aurora",
        "forks_url": "https://api.github.com/repos/etsal/aurora/forks",
        "keys_url": "https://api.github.com/repos/etsal/aurora/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/etsal/aurora/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/etsal/aurora/teams",
        "hooks_url": "https://api.github.com/repos/etsal/aurora/hooks",
        "issue_events_url": "https://api.github.com/repos/etsal/aurora/issues/events{/number}",
        "events_url": "https://api.github.com/repos/etsal/aurora/events",
        "assignees_url": "https://api.github.com/repos/etsal/aurora/assignees{/user}",
        "branches_url": "https://api.github.com/repos/etsal/aurora/branches{/branch}",
        "tags_url": "https://api.github.com/repos/etsal/aurora/tags",
        "blobs_url": "https://api.github.com/repos/etsal/aurora/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/etsal/aurora/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/etsal/aurora/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/etsal/aurora/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/etsal/aurora/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/etsal/aurora/languages",
        "stargazers_url": "https://api.github.com/repos/etsal/aurora/stargazers",
        "contributors_url": "https://api.github.com/repos/etsal/aurora/contributors",
        "subscribers_url": "https://api.github.com/repos/etsal/aurora/subscribers",
        "subscription_url": "https://api.github.com/repos/etsal/aurora/subscription",
        "commits_url": "https://api.github.com/repos/etsal/aurora/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/etsal/aurora/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/etsal/aurora/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/etsal/aurora/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/etsal/aurora/contents/{+path}",
        "compare_url": "https://api.github.com/repos/etsal/aurora/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/etsal/aurora/merges",
        "archive_url": "https://api.github.com/repos/etsal/aurora/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/etsal/aurora/downloads",
        "issues_url": "https://api.github.com/repos/etsal/aurora/issues{/number}",
        "pulls_url": "https://api.github.com/repos/etsal/aurora/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/etsal/aurora/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/etsal/aurora/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/etsal/aurora/labels{/name}",
        "releases_url": "https://api.github.com/repos/etsal/aurora/releases{/id}",
        "deployments_url": "https://api.github.com/repos/etsal/aurora/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/scala/scala/commits/acb82360336c0993ea604685afd5f61c2fcefd05",
      "sha": "acb82360336c0993ea604685afd5f61c2fcefd05",
      "node_id": "MDY6Q29tbWl0Mjg4ODgxODphY2I4MjM2MDMzNmMwOTkzZWE2MDQ2ODVhZmQ1ZjYxYzJmY2VmZDA1",
      "html_url": "https://github.com/scala/scala/commit/acb82360336c0993ea604685afd5f61c2fcefd05",
      "comments_url": "https://api.github.com/repos/scala/scala/commits/acb82360336c0993ea604685afd5f61c2fcefd05/comments",
      "commit": {
        "url": "https://api.github.com/repos/scala/scala/git/commits/acb82360336c0993ea604685afd5f61c2fcefd05",
        "author": {
          "date": "2017-02-25T20:32:24.000+01:00",
          "name": "jvican",
          "email": "jorgevc@fastmail.es"
        },
        "committer": {
          "date": "2017-02-26T14:00:53.000+01:00",
          "name": "jvican",
          "email": "jorgevc@fastmail.es"
        },
        "message": "Fix #174: Register names for types and symbols\n\nThe following commit fixes the issues with as seen from that are\nexplained in this fantastic issue by Greg: #174, as well as #239 that\nhandles structural types.\n\nThese issues are related to the fact that our previous approach was only\ninspecting types, when some type information like type bounds is only\npresent in symbols. To get that information, we need a more precise\nsearch that looks into the core of the Scalac types for the required\ninformation.\n\nOf course, type bounds is not all we're interested about. The issue is\nthat type members, method parameters and type parameters can have type\ninformation in its definition that is necessary at the use site to\ndetect and propagate changes. This information is also tied to the fact\nthat type members can have different materializations depending on the\nprefix (both because of type members and path-dependent types).\n\n`types-in-used-names-b` and `as-seen-from-b` are a perfect example of\nthis. This commit turns them into passing tests.\n\nHaving more in-depth look at the algorithm behind it will help us\nunderstand what it does. In essence, the new type traverser is the\nresponsible of adding dependencies on every `TypeRef` and `SingleType`.\nThey contain concrete information about types (they are materialized),\nso their presence must be recorded.\n\nWe also have the presence of other types like `PolyType` and\n`MethodType`. These types are used for defining type parameters for\nclasses (think List[A]) and method type parameters (think def foo[T](t:\nT)). They are nested, meaning that their return type can also be a\n`PolyType` or a `MethodType`. To handle them, we traverse the symbols in\ntheir definition -- for method types we traverse the types of the\nparameters, while for poly types we add directly the dependency on the\nsymbol --so that the name of the type parameters are also recorded-- and\nthen we continue checking for their information if they are not a class,\nthat is, if they are an abstract type with a definition that we may need\nto traverse (existential type, refined type, bounds, etc).\n\nIn the case of `TypeBounds`, we traverse them if they are not the\ndefault specified by the SLS (`Nothing` for low bound, `Any` for high).\n\nRefined types need special handling since we need to check their\ndeclarations, that can introduce new type members or vals. If they do\nhave them, we add a dependency right away on those definitions.\n\nAs usual, `ThisType` and `ConstantType` need to be inspected by checking\ntheir underlying representation (`C` in `C.this` and `12` in `Int(12)`).\n\n`ExistentialType`, the last type on the traverser before falling back to\n`mapOver`, has a list of symbols called `quantified` that needs to be\ntraversed since they are the symbol information that constrain the\nexistential type. As in the case of `TypeBounds`, we guard against the\ndefault types `Nothing` for low bound and `Any` for high bound, so that\nunnecessary names that are always present in source files don't appear.\n\nThis change triggers a very weird behaviour in 2.10, in which for some\nreason the names `Nothing` and `Any` appear. This does not seem to come\nfrom the new TypeDependencyTraverser and I've been able to track its\nappearance to the case in the traverser where we check for `hasSymbol`\nand add with `addSymbol`. I've added a TODO, which is not urgent, to\nfind out what's happening, since this only affect one concrete snippet\nof the whole test code.\n\nBenchmark:\n\n```\n[info] # Run complete. Total time: 00:25:51\n[info]\n[info] Benchmark                                                            (_tempDir)    Mode  Cnt           Score            Error   Units\n[info] HotScalacBenchmark.compile                                    /tmp/sbt_abdb5ed2  sample   18       20893.226 ±        625.622   ms/op\n[info] HotScalacBenchmark.compile:compile·p0.00                      /tmp/sbt_abdb5ed2  sample            19797.115                    ms/op\n[info] HotScalacBenchmark.compile:compile·p0.50                      /tmp/sbt_abdb5ed2  sample            21005.074                    ms/op\n[info] HotScalacBenchmark.compile:compile·p0.90                      /tmp/sbt_abdb5ed2  sample            21894.267                    ms/op\n[info] HotScalacBenchmark.compile:compile·p0.95                      /tmp/sbt_abdb5ed2  sample            22045.262                    ms/op\n[info] HotScalacBenchmark.compile:compile·p0.99                      /tmp/sbt_abdb5ed2  sample            22045.262                    ms/op\n[info] HotScalacBenchmark.compile:compile·p0.999                     /tmp/sbt_abdb5ed2  sample            22045.262                    ms/op\n[info] HotScalacBenchmark.compile:compile·p0.9999                    /tmp/sbt_abdb5ed2  sample            22045.262                    ms/op\n[info] HotScalacBenchmark.compile:compile·p1.00                      /tmp/sbt_abdb5ed2  sample            22045.262                    ms/op\n[info] HotScalacBenchmark.compile:·gc.alloc.rate                     /tmp/sbt_abdb5ed2  sample   18         289.838 ±          8.669  MB/sec\n[info] HotScalacBenchmark.compile:·gc.alloc.rate.norm                /tmp/sbt_abdb5ed2  sample   18  6500730176.000 ±   13633760.029    B/op\n[info] HotScalacBenchmark.compile:·gc.churn.PS_Eden_Space            /tmp/sbt_abdb5ed2  sample   18         289.082 ±         24.260  MB/sec\n[info] HotScalacBenchmark.compile:·gc.churn.PS_Eden_Space.norm       /tmp/sbt_abdb5ed2  sample   18  6480403569.778 ±  464987965.594    B/op\n[info] HotScalacBenchmark.compile:·gc.churn.PS_Old_Gen               /tmp/sbt_abdb5ed2  sample   18          12.679 ±         12.697  MB/sec\n[info] HotScalacBenchmark.compile:·gc.churn.PS_Old_Gen.norm          /tmp/sbt_abdb5ed2  sample   18   290767194.667 ±  290528363.065    B/op\n[info] HotScalacBenchmark.compile:·gc.churn.PS_Survivor_Space        /tmp/sbt_abdb5ed2  sample   18           7.321 ±          2.865  MB/sec\n[info] HotScalacBenchmark.compile:·gc.churn.PS_Survivor_Space.norm   /tmp/sbt_abdb5ed2  sample   18   165547052.444 ±   66661097.019    B/op\n[info] HotScalacBenchmark.compile:·gc.count                          /tmp/sbt_abdb5ed2  sample   18         101.000                   counts\n[info] HotScalacBenchmark.compile:·gc.time                           /tmp/sbt_abdb5ed2  sample   18       21332.000                       ms\n[info] WarmScalacBenchmark.compile                                   /tmp/sbt_abdb5ed2  sample    3       52769.937 ±       6743.004   ms/op\n[info] WarmScalacBenchmark.compile:compile·p0.00                     /tmp/sbt_abdb5ed2  sample            52412.023                    ms/op\n[info] WarmScalacBenchmark.compile:compile·p0.50                     /tmp/sbt_abdb5ed2  sample            52747.567                    ms/op\n[info] WarmScalacBenchmark.compile:compile·p0.90                     /tmp/sbt_abdb5ed2  sample            53150.220                    ms/op\n[info] WarmScalacBenchmark.compile:compile·p0.95                     /tmp/sbt_abdb5ed2  sample            53150.220                    ms/op\n[info] WarmScalacBenchmark.compile:compile·p0.99                     /tmp/sbt_abdb5ed2  sample            53150.220                    ms/op\n[info] WarmScalacBenchmark.compile:compile·p0.999                    /tmp/sbt_abdb5ed2  sample            53150.220                    ms/op\n[info] WarmScalacBenchmark.compile:compile·p0.9999                   /tmp/sbt_abdb5ed2  sample            53150.220                    ms/op\n[info] WarmScalacBenchmark.compile:compile·p1.00                     /tmp/sbt_abdb5ed2  sample            53150.220                    ms/op\n[info] WarmScalacBenchmark.compile:·gc.alloc.rate                    /tmp/sbt_abdb5ed2  sample    3         125.382 ±         13.840  MB/sec\n[info] WarmScalacBenchmark.compile:·gc.alloc.rate.norm               /tmp/sbt_abdb5ed2  sample    3  7055970890.667 ± 1078954896.900    B/op\n[info] WarmScalacBenchmark.compile:·gc.churn.PS_Eden_Space           /tmp/sbt_abdb5ed2  sample    3         117.215 ±         73.864  MB/sec\n[info] WarmScalacBenchmark.compile:·gc.churn.PS_Eden_Space.norm      /tmp/sbt_abdb5ed2  sample    3  6596470733.333 ± 4281843293.325    B/op\n[info] WarmScalacBenchmark.compile:·gc.churn.PS_Survivor_Space       /tmp/sbt_abdb5ed2  sample    3           2.279 ±          1.015  MB/sec\n[info] WarmScalacBenchmark.compile:·gc.churn.PS_Survivor_Space.norm  /tmp/sbt_abdb5ed2  sample    3   128269752.000 ±   72721263.065    B/op\n[info] WarmScalacBenchmark.compile:·gc.count                         /tmp/sbt_abdb5ed2  sample    3          73.000                   counts\n[info] WarmScalacBenchmark.compile:·gc.time                          /tmp/sbt_abdb5ed2  sample    3        8746.000                       ms\n[info] ColdScalacBenchmark.compile                                   /tmp/sbt_abdb5ed2      ss   10       44611.286 ±        963.131   ms/op\n[info] ColdScalacBenchmark.compile:·gc.alloc.rate                    /tmp/sbt_abdb5ed2      ss   10         152.054 ±          2.753  MB/sec\n[info] ColdScalacBenchmark.compile:·gc.alloc.rate.norm               /tmp/sbt_abdb5ed2      ss   10  7249761568.800 ±   95126804.264    B/op\n[info] ColdScalacBenchmark.compile:·gc.churn.PS_Eden_Space           /tmp/sbt_abdb5ed2      ss   10         144.481 ±          9.964  MB/sec\n[info] ColdScalacBenchmark.compile:·gc.churn.PS_Eden_Space.norm      /tmp/sbt_abdb5ed2      ss   10  6889406191.200 ±  490961958.245    B/op\n[info] ColdScalacBenchmark.compile:·gc.churn.PS_Old_Gen              /tmp/sbt_abdb5ed2      ss   10          ≈ 10⁻³                   MB/sec\n[info] ColdScalacBenchmark.compile:·gc.churn.PS_Old_Gen.norm         /tmp/sbt_abdb5ed2      ss   10       21136.000 ±     101049.368    B/op\n[info] ColdScalacBenchmark.compile:·gc.churn.PS_Survivor_Space       /tmp/sbt_abdb5ed2      ss   10           2.848 ±          0.335  MB/sec\n[info] ColdScalacBenchmark.compile:·gc.churn.PS_Survivor_Space.norm  /tmp/sbt_abdb5ed2      ss   10   135792956.800 ±   16291050.509    B/op\n[info] ColdScalacBenchmark.compile:·gc.count                         /tmp/sbt_abdb5ed2      ss   10         248.000                   counts\n[info] ColdScalacBenchmark.compile:·gc.time                          /tmp/sbt_abdb5ed2      ss   10       29901.000                       ms\n[success] Total time: 1553 s, completed Feb 26, 2017 3:06:29 AM\n[success] Total time: 0 s, completed Feb 26, 2017 3:06:29 AM\n```\n\nRewritten from sbt/zinc@929b7589bbf02140b17de04106b7162eebc5db21",
        "tree": {
          "url": "https://api.github.com/repos/scala/scala/git/trees/b7f351ccf8768003d79b618f632af73e688daf23",
          "sha": "b7f351ccf8768003d79b618f632af73e688daf23"
        },
        "comment_count": 0
      },
      "author": {
        "login": "jvican",
        "id": 2462974,
        "node_id": "MDQ6VXNlcjI0NjI5NzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2462974?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jvican",
        "html_url": "https://github.com/jvican",
        "followers_url": "https://api.github.com/users/jvican/followers",
        "following_url": "https://api.github.com/users/jvican/following{/other_user}",
        "gists_url": "https://api.github.com/users/jvican/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jvican/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jvican/subscriptions",
        "organizations_url": "https://api.github.com/users/jvican/orgs",
        "repos_url": "https://api.github.com/users/jvican/repos",
        "events_url": "https://api.github.com/users/jvican/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jvican/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "jvican",
        "id": 2462974,
        "node_id": "MDQ6VXNlcjI0NjI5NzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2462974?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jvican",
        "html_url": "https://github.com/jvican",
        "followers_url": "https://api.github.com/users/jvican/followers",
        "following_url": "https://api.github.com/users/jvican/following{/other_user}",
        "gists_url": "https://api.github.com/users/jvican/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jvican/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jvican/subscriptions",
        "organizations_url": "https://api.github.com/users/jvican/orgs",
        "repos_url": "https://api.github.com/users/jvican/repos",
        "events_url": "https://api.github.com/users/jvican/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jvican/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/scala/scala/commits/57d2439d88388388bd1ecf7bbc5e8f2bcff6d814",
          "html_url": "https://github.com/scala/scala/commit/57d2439d88388388bd1ecf7bbc5e8f2bcff6d814",
          "sha": "57d2439d88388388bd1ecf7bbc5e8f2bcff6d814"
        }
      ],
      "repository": {
        "id": 2888818,
        "node_id": "MDEwOlJlcG9zaXRvcnkyODg4ODE4",
        "name": "scala",
        "full_name": "scala/scala",
        "private": false,
        "owner": {
          "login": "scala",
          "id": 57059,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjU3MDU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/57059?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/scala",
          "html_url": "https://github.com/scala",
          "followers_url": "https://api.github.com/users/scala/followers",
          "following_url": "https://api.github.com/users/scala/following{/other_user}",
          "gists_url": "https://api.github.com/users/scala/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/scala/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/scala/subscriptions",
          "organizations_url": "https://api.github.com/users/scala/orgs",
          "repos_url": "https://api.github.com/users/scala/repos",
          "events_url": "https://api.github.com/users/scala/events{/privacy}",
          "received_events_url": "https://api.github.com/users/scala/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/scala/scala",
        "description": "Scala 2 compiler and standard library. Scala 2 bugs at https://github.com/scala/bug; Scala 3 at https://github.com/scala/scala3",
        "fork": false,
        "url": "https://api.github.com/repos/scala/scala",
        "forks_url": "https://api.github.com/repos/scala/scala/forks",
        "keys_url": "https://api.github.com/repos/scala/scala/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/scala/scala/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/scala/scala/teams",
        "hooks_url": "https://api.github.com/repos/scala/scala/hooks",
        "issue_events_url": "https://api.github.com/repos/scala/scala/issues/events{/number}",
        "events_url": "https://api.github.com/repos/scala/scala/events",
        "assignees_url": "https://api.github.com/repos/scala/scala/assignees{/user}",
        "branches_url": "https://api.github.com/repos/scala/scala/branches{/branch}",
        "tags_url": "https://api.github.com/repos/scala/scala/tags",
        "blobs_url": "https://api.github.com/repos/scala/scala/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/scala/scala/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/scala/scala/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/scala/scala/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/scala/scala/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/scala/scala/languages",
        "stargazers_url": "https://api.github.com/repos/scala/scala/stargazers",
        "contributors_url": "https://api.github.com/repos/scala/scala/contributors",
        "subscribers_url": "https://api.github.com/repos/scala/scala/subscribers",
        "subscription_url": "https://api.github.com/repos/scala/scala/subscription",
        "commits_url": "https://api.github.com/repos/scala/scala/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/scala/scala/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/scala/scala/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/scala/scala/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/scala/scala/contents/{+path}",
        "compare_url": "https://api.github.com/repos/scala/scala/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/scala/scala/merges",
        "archive_url": "https://api.github.com/repos/scala/scala/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/scala/scala/downloads",
        "issues_url": "https://api.github.com/repos/scala/scala/issues{/number}",
        "pulls_url": "https://api.github.com/repos/scala/scala/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/scala/scala/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/scala/scala/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/scala/scala/labels{/name}",
        "releases_url": "https://api.github.com/repos/scala/scala/releases{/id}",
        "deployments_url": "https://api.github.com/repos/scala/scala/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/sbt/zinc/commits/929b7589bbf02140b17de04106b7162eebc5db21",
      "sha": "929b7589bbf02140b17de04106b7162eebc5db21",
      "node_id": "MDY6Q29tbWl0NDAyMTAyNDc6OTI5Yjc1ODliYmYwMjE0MGIxN2RlMDQxMDZiNzE2MmVlYmM1ZGIyMQ==",
      "html_url": "https://github.com/sbt/zinc/commit/929b7589bbf02140b17de04106b7162eebc5db21",
      "comments_url": "https://api.github.com/repos/sbt/zinc/commits/929b7589bbf02140b17de04106b7162eebc5db21/comments",
      "commit": {
        "url": "https://api.github.com/repos/sbt/zinc/git/commits/929b7589bbf02140b17de04106b7162eebc5db21",
        "author": {
          "date": "2017-02-25T20:32:24.000+01:00",
          "name": "jvican",
          "email": "jorgevc@fastmail.es"
        },
        "committer": {
          "date": "2017-02-26T14:00:53.000+01:00",
          "name": "jvican",
          "email": "jorgevc@fastmail.es"
        },
        "message": "Fix #174: Register names for types and symbols\n\nThe following commit fixes the issues with as seen from that are\nexplained in this fantastic issue by Greg: #174, as well as #239 that\nhandles structural types.\n\nThese issues are related to the fact that our previous approach was only\ninspecting types, when some type information like type bounds is only\npresent in symbols. To get that information, we need a more precise\nsearch that looks into the core of the Scalac types for the required\ninformation.\n\nOf course, type bounds is not all we're interested about. The issue is\nthat type members, method parameters and type parameters can have type\ninformation in its definition that is necessary at the use site to\ndetect and propagate changes. This information is also tied to the fact\nthat type members can have different materializations depending on the\nprefix (both because of type members and path-dependent types).\n\n`types-in-used-names-b` and `as-seen-from-b` are a perfect example of\nthis. This commit turns them into passing tests.\n\nHaving more in-depth look at the algorithm behind it will help us\nunderstand what it does. In essence, the new type traverser is the\nresponsible of adding dependencies on every `TypeRef` and `SingleType`.\nThey contain concrete information about types (they are materialized),\nso their presence must be recorded.\n\nWe also have the presence of other types like `PolyType` and\n`MethodType`. These types are used for defining type parameters for\nclasses (think List[A]) and method type parameters (think def foo[T](t:\nT)). They are nested, meaning that their return type can also be a\n`PolyType` or a `MethodType`. To handle them, we traverse the symbols in\ntheir definition -- for method types we traverse the types of the\nparameters, while for poly types we add directly the dependency on the\nsymbol --so that the name of the type parameters are also recorded-- and\nthen we continue checking for their information if they are not a class,\nthat is, if they are an abstract type with a definition that we may need\nto traverse (existential type, refined type, bounds, etc).\n\nIn the case of `TypeBounds`, we traverse them if they are not the\ndefault specified by the SLS (`Nothing` for low bound, `Any` for high).\n\nRefined types need special handling since we need to check their\ndeclarations, that can introduce new type members or vals. If they do\nhave them, we add a dependency right away on those definitions.\n\nAs usual, `ThisType` and `ConstantType` need to be inspected by checking\ntheir underlying representation (`C` in `C.this` and `12` in `Int(12)`).\n\n`ExistentialType`, the last type on the traverser before falling back to\n`mapOver`, has a list of symbols called `quantified` that needs to be\ntraversed since they are the symbol information that constrain the\nexistential type. As in the case of `TypeBounds`, we guard against the\ndefault types `Nothing` for low bound and `Any` for high bound, so that\nunnecessary names that are always present in source files don't appear.\n\nThis change triggers a very weird behaviour in 2.10, in which for some\nreason the names `Nothing` and `Any` appear. This does not seem to come\nfrom the new TypeDependencyTraverser and I've been able to track its\nappearance to the case in the traverser where we check for `hasSymbol`\nand add with `addSymbol`. I've added a TODO, which is not urgent, to\nfind out what's happening, since this only affect one concrete snippet\nof the whole test code.\n\nBenchmark:\n\n```\n[info] # Run complete. Total time: 00:25:51\n[info]\n[info] Benchmark                                                            (_tempDir)    Mode  Cnt           Score            Error   Units\n[info] HotScalacBenchmark.compile                                    /tmp/sbt_abdb5ed2  sample   18       20893.226 ±        625.622   ms/op\n[info] HotScalacBenchmark.compile:compile·p0.00                      /tmp/sbt_abdb5ed2  sample            19797.115                    ms/op\n[info] HotScalacBenchmark.compile:compile·p0.50                      /tmp/sbt_abdb5ed2  sample            21005.074                    ms/op\n[info] HotScalacBenchmark.compile:compile·p0.90                      /tmp/sbt_abdb5ed2  sample            21894.267                    ms/op\n[info] HotScalacBenchmark.compile:compile·p0.95                      /tmp/sbt_abdb5ed2  sample            22045.262                    ms/op\n[info] HotScalacBenchmark.compile:compile·p0.99                      /tmp/sbt_abdb5ed2  sample            22045.262                    ms/op\n[info] HotScalacBenchmark.compile:compile·p0.999                     /tmp/sbt_abdb5ed2  sample            22045.262                    ms/op\n[info] HotScalacBenchmark.compile:compile·p0.9999                    /tmp/sbt_abdb5ed2  sample            22045.262                    ms/op\n[info] HotScalacBenchmark.compile:compile·p1.00                      /tmp/sbt_abdb5ed2  sample            22045.262                    ms/op\n[info] HotScalacBenchmark.compile:·gc.alloc.rate                     /tmp/sbt_abdb5ed2  sample   18         289.838 ±          8.669  MB/sec\n[info] HotScalacBenchmark.compile:·gc.alloc.rate.norm                /tmp/sbt_abdb5ed2  sample   18  6500730176.000 ±   13633760.029    B/op\n[info] HotScalacBenchmark.compile:·gc.churn.PS_Eden_Space            /tmp/sbt_abdb5ed2  sample   18         289.082 ±         24.260  MB/sec\n[info] HotScalacBenchmark.compile:·gc.churn.PS_Eden_Space.norm       /tmp/sbt_abdb5ed2  sample   18  6480403569.778 ±  464987965.594    B/op\n[info] HotScalacBenchmark.compile:·gc.churn.PS_Old_Gen               /tmp/sbt_abdb5ed2  sample   18          12.679 ±         12.697  MB/sec\n[info] HotScalacBenchmark.compile:·gc.churn.PS_Old_Gen.norm          /tmp/sbt_abdb5ed2  sample   18   290767194.667 ±  290528363.065    B/op\n[info] HotScalacBenchmark.compile:·gc.churn.PS_Survivor_Space        /tmp/sbt_abdb5ed2  sample   18           7.321 ±          2.865  MB/sec\n[info] HotScalacBenchmark.compile:·gc.churn.PS_Survivor_Space.norm   /tmp/sbt_abdb5ed2  sample   18   165547052.444 ±   66661097.019    B/op\n[info] HotScalacBenchmark.compile:·gc.count                          /tmp/sbt_abdb5ed2  sample   18         101.000                   counts\n[info] HotScalacBenchmark.compile:·gc.time                           /tmp/sbt_abdb5ed2  sample   18       21332.000                       ms\n[info] WarmScalacBenchmark.compile                                   /tmp/sbt_abdb5ed2  sample    3       52769.937 ±       6743.004   ms/op\n[info] WarmScalacBenchmark.compile:compile·p0.00                     /tmp/sbt_abdb5ed2  sample            52412.023                    ms/op\n[info] WarmScalacBenchmark.compile:compile·p0.50                     /tmp/sbt_abdb5ed2  sample            52747.567                    ms/op\n[info] WarmScalacBenchmark.compile:compile·p0.90                     /tmp/sbt_abdb5ed2  sample            53150.220                    ms/op\n[info] WarmScalacBenchmark.compile:compile·p0.95                     /tmp/sbt_abdb5ed2  sample            53150.220                    ms/op\n[info] WarmScalacBenchmark.compile:compile·p0.99                     /tmp/sbt_abdb5ed2  sample            53150.220                    ms/op\n[info] WarmScalacBenchmark.compile:compile·p0.999                    /tmp/sbt_abdb5ed2  sample            53150.220                    ms/op\n[info] WarmScalacBenchmark.compile:compile·p0.9999                   /tmp/sbt_abdb5ed2  sample            53150.220                    ms/op\n[info] WarmScalacBenchmark.compile:compile·p1.00                     /tmp/sbt_abdb5ed2  sample            53150.220                    ms/op\n[info] WarmScalacBenchmark.compile:·gc.alloc.rate                    /tmp/sbt_abdb5ed2  sample    3         125.382 ±         13.840  MB/sec\n[info] WarmScalacBenchmark.compile:·gc.alloc.rate.norm               /tmp/sbt_abdb5ed2  sample    3  7055970890.667 ± 1078954896.900    B/op\n[info] WarmScalacBenchmark.compile:·gc.churn.PS_Eden_Space           /tmp/sbt_abdb5ed2  sample    3         117.215 ±         73.864  MB/sec\n[info] WarmScalacBenchmark.compile:·gc.churn.PS_Eden_Space.norm      /tmp/sbt_abdb5ed2  sample    3  6596470733.333 ± 4281843293.325    B/op\n[info] WarmScalacBenchmark.compile:·gc.churn.PS_Survivor_Space       /tmp/sbt_abdb5ed2  sample    3           2.279 ±          1.015  MB/sec\n[info] WarmScalacBenchmark.compile:·gc.churn.PS_Survivor_Space.norm  /tmp/sbt_abdb5ed2  sample    3   128269752.000 ±   72721263.065    B/op\n[info] WarmScalacBenchmark.compile:·gc.count                         /tmp/sbt_abdb5ed2  sample    3          73.000                   counts\n[info] WarmScalacBenchmark.compile:·gc.time                          /tmp/sbt_abdb5ed2  sample    3        8746.000                       ms\n[info] ColdScalacBenchmark.compile                                   /tmp/sbt_abdb5ed2      ss   10       44611.286 ±        963.131   ms/op\n[info] ColdScalacBenchmark.compile:·gc.alloc.rate                    /tmp/sbt_abdb5ed2      ss   10         152.054 ±          2.753  MB/sec\n[info] ColdScalacBenchmark.compile:·gc.alloc.rate.norm               /tmp/sbt_abdb5ed2      ss   10  7249761568.800 ±   95126804.264    B/op\n[info] ColdScalacBenchmark.compile:·gc.churn.PS_Eden_Space           /tmp/sbt_abdb5ed2      ss   10         144.481 ±          9.964  MB/sec\n[info] ColdScalacBenchmark.compile:·gc.churn.PS_Eden_Space.norm      /tmp/sbt_abdb5ed2      ss   10  6889406191.200 ±  490961958.245    B/op\n[info] ColdScalacBenchmark.compile:·gc.churn.PS_Old_Gen              /tmp/sbt_abdb5ed2      ss   10          ≈ 10⁻³                   MB/sec\n[info] ColdScalacBenchmark.compile:·gc.churn.PS_Old_Gen.norm         /tmp/sbt_abdb5ed2      ss   10       21136.000 ±     101049.368    B/op\n[info] ColdScalacBenchmark.compile:·gc.churn.PS_Survivor_Space       /tmp/sbt_abdb5ed2      ss   10           2.848 ±          0.335  MB/sec\n[info] ColdScalacBenchmark.compile:·gc.churn.PS_Survivor_Space.norm  /tmp/sbt_abdb5ed2      ss   10   135792956.800 ±   16291050.509    B/op\n[info] ColdScalacBenchmark.compile:·gc.count                         /tmp/sbt_abdb5ed2      ss   10         248.000                   counts\n[info] ColdScalacBenchmark.compile:·gc.time                          /tmp/sbt_abdb5ed2      ss   10       29901.000                       ms\n[success] Total time: 1553 s, completed Feb 26, 2017 3:06:29 AM\n[success] Total time: 0 s, completed Feb 26, 2017 3:06:29 AM\n```",
        "tree": {
          "url": "https://api.github.com/repos/sbt/zinc/git/trees/1a540e7a9e23de2ee1e562be2dc5de12242bdc88",
          "sha": "1a540e7a9e23de2ee1e562be2dc5de12242bdc88"
        },
        "comment_count": 0
      },
      "author": {
        "login": "jvican",
        "id": 2462974,
        "node_id": "MDQ6VXNlcjI0NjI5NzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2462974?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jvican",
        "html_url": "https://github.com/jvican",
        "followers_url": "https://api.github.com/users/jvican/followers",
        "following_url": "https://api.github.com/users/jvican/following{/other_user}",
        "gists_url": "https://api.github.com/users/jvican/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jvican/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jvican/subscriptions",
        "organizations_url": "https://api.github.com/users/jvican/orgs",
        "repos_url": "https://api.github.com/users/jvican/repos",
        "events_url": "https://api.github.com/users/jvican/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jvican/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "jvican",
        "id": 2462974,
        "node_id": "MDQ6VXNlcjI0NjI5NzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2462974?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jvican",
        "html_url": "https://github.com/jvican",
        "followers_url": "https://api.github.com/users/jvican/followers",
        "following_url": "https://api.github.com/users/jvican/following{/other_user}",
        "gists_url": "https://api.github.com/users/jvican/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jvican/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jvican/subscriptions",
        "organizations_url": "https://api.github.com/users/jvican/orgs",
        "repos_url": "https://api.github.com/users/jvican/repos",
        "events_url": "https://api.github.com/users/jvican/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jvican/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/sbt/zinc/commits/83bcf506268bbcb2862906c4f04d63557a1fc1fe",
          "html_url": "https://github.com/sbt/zinc/commit/83bcf506268bbcb2862906c4f04d63557a1fc1fe",
          "sha": "83bcf506268bbcb2862906c4f04d63557a1fc1fe"
        }
      ],
      "repository": {
        "id": 40210247,
        "node_id": "MDEwOlJlcG9zaXRvcnk0MDIxMDI0Nw==",
        "name": "zinc",
        "full_name": "sbt/zinc",
        "private": false,
        "owner": {
          "login": "sbt",
          "id": 1158012,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjExNTgwMTI=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1158012?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sbt",
          "html_url": "https://github.com/sbt",
          "followers_url": "https://api.github.com/users/sbt/followers",
          "following_url": "https://api.github.com/users/sbt/following{/other_user}",
          "gists_url": "https://api.github.com/users/sbt/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sbt/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sbt/subscriptions",
          "organizations_url": "https://api.github.com/users/sbt/orgs",
          "repos_url": "https://api.github.com/users/sbt/repos",
          "events_url": "https://api.github.com/users/sbt/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sbt/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/sbt/zinc",
        "description": "Scala incremental compiler library, used by sbt and other build tools",
        "fork": false,
        "url": "https://api.github.com/repos/sbt/zinc",
        "forks_url": "https://api.github.com/repos/sbt/zinc/forks",
        "keys_url": "https://api.github.com/repos/sbt/zinc/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/sbt/zinc/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/sbt/zinc/teams",
        "hooks_url": "https://api.github.com/repos/sbt/zinc/hooks",
        "issue_events_url": "https://api.github.com/repos/sbt/zinc/issues/events{/number}",
        "events_url": "https://api.github.com/repos/sbt/zinc/events",
        "assignees_url": "https://api.github.com/repos/sbt/zinc/assignees{/user}",
        "branches_url": "https://api.github.com/repos/sbt/zinc/branches{/branch}",
        "tags_url": "https://api.github.com/repos/sbt/zinc/tags",
        "blobs_url": "https://api.github.com/repos/sbt/zinc/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/sbt/zinc/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/sbt/zinc/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/sbt/zinc/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/sbt/zinc/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/sbt/zinc/languages",
        "stargazers_url": "https://api.github.com/repos/sbt/zinc/stargazers",
        "contributors_url": "https://api.github.com/repos/sbt/zinc/contributors",
        "subscribers_url": "https://api.github.com/repos/sbt/zinc/subscribers",
        "subscription_url": "https://api.github.com/repos/sbt/zinc/subscription",
        "commits_url": "https://api.github.com/repos/sbt/zinc/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/sbt/zinc/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/sbt/zinc/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/sbt/zinc/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/sbt/zinc/contents/{+path}",
        "compare_url": "https://api.github.com/repos/sbt/zinc/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/sbt/zinc/merges",
        "archive_url": "https://api.github.com/repos/sbt/zinc/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/sbt/zinc/downloads",
        "issues_url": "https://api.github.com/repos/sbt/zinc/issues{/number}",
        "pulls_url": "https://api.github.com/repos/sbt/zinc/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/sbt/zinc/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/sbt/zinc/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/sbt/zinc/labels{/name}",
        "releases_url": "https://api.github.com/repos/sbt/zinc/releases{/id}",
        "deployments_url": "https://api.github.com/repos/sbt/zinc/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/commits/045a979f4d0d559a5d061b8fba9ac0f0a687ff42",
      "sha": "045a979f4d0d559a5d061b8fba9ac0f0a687ff42",
      "node_id": "MDY6Q29tbWl0MzMxODc2NDIwOjA0NWE5NzlmNGQwZDU1OWE1ZDA2MWI4ZmJhOWFjMGYwYTY4N2ZmNDI=",
      "html_url": "https://github.com/kawamataryo/sandbox-for-nextjs-ssg-csr/commit/045a979f4d0d559a5d061b8fba9ac0f0a687ff42",
      "comments_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/commits/045a979f4d0d559a5d061b8fba9ac0f0a687ff42/comments",
      "commit": {
        "url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/git/commits/045a979f4d0d559a5d061b8fba9ac0f0a687ff42",
        "author": {
          "date": "2021-01-24T05:48:44.000+09:00",
          "name": "kawamataryou",
          "email": "ba068082@gmail.com"
        },
        "committer": {
          "date": "2021-01-24T05:48:44.000+09:00",
          "name": "kawamataryou",
          "email": "ba068082@gmail.com"
        },
        "message": "[from now] 2021/01/24 05:48:44\n\ndiff --git a/package.json b/package.json\nindex 02d82c0..67e12c6 100644\n--- a/package.json\n+++ b/package.json\n@@ -6,14 +6,17 @@\n     \"dev\": \"next\",\n     \"build\": \"next build\",\n     \"start\": \"next start\",\n-    \"lint\": \"eslint\"\n+    \"lint\": \"eslint\",\n+    \"deploy\": \"serverless\"\n   },\n   \"dependencies\": {\n+    \"@sls-next/serverless-component\": \"^1.18.0\",\n     \"bulma\": \"^0.9.1\",\n     \"next\": \"10.0.5\",\n     \"node-fetch\": \"^2.6.1\",\n     \"react\": \"17.0.1\",\n     \"react-dom\": \"17.0.1\",\n+    \"serverless\": \"^2.20.1\",\n     \"swr\": \"^0.4.0\"\n   },\n   \"devDependencies\": {\ndiff --git a/yarn.lock b/yarn.lock\nindex 9572e27..bd95ac9 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -2,6 +2,14 @@\n # yarn lockfile v1\n\n+\"2-thenable@^1.0.0\":\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/2-thenable/-/2-thenable-1.0.0.tgz#56e9a2e363293b1e507f501aac1aa9927670b2fc\"\n+  integrity sha512-HqiDzaLDFCXkcCO/SwoyhRwqYtINFHF7t9BDRq4x90TOKNAJpiqUt9X5lQ08bwxYzc067HUywDjGySpebHcUpw==\n+  dependencies:\n+    d \"1\"\n+    es5-ext \"^0.10.47\"\n+\n \"@ampproject/toolbox-core@2.7.4\", \"@ampproject/toolbox-core@^2.7.1-alpha.0\":\n   version \"2.7.4\"\n   resolved \"https://registry.yarnpkg.com/@ampproject/toolbox-core/-/toolbox-core-2.7.4.tgz#8355136f16301458ce942acf6c55952c9a415627\"\n@@ -53,6 +61,654 @@\n   dependencies:\n     cross-fetch \"3.0.6\"\n\n+\"@aws-crypto/crc32@^1.0.0\":\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/@aws-crypto/crc32/-/crc32-1.0.0.tgz#6a0164fd92bb365860ba6afb5dfef449701eb8ca\"\n+  integrity sha512-wr4EyCv3ZfLH3Sg7FErV6e/cLhpk9rUP/l5322y8PRgpQsItdieaLbtE4aDOR+dxl8U7BG9FIwWXH4TleTDZ9A==\n+  dependencies:\n+    tslib \"^1.11.1\"\n+\n+\"@aws-crypto/ie11-detection@^1.0.0\":\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/@aws-crypto/ie11-detection/-/ie11-detection-1.0.0.tgz#d3a6af29ba7f15458f79c41d1cd8cac3925e726a\"\n+  integrity sha512-kCKVhCF1oDxFYgQrxXmIrS5oaWulkvRcPz+QBDMsUr2crbF4VGgGT6+uQhSwJFdUAQ2A//Vq+uT83eJrkzFgXA==\n+  dependencies:\n+    tslib \"^1.11.1\"\n+\n+\"@aws-crypto/sha256-browser@^1.0.0\":\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/@aws-crypto/sha256-browser/-/sha256-browser-1.1.0.tgz#20092cc6c08d8f04db0ed57b6f05cff150384f77\"\n+  integrity sha512-VIpuLRDonMAHgomrsm/zKbeXTnxpr4aHDQmS4pF+NcpvBp64l675yjGA9hyUYs/QJwBjUl8WqMjh9tIRgi85Sg==\n+  dependencies:\n+    \"@aws-crypto/ie11-detection\" \"^1.0.0\"\n+    \"@aws-crypto/sha256-js\" \"^1.1.0\"\n+    \"@aws-crypto/supports-web-crypto\" \"^1.0.0\"\n+    \"@aws-sdk/types\" \"^3.1.0\"\n+    \"@aws-sdk/util-locate-window\" \"^3.0.0\"\n+    \"@aws-sdk/util-utf8-browser\" \"^3.0.0\"\n+    tslib \"^1.11.1\"\n+\n+\"@aws-crypto/sha256-js@^1.0.0\", \"@aws-crypto/sha256-js@^1.1.0\":\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/@aws-crypto/sha256-js/-/sha256-js-1.1.0.tgz#a58386ad18186e392e0f1d98d18831261d27b071\"\n+  integrity sha512-VIhuqbPgXDVr8sZe2yhgQcDRRmzf4CI8fmC1A3bHiRfE6wlz1d8KpeemqbuoEHotz/Dch9yOxlshyQDNjNFeHA==\n+  dependencies:\n+    \"@aws-sdk/types\" \"^3.1.0\"\n+    \"@aws-sdk/util-utf8-browser\" \"^3.0.0\"\n+    tslib \"^1.11.1\"\n+\n+\"@aws-crypto/supports-web-crypto@^1.0.0\":\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/@aws-crypto/supports-web-crypto/-/supports-web-crypto-1.0.0.tgz#c40901bc17ac1e875e248df16a2b47ad8bfd9a93\"\n+  integrity sha512-IHLfv+WmVH89EW4n6a5eE8/hUlz6qkWGMn/v4r5ZgzcXdTC5nolii2z3k46y01hWRiC2PPhOdeSLzMUCUMco7g==\n+  dependencies:\n+    tslib \"^1.11.1\"\n+\n+\"@aws-sdk/abort-controller@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/abort-controller/-/abort-controller-1.0.0-rc.3.tgz#c4cde5f1a1c0d3b6e6c5ddc04a0e423cb8bcc1f1\"\n+  integrity sha512-+os/c2PDtDzaeAMqH3f03EDwMAesxy3O5lFcT2vr43iiQkXRnYwaWFD4QPwDQGzKDjksPKSa6iag4OjzGf0ezA==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/chunked-blob-reader-native@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/chunked-blob-reader-native/-/chunked-blob-reader-native-1.0.0-rc.3.tgz#5a863d61f84ca0ff32e440f4c214e1929af05978\"\n+  integrity sha512-ouuN4cBmwfVPVVQeBhKm18BHkBK/ZVn0VDE4WXVMqu3WjNBxulKYCvJ7mkxi1oWWzp+RGa1TwIQuancB1IHrdA==\n+  dependencies:\n+    \"@aws-sdk/util-base64-browser\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/chunked-blob-reader@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/chunked-blob-reader/-/chunked-blob-reader-1.0.0-rc.3.tgz#f704a8c6133931bbde3ee015936dc136763dd992\"\n+  integrity sha512-d4B6mOYxZqo+y2op5BwEsG0wxewyNhVmyvfdQfhaJowNjhZpQ6vhYkh3umOarLwyC72dNScKBQYLnOsf5chtDg==\n+  dependencies:\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/client-s3@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/client-s3/-/client-s3-1.0.0-rc.3.tgz#88ba3fe10308ffc0fe9bdd334071130ccd43eae7\"\n+  integrity sha512-/IYV2zoGo8SIId0VsJ/lSI6hkP0nSNvibjQtTIOu/E0edoeHtotXtuJ3SLpsuwGGm8mZtMuq1R6W1q0G/o/DrA==\n+  dependencies:\n+    \"@aws-crypto/sha256-browser\" \"^1.0.0\"\n+    \"@aws-crypto/sha256-js\" \"^1.0.0\"\n+    \"@aws-sdk/config-resolver\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/credential-provider-node\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/eventstream-serde-browser\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/eventstream-serde-config-resolver\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/eventstream-serde-node\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/fetch-http-handler\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/hash-blob-browser\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/hash-node\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/hash-stream-node\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/invalid-dependency\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/md5-js\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/middleware-apply-body-checksum\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/middleware-bucket-endpoint\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/middleware-content-length\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/middleware-expect-continue\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/middleware-host-header\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/middleware-location-constraint\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/middleware-logger\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/middleware-retry\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/middleware-sdk-s3\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/middleware-serde\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/middleware-signing\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/middleware-ssec\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/middleware-stack\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/middleware-user-agent\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/node-config-provider\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/node-http-handler\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/protocol-http\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/smithy-client\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/url-parser-browser\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/url-parser-node\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-base64-browser\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-base64-node\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-body-length-browser\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-body-length-node\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-user-agent-browser\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-user-agent-node\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-utf8-browser\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-utf8-node\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/xml-builder\" \"1.0.0-rc.3\"\n+    fast-xml-parser \"^3.16.0\"\n+    tslib \"^2.0.0\"\n+\n+\"@aws-sdk/config-resolver@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/config-resolver/-/config-resolver-1.0.0-rc.3.tgz#0eb877cdabffb75ba3ed89f14e86301faeec12d2\"\n+  integrity sha512-twz204J+R5SFUOWe7VPYoF9yZA3HsMujnZKkm7QTunKUYRrrZcG1x6KeArIpk1mKFlrtm1tcab5BqUDUKgm23A==\n+  dependencies:\n+    \"@aws-sdk/signature-v4\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/credential-provider-env@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/credential-provider-env/-/credential-provider-env-1.0.0-rc.3.tgz#9e7f21d1aa1d54e6a7f3f87626d2a46896ca7294\"\n+  integrity sha512-QG9YUDy1qjghL6MsXIE4wxXuTDeBsNWcXYIMpuvn5bJSVDmcSmXwVFMyCiYvDlN57zbomWaNvYiq9TS50aw0Ng==\n+  dependencies:\n+    \"@aws-sdk/property-provider\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/credential-provider-imds@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/credential-provider-imds/-/credential-provider-imds-1.0.0-rc.3.tgz#d5709e1ef009b7c87387e0c377c8840a7a27b9db\"\n+  integrity sha512-vMRAlXdU4ZUeLGgtXh+MCzyZrdoXA8tJldR5n0glbODAym1Ap6ZQ9Y/apQvaHiMxyTd/PCcPg0cwSmhlnwdhTg==\n+  dependencies:\n+    \"@aws-sdk/property-provider\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/credential-provider-ini@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/credential-provider-ini/-/credential-provider-ini-1.0.0-rc.3.tgz#23301a8cf39b004b4ba866d58469f766b819218e\"\n+  integrity sha512-3/dvnmtnjGSoBn9MSTtO6/Vpd0RxwA1oOeHlFhswr4ZDMI3Nn8almvUhjtC+wkKKSG+ushkEJaDDPy6P+7xqRA==\n+  dependencies:\n+    \"@aws-sdk/property-provider\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/shared-ini-file-loader\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/credential-provider-node@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/credential-provider-node/-/credential-provider-node-1.0.0-rc.3.tgz#9f6ebecec5f1622ed1b9172c9ae43b147dbc75a9\"\n+  integrity sha512-UbtN7dMjyUgYyYKSQLAMmx1aGT9HD00bf0suvn9H4lo5piWuJ/30CoBqIl/l2l+6z0AdK2DcGoF5yuLyJSX0ww==\n+  dependencies:\n+    \"@aws-sdk/credential-provider-env\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/credential-provider-imds\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/credential-provider-ini\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/credential-provider-process\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/property-provider\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/credential-provider-process@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/credential-provider-process/-/credential-provider-process-1.0.0-rc.3.tgz#8752ee9efb696d24c84cbd1da64ed76b93269820\"\n+  integrity sha512-gz98CXgAwtsW1CkK9F8SOW1EEHFFHsl3QCBs1i4CErYr08i/2sa1LHOjxyIJ9RMRM0WNPBCLH4btvpajOGtXBA==\n+  dependencies:\n+    \"@aws-sdk/credential-provider-ini\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/property-provider\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/shared-ini-file-loader\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/eventstream-marshaller@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/eventstream-marshaller/-/eventstream-marshaller-1.0.0-rc.3.tgz#ce4a190365ae949f6ad0639ab2285ce21d28046e\"\n+  integrity sha512-LBWqTd+VRVBdmBYm/K3ueBHLNOCUlj0uLQOExfvKFTugQ1t3i5JoZKLYNbTJyid8sMmbyq1y/nfM+kAHXguwAQ==\n+  dependencies:\n+    \"@aws-crypto/crc32\" \"^1.0.0\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-hex-encoding\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/eventstream-serde-browser@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/eventstream-serde-browser/-/eventstream-serde-browser-1.0.0-rc.3.tgz#ea9229e17317c457dd11206565a04dc1bbccb579\"\n+  integrity sha512-dMWtrnaOBLxEFvEtX7r66Pxh+XipRdDYHHNTSsg3Vaj+cDcCUkur2tplhKaBQY9bElfGB2Rb2R7XsfIxt9PZ0w==\n+  dependencies:\n+    \"@aws-sdk/eventstream-marshaller\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/eventstream-serde-universal\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/eventstream-serde-config-resolver@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/eventstream-serde-config-resolver/-/eventstream-serde-config-resolver-1.0.0-rc.3.tgz#198f81974c4e5396d090c3d48826c6f5e2486819\"\n+  integrity sha512-hnp8DwEK64p2mwMDyBIgGq7yOaxDe3H1O7xoNmKb/owqQAcV8BxhhbrJYrsXNSeE/lO2zckPcL1imzuKHudTfA==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/eventstream-serde-node@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/eventstream-serde-node/-/eventstream-serde-node-1.0.0-rc.3.tgz#cb0d74f24b43cd14963a0ee8252cc47260ddf483\"\n+  integrity sha512-QTIygM8qoVfDv6paFTdyvuAdgUSm/VDFa36OZd+IXSgzoYYrI/psutpYCyt/27oiPH+rFPrOofs9A1mXIWWMhg==\n+  dependencies:\n+    \"@aws-sdk/eventstream-marshaller\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/eventstream-serde-universal\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/eventstream-serde-universal@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/eventstream-serde-universal/-/eventstream-serde-universal-1.0.0-rc.3.tgz#b05d04171ae00b6f33ea1412979f78c1840ea410\"\n+  integrity sha512-YAQMuEI+J0LEf8tOISYSihkEiEH2YpQpvXkLlWyybmWEa1XjmGaZS5V1HP/xf5cA/HPtIsApCz2VYTY50A/Lxw==\n+  dependencies:\n+    \"@aws-sdk/eventstream-marshaller\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/fetch-http-handler@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/fetch-http-handler/-/fetch-http-handler-1.0.0-rc.3.tgz#4ab211faf75c4b1d14dc36b85311519f4723fe97\"\n+  integrity sha512-1xd4DuW8Su7qHKg9wipVGhscvLsVRhZi9pRLxh13lIKEIt+ryxXzrex1YoxDUnDH3ZI7YhdeLhZIonlgaNT+Gw==\n+  dependencies:\n+    \"@aws-sdk/protocol-http\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/querystring-builder\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-base64-browser\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/hash-blob-browser@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/hash-blob-browser/-/hash-blob-browser-1.0.0-rc.3.tgz#2d1dcd1750b366817a0692424403edc808dc3cb8\"\n+  integrity sha512-2lgiclNMd3hiNBjoSh7UuzSY9ucpVF7Z6AmSmERWqN5Sm69u1q8p0RgyyWnKd0JZRelPlB8gBXk4EzxBPSTSLA==\n+  dependencies:\n+    \"@aws-sdk/chunked-blob-reader\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/chunked-blob-reader-native\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/hash-node@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/hash-node/-/hash-node-1.0.0-rc.3.tgz#f46571f597dd8a301362dfef4c5dfd343116f9a4\"\n+  integrity sha512-Q3DikdeGA6pih2ftZajlNaHxsNUaKEXneZdxyoaSKyMppEni3eK2Z2ZjzyjDuXflYLkNtj4ylscure+uIKAApg==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-buffer-from\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/hash-stream-node@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/hash-stream-node/-/hash-stream-node-1.0.0-rc.3.tgz#8b4f668e5d482c509dfe402812b2a2f2a9e36b1b\"\n+  integrity sha512-ry78JhVXHIUdH/aokQ/YBxQ+26zC5VOgK2XLq9eDdxBTz2sefjwzk3Qs5eY1GZKfyUlKMwdRpCibo9FlPVPJeg==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/invalid-dependency@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/invalid-dependency/-/invalid-dependency-1.0.0-rc.3.tgz#857a44dcb666ec3be55ccde6f2912eff7dfddcad\"\n+  integrity sha512-Fl71S5Igd5Mi81QklxhhEWzwKbm+QP1kUYoc5nVK2sE+iLqdF9jwg7/ONBN8jISjTD8GPIW7NWL2SQNINNryMw==\n+  dependencies:\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/is-array-buffer@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/is-array-buffer/-/is-array-buffer-1.0.0-rc.3.tgz#47e47b7e5eb7e0ac9e7fa24f56a78550fbae63bc\"\n+  integrity sha512-tHFTBiXAgBZmAKaJIL2e2QPR9kA1tZTUJMqKaybWjhXckvb29EgUOLcdK+W2kMSqKIGqEINbAaV7S11ydBtYIg==\n+  dependencies:\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/md5-js@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/md5-js/-/md5-js-1.0.0-rc.3.tgz#c9ecabe2a7fccf017f6cfcb972c1cdb579da8f9c\"\n+  integrity sha512-UfHtEs5IWl39yU4X/95605bFMKErWRd+uPgtqEtCWDDGyw4uwUUrkyrhTfJKuUFvTj9ov0Lb03x5QPNDybAelQ==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-utf8-browser\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/middleware-apply-body-checksum@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-apply-body-checksum/-/middleware-apply-body-checksum-1.0.0-rc.3.tgz#1ba3053e65a06fa093b72c45bd28f6053d12028c\"\n+  integrity sha512-f8CMcb1mxPWHJvLxegpjF1fwoa/vFjIaRIrXgUoPMhFNICRZPGnzim2o2mGyjWcS39VkM6G7vpmosNv2zc4EJg==\n+  dependencies:\n+    \"@aws-sdk/is-array-buffer\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/protocol-http\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/middleware-bucket-endpoint@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-bucket-endpoint/-/middleware-bucket-endpoint-1.0.0-rc.3.tgz#3dc26338bb8b631adb93c2ef2bce4bdddf29e01d\"\n+  integrity sha512-bC7Fx78spMF+5sQhjncOHdjEamNGIIZx6KBWN5Z2JkTTfrEoN24VtM6wWXkNRn3EtN7usWBaGT1bCx3/Vk+R0A==\n+  dependencies:\n+    \"@aws-sdk/protocol-http\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-arn-parser\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/middleware-content-length@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-content-length/-/middleware-content-length-1.0.0-rc.3.tgz#0410e78a508ec4ef8cb8987433ed621a7cfa7946\"\n+  integrity sha512-eQfeMwneYxxF6NMF5AokilQHm3HMUbtBVmybdrrM+vs027DRQBDqcZ2GXwVI93kcS4GaibNnzX804rG2xA2UwA==\n+  dependencies:\n+    \"@aws-sdk/protocol-http\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/middleware-expect-continue@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-expect-continue/-/middleware-expect-continue-1.0.0-rc.3.tgz#54eb6e68b7e791febbee44fe107886ead02c47d0\"\n+  integrity sha512-rDs68vBn0sSWl3z1ecXSw7n+MeiSW//r6NSAWAmBE58BDjHSfwQ+aB3izpSHDGIiGZO4aasnwZAP7NjzYvxiWQ==\n+  dependencies:\n+    \"@aws-sdk/middleware-header-default\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/protocol-http\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/middleware-header-default@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-header-default/-/middleware-header-default-1.0.0-rc.3.tgz#3a6186aa0d0575626f07b92b774aa15b73b54230\"\n+  integrity sha512-h0zQFCaBzu7SoRRlKYws76C8q8hY/Ja7G6E69X7fGbrcmNFMjm4aZq0eipKvOIg7cGbrcFnyOnWqLlWaL76nwA==\n+  dependencies:\n+    \"@aws-sdk/protocol-http\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/middleware-host-header@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-host-header/-/middleware-host-header-1.0.0-rc.3.tgz#d7dca9b683bacc0f985b4f1e86cef938d88ad52d\"\n+  integrity sha512-44aOjB9yd2TCDj8c9sr+8+rhQ63kkuIAcMdbt3P/fXKUWwTAW+bcvknaynya3hLa8B75tEQ112xVBb+HoDR//g==\n+  dependencies:\n+    \"@aws-sdk/protocol-http\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/middleware-location-constraint@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-location-constraint/-/middleware-location-constraint-1.0.0-rc.3.tgz#22781315b246f426acde32e894acb3e59cb9d5bf\"\n+  integrity sha512-VdW0/g8SVckRQsz55DrPIzyrF+Qgat3qt+qE9c6Gk7u6XaF05BlG7rbjsStd3Eml+FsKG1KOO3RgDCWvgESmNw==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/middleware-logger@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-logger/-/middleware-logger-1.0.0-rc.3.tgz#a786bb90d3a5a184f9b8331ee90f05f3210b04b7\"\n+  integrity sha512-M1IfI6//hFgMKQXqXdXGNMf/qU4pkwzR9+Wz6TZ6iELtZaXce00ZzTK1szmO1pkWRVeXsCwr4fsbhj7OD4zZ8g==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/middleware-retry@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-retry/-/middleware-retry-1.0.0-rc.3.tgz#8b06fd8c49b3a3e7279551309e418533fac73d9b\"\n+  integrity sha512-Y8JhZPJM10H1KDobUP7aYM6ghBdVT4QM+04iAQBfYZPCc0ksyN+PKZLi97kxOrbg+a4HL593CG2UVnY4WI2tBQ==\n+  dependencies:\n+    \"@aws-sdk/protocol-http\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/service-error-classification\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    react-native-get-random-values \"^1.4.0\"\n+    tslib \"^1.8.0\"\n+    uuid \"^3.0.0\"\n+\n+\"@aws-sdk/middleware-sdk-s3@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-sdk-s3/-/middleware-sdk-s3-1.0.0-rc.3.tgz#1c9a26476887c464b5e52da116a752dc8975dddd\"\n+  integrity sha512-TDICHo5wONd4GUgLEtSjlygKRzXBfxkPQcNEGB2Mnbi+xbDa4FNd6XszkOrNMzxtmqD53ub/iDQewcBr9U9HJQ==\n+  dependencies:\n+    \"@aws-sdk/protocol-http\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-arn-parser\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/middleware-serde@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-serde/-/middleware-serde-1.0.0-rc.3.tgz#81307310c51d50ec8425bee9fb08d35a7458dcfc\"\n+  integrity sha512-3IK4Hz8YV4+AIGJLjDu3QTKjfHGVIPrY5x4ubFzbGVc6EC9y69y+Yh3425ca3xeAVQFnORQn/707LiNKLlsD8g==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/middleware-signing@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-signing/-/middleware-signing-1.0.0-rc.3.tgz#34bad68f17052c298a09905728a35f8906fe55dc\"\n+  integrity sha512-RqIQwPaHvyY38rmIR+A9b3EwIaPPAKA4rmaTGAT1jeS7H65tXJeKc7aAXJWvDn9E1Fj56mOHTOd86FgP45MrUg==\n+  dependencies:\n+    \"@aws-sdk/protocol-http\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/signature-v4\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/middleware-ssec@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-ssec/-/middleware-ssec-1.0.0-rc.3.tgz#45e77e8c1e998fe42bc290c7d4c65c84952e6f3b\"\n+  integrity sha512-sqv/TELHxAvpqOi7uhfCwLGVyOb1ihehfnSeqsyh2HPphg529ssmDUCF6jsi5maMc3lM/eHQ8LDPSXU9H58wwQ==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/middleware-stack@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-stack/-/middleware-stack-1.0.0-rc.3.tgz#e46193e696f15275e548e0cdbe1ca734e9e1c6b9\"\n+  integrity sha512-DV5RPf0rNsZVOtZA+nEDyWhfKUazUjWQppzXGjvCUSLaaPTINPUXf/go5M4S/62mn/9gxCftN5SShMP5yw1sNQ==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/middleware-user-agent@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/middleware-user-agent/-/middleware-user-agent-1.0.0-rc.3.tgz#de42837456482cd06596c0c5cebb80480d630e33\"\n+  integrity sha512-Zrp3kETrrWgJLlnjkSuetOH5cN5URqLd6WQmhZlEm0isvr+2RyDDOA4wP6JjmMhCmrG02/8/b4pMOPH/vUm/LQ==\n+  dependencies:\n+    \"@aws-sdk/protocol-http\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/node-config-provider@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/node-config-provider/-/node-config-provider-1.0.0-rc.3.tgz#b79fd5e95e4ca543b8d6aa2bf59b9ce2cc89c96a\"\n+  integrity sha512-1i0fjunUMYP479hAq7D8RugfMmC3KCUzvZA2xtjFQcE31d7YrlfGstwBq/kvNcIcw+yc3r7SC54KzwgqfSSvzA==\n+  dependencies:\n+    \"@aws-sdk/property-provider\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/shared-ini-file-loader\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/node-http-handler@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/node-http-handler/-/node-http-handler-1.0.0-rc.3.tgz#da316daa5bcf536099e43d57cb136b8c2553a17f\"\n+  integrity sha512-hK0NM3PxGVCgKLZoAb8bXFQlOA1JGd2DwfjDdAn4XfIhEH4QfbuFZxjkQhNcDwkKIqzCmlYTbgJvWKRbbFkEXg==\n+  dependencies:\n+    \"@aws-sdk/abort-controller\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/protocol-http\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/querystring-builder\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/property-provider@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/property-provider/-/property-provider-1.0.0-rc.3.tgz#4dce009bcc55d8779f721100462b8d6ac489606c\"\n+  integrity sha512-WrYlUVaq63k0fYdnIJziphfdTITaTlW0b1qrRzFsqKPRN1AnQenzFs27ZHaaecmFfGg3q1Y2fci3cpyNUBTruQ==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/protocol-http@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/protocol-http/-/protocol-http-1.0.0-rc.3.tgz#7759e6f96df292c01daaff42f2b921180df17c5d\"\n+  integrity sha512-paOSLmXvce84BRCx+JIYGpsVCtn3GCGvzLywaPCHeES2OekwD86PJQskCDAlshRPOy/LCdxYVdMt7FrEBuyQrg==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/querystring-builder@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/querystring-builder/-/querystring-builder-1.0.0-rc.3.tgz#d24135a0523a8d9645d874deeb0ba5a6f6c15428\"\n+  integrity sha512-PWTaV+0r/7FlPNjjKJQ/WyT4oRx4tG5efOuzQobb4/Bw2AFqVCzE2DMGx1V8YKqdq3QFckvRuoFDVqftyhF/Jw==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-uri-escape\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/querystring-parser@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/querystring-parser/-/querystring-parser-1.0.0-rc.3.tgz#9fdd79eb0a06846f25da5f97477e8d8f1255785a\"\n+  integrity sha512-TkA/4wM76WzsiMOs0Lxqk33rP+J0YtCjmpGzS+x4oqNbdVYQBpYtbwqN+9nsrOeieCFRWq9QWl6QM4IyJT9gRA==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/service-error-classification@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/service-error-classification/-/service-error-classification-1.0.0-rc.3.tgz#711f6769cabc7fbdac9f0d5270968824762fa29f\"\n+  integrity sha512-qE/gPzAoQF3DJEPyQk5iQyTZEbVx53a41T+UHEYKYMaGXuAJfoBKnsucDNxgAYXSwcp+3Wp7XA1TUfcygEiZ/Q==\n+\n+\"@aws-sdk/shared-ini-file-loader@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/shared-ini-file-loader/-/shared-ini-file-loader-1.0.0-rc.3.tgz#05aa96572d78f0c4c5edcc7f42ed14076d1b16ea\"\n+  integrity sha512-wynHRRZENIZUS714NX9cu9BDbxAL7DzOJvPYAj2tgC3bJNt0jkbQxNTePpolwWx7QNwFfQgDbK76LPkIo30dJQ==\n+  dependencies:\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/signature-v4@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/signature-v4/-/signature-v4-1.0.0-rc.3.tgz#7ccc61f17d8f083dcbce5e30843c60f8b0388d67\"\n+  integrity sha512-ARfmXLW4NMmQF5/3xGiasi6nrlvddZauJOgG9t2STTog8gijn+y+V7wh26A7e4vgv1hyE0RdonylbakUH1R4Nw==\n+  dependencies:\n+    \"@aws-sdk/is-array-buffer\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-hex-encoding\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/util-uri-escape\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/smithy-client@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/smithy-client/-/smithy-client-1.0.0-rc.3.tgz#b96e97fa6b8bb3de8ecd918d842b2fb972fa0ac6\"\n+  integrity sha512-mlzpr5NLkaoPdTVrr3HIxuNbVJtq9IIrgfVXjqCNixOqJDRG46qiXubfaSsf4giwP8CE6zK9cDkvVDKyV0dl8A==\n+  dependencies:\n+    \"@aws-sdk/middleware-stack\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/types@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/types/-/types-1.0.0-rc.3.tgz#98466080e07244d8f7406cc61ae7918d02b339a2\"\n+  integrity sha512-pKKR2SXG8IHbWcmVgFwLUrHqqqFOEuf5JiQmP7dEBjUXqavzDnqFUY7g9PGuM8928IQqL7IXrRsK7R+VbLgodQ==\n+\n+\"@aws-sdk/types@^3.1.0\":\n+  version \"3.1.0\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/types/-/types-3.1.0.tgz#04d77c37a80b422e8123f296338d129e51f3e1fc\"\n+  integrity sha512-4Az7cemXCN4Qp8EheNkZTJJqIG0dvCT2KAreJLoclcVTcEFw2rzlATUnSeia1YTRsVd6aNxD001Ug7f3vYcQkw==\n+\n+\"@aws-sdk/url-parser-browser@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/url-parser-browser/-/url-parser-browser-1.0.0-rc.3.tgz#d9e1da2acdfb7f2486a68e951dd185dd7b0764e8\"\n+  integrity sha512-bTCB4K1nxX3juaOSRdjUC+nq1KZX1Ipy5pMQoDiRWYCgMgUAcqeWuxlclF3dc8vuhYUWa2A86D5lT3zrP0Gqag==\n+  dependencies:\n+    \"@aws-sdk/querystring-parser\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/url-parser-node@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/url-parser-node/-/url-parser-node-1.0.0-rc.3.tgz#0cdd48fa068a1cf243b46b4eb4c927f38499f63d\"\n+  integrity sha512-W2No+drp3jCjkr1edSReGNLyXF+a34qHOcy8cJ6ZtPe5eLzCroZ33+w1gJ01r5UboWwzo8Qyz7QPxD5J0zPVzw==\n+  dependencies:\n+    \"@aws-sdk/querystring-parser\" \"1.0.0-rc.3\"\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+    url \"^0.11.0\"\n+\n+\"@aws-sdk/util-arn-parser@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/util-arn-parser/-/util-arn-parser-1.0.0-rc.3.tgz#738e945d2dfd009d78c4c07e3773d41c1c525262\"\n+  integrity sha512-mIXiyBYDAQa9EdaKKU4oQsWAvSWVXAumCH89N5VQfrlRCuaqRUdmE83CJx69wcLFbrZCZmCJD2gcPVG5Ywa+NQ==\n+  dependencies:\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/util-base64-browser@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/util-base64-browser/-/util-base64-browser-1.0.0-rc.3.tgz#49cb2a1c9f177327b66eb2a150e643334dd3ce0d\"\n+  integrity sha512-peqOSoOCTGlZVX9gC+4SxaSXQqSsjzNfKxKLZwcP/HhHIPU/I+tbnRbH4a2Cx29DsopTngu0GKLuPJEL67bvog==\n+  dependencies:\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/util-base64-node@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/util-base64-node/-/util-base64-node-1.0.0-rc.3.tgz#ef68e130e7b42b673f93af4a68b46c1542702e64\"\n+  integrity sha512-gz/JScFQ9MMdI59VdJTbgZrnNdTPXOJKesMwoEMH8nMb6/Wi3+KL2NH/GC92hxhuE/JbA1vdrelvCFOED8E1Jg==\n+  dependencies:\n+    \"@aws-sdk/util-buffer-from\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/util-body-length-browser@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/util-body-length-browser/-/util-body-length-browser-1.0.0-rc.3.tgz#f3052599445e06081002788693ada1fb99ea4a51\"\n+  integrity sha512-xvMrCo+5DshN4Fu3zar2RxaqPJ/QRAEOChyWEGUqjE+9/cow+uWsqBX3FdeY84mV6dkdcAJLQvP8aVH+v+w+lw==\n+  dependencies:\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/util-body-length-node@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/util-body-length-node/-/util-body-length-node-1.0.0-rc.3.tgz#e7068c9feff896a3720f71eab5ca44c76e587764\"\n+  integrity sha512-q7n3IP5s9TIMao9sK4an+xxBubHqWXoeqCQ5haeDmqQTBiZQYcyQQq61YJRghj2/53SH5MMS1ACncw3kvnO92g==\n+  dependencies:\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/util-buffer-from@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/util-buffer-from/-/util-buffer-from-1.0.0-rc.3.tgz#6a18955cb422b5649c9675d64bc2defa6e1175ac\"\n+  integrity sha512-43FzXSA3356C/QRCKZSmGTVwH4BgObNJDvF4z5dwwrfqU+tXjnUdnFo5hLsHq+fwjtWuXLkAyi+vz07x3MphvA==\n+  dependencies:\n+    \"@aws-sdk/is-array-buffer\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/util-hex-encoding@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/util-hex-encoding/-/util-hex-encoding-1.0.0-rc.3.tgz#4229f2495f3a5ef32c8c7ada7ab14bd6f983d269\"\n+  integrity sha512-GXHBBGdAH2HPn18RFMsvXAvBtO8pG0I2PlGHfKhn+ym+UT1lHHYpCd3/PawUVUYnFZrqIj+j48IjFFJ3XMPXyQ==\n+  dependencies:\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/util-locate-window@^3.0.0\":\n+  version \"3.1.0\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/util-locate-window/-/util-locate-window-3.1.0.tgz#a04058b8d1044521dda9ca77b81be0ffc26bf0d7\"\n+  integrity sha512-HAU9Sx3EJMGU4Cfq2m3t2QnkINNQx5KWa6xGctCLN2C8bNWOpKqQhWO6qcxsXalrdW5qiXY5sj8JZGRaLa3yyQ==\n+  dependencies:\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/util-uri-escape@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/util-uri-escape/-/util-uri-escape-1.0.0-rc.3.tgz#53b7ba5c353cef31f0d1f10c06d8dfc2118a3371\"\n+  integrity sha512-PW1Uh5nJ32VKysV6DxyO40gONJR8s0QFeS55apyPUeCYCrdEjwsNvftDWbRJIcVpvkRSrbDezWc5CJC0S8WXjQ==\n+  dependencies:\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/util-user-agent-browser@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/util-user-agent-browser/-/util-user-agent-browser-1.0.0-rc.3.tgz#2b8d7a79c7e79099fe9a41976d4eeb39f5d83c21\"\n+  integrity sha512-ev7bjF6QejDTi/UTvBLfiUETrXtuBf5sJl8ocWRUcrCnje5DW5lat2LaC7KWeRppQ4NA//ldavF5ngAxsn8TzA==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/util-user-agent-node@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/util-user-agent-node/-/util-user-agent-node-1.0.0-rc.3.tgz#f9a7337b80e4118a12c4cc4f83512e9b5e48cb4e\"\n+  integrity sha512-5ELevKFFsHcyPSOrQ3mgdaNZ+Fr1I4J+/8aKoOiBO1Pnp15/xlVS4GkRiE0uUmAvBbUh1sByMvTo7ITeOBvlxA==\n+  dependencies:\n+    \"@aws-sdk/types\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/util-utf8-browser@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/util-utf8-browser/-/util-utf8-browser-1.0.0-rc.3.tgz#ca2f1ee3c3774203675455e6cf6a52256d40849d\"\n+  integrity sha512-ypEJ2zsfm844dPSnES5lvS80Jb6hQ7D9iu0TUKQfIVu0LernJaAiSM05UEbktN+bEAoQBi9S64l8JjHVKFWu1Q==\n+  dependencies:\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/util-utf8-browser@^3.0.0\":\n+  version \"3.1.0\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/util-utf8-browser/-/util-utf8-browser-3.1.0.tgz#7be17b545af101c320d34aace47139cf9987d796\"\n+  integrity sha512-vJP20me+Wc1RJHq+Y+gFD25aWhbQte+Qkyh3SOKQ+YvNaMcaeVwOV7b3Y3ItBuMdutHLJWmbJ2wF6dhhpy1kOA==\n+  dependencies:\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/util-utf8-node@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/util-utf8-node/-/util-utf8-node-1.0.0-rc.3.tgz#d6841823b949f4209fdcc405c5ad5d4b483e6e60\"\n+  integrity sha512-80BWIgYzdw/cKxUrXf+7IKp07saLfCl7p4Q+zitcTrng9bSbPhjntXBS+dOFrBU2fBUynfI2K+9k5taJRKgOTQ==\n+  dependencies:\n+    \"@aws-sdk/util-buffer-from\" \"1.0.0-rc.3\"\n+    tslib \"^1.8.0\"\n+\n+\"@aws-sdk/xml-builder@1.0.0-rc.3\":\n+  version \"1.0.0-rc.3\"\n+  resolved \"https://registry.yarnpkg.com/@aws-sdk/xml-builder/-/xml-builder-1.0.0-rc.3.tgz#2b0b6b4c182b96245889f4c8e2004eef847401f4\"\n+  integrity sha512-WdW/bZLVMNrEdG++m4B4QmZ6KnYsF3V68CDkZKg8IgDOMON4YOqUPBYDHNR8Wtdd1JQFLMDzrcqnXQqLb5dWgA==\n+  dependencies:\n+    tslib \"^1.8.0\"\n+\n \"@babel/code-frame@7.12.11\", \"@babel/code-frame@^7.0.0\":\n   version \"7.12.11\"\n   resolved \"https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.12.11.tgz#f4ad435aa263db935b8f10f2c552d23fb716a63f\"\n@@ -126,6 +782,26 @@\n   resolved \"https://registry.yarnpkg.com/@hapi/hoek/-/hoek-9.1.1.tgz#9daf5745156fd84b8e9889a2dc721f0c58e894aa\"\n   integrity sha512-CAEbWH7OIur6jEOzaai83jq3FmKmv4PmX1JYfs9IrYcGEVI/lyL1EXJGCj7eFVJ0bg5QR8LMxBlEtA+xKiLpFw==\n\n+\"@kwsites/file-exists@^1.1.1\":\n+  version \"1.1.1\"\n+  resolved \"https://registry.yarnpkg.com/@kwsites/file-exists/-/file-exists-1.1.1.tgz#ad1efcac13e1987d8dbaf235ef3be5b0d96faa99\"\n+  integrity sha512-m9/5YGR18lIwxSFDwfE3oA7bWuq9kdau6ugN4H2rJeyhFQZcG9AgSHkQtSD15a8WvTgfz9aikZMrKPHvbpqFiw==\n+  dependencies:\n+    debug \"^4.1.1\"\n+\n+\"@kwsites/promise-deferred@^1.1.1\":\n+  version \"1.1.1\"\n+  resolved \"https://registry.yarnpkg.com/@kwsites/promise-deferred/-/promise-deferred-1.1.1.tgz#8ace5259254426ccef57f3175bc64ed7095ed919\"\n+  integrity sha512-GaHYm+c0O9MjZRu0ongGBRbinu8gVAMd2UZjji6jVmqKtZluZnptXGWhz1E8j8D2HJ3f/yMxKAUC0b+57wncIw==\n+\n+\"@mrmlnc/readdir-enhanced@^2.2.1\":\n+  version \"2.2.1\"\n+  resolved \"https://registry.yarnpkg.com/@mrmlnc/readdir-enhanced/-/readdir-enhanced-2.2.1.tgz#524af240d1a360527b730475ecfa1344aa540dde\"\n+  integrity sha512-bPHp6Ji8b41szTOcaP63VlnbbO5Ny6dwAATtY6JTjh5N2OLrb5Qk/Th5cRkRQhkWCt+EJsYrNB0MiL+Gpn6e3g==\n+  dependencies:\n+    call-me-maybe \"^1.0.1\"\n+    glob-to-regexp \"^0.3.0\"\n+\n \"@next/env@10.0.5\":\n   version \"10.0.5\"\n   resolved \"https://registry.yarnpkg.com/@next/env/-/env-10.0.5.tgz#446e59ee7a8d05061be784b24732c369653038ab\"\n@@ -171,6 +847,11 @@\n   resolved \"https://registry.yarnpkg.com/@nodelib/fs.stat/-/fs.stat-2.0.4.tgz#a3f2dd61bab43b8db8fa108a121cfffe4c676655\"\n   integrity sha512-IYlHJA0clt2+Vg7bccq+TzRdJvv19c2INqBSsoOLp1je7xjtr7J26+WXR72MCdvU9q1qTzIWDfhMf+DRvQJK4Q==\n\n+\"@nodelib/fs.stat@^1.1.2\":\n+  version \"1.1.3\"\n+  resolved \"https://registry.yarnpkg.com/@nodelib/fs.stat/-/fs.stat-1.1.3.tgz#2b5a3ab3f918cca48a8c754c08168e3f03eba61b\"\n+  integrity sha512-shAmDyaQC4H92APFoIaVDHCx5bStIocgvbwQyxPRrbUY20V1EYTbSDchWbuwlMG3V17cprZhA6+78JfB+3DTPw==\n+\n \"@nodelib/fs.walk@^1.2.3\":\n   version \"1.2.6\"\n   resolved \"https://registry.yarnpkg.com/@nodelib/fs.walk/-/fs.walk-1.2.6.tgz#cce9396b30aa5afe9e3756608f5831adcb53d063\"\n@@ -191,16 +872,516 @@\n   resolved \"https://registry.yarnpkg.com/@opentelemetry/context-base/-/context-base-0.14.0.tgz#c67fc20a4d891447ca1a855d7d70fa79a3533001\"\n   integrity sha512-sDOAZcYwynHFTbLo6n8kIbLiVF3a3BLkrmehJUyEbT9F+Smbi47kLGS2gG2g0fjBLR/Lr1InPD7kXL7FaTqEkw==\n\n+\"@protobufjs/aspromise@^1.1.1\", \"@protobufjs/aspromise@^1.1.2\":\n+  version \"1.1.2\"\n+  resolved \"https://registry.yarnpkg.com/@protobufjs/aspromise/-/aspromise-1.1.2.tgz#9b8b0cc663d669a7d8f6f5d0893a14d348f30fbf\"\n+  integrity sha1-m4sMxmPWaafY9vXQiToU00jzD78=\n+\n+\"@protobufjs/base64@^1.1.2\":\n+  version \"1.1.2\"\n+  resolved \"https://registry.yarnpkg.com/@protobufjs/base64/-/base64-1.1.2.tgz#4c85730e59b9a1f1f349047dbf24296034bb2735\"\n+  integrity sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==\n+\n+\"@protobufjs/codegen@^2.0.4\":\n+  version \"2.0.4\"\n+  resolved \"https://registry.yarnpkg.com/@protobufjs/codegen/-/codegen-2.0.4.tgz#7ef37f0d010fb028ad1ad59722e506d9262815cb\"\n+  integrity sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==\n+\n+\"@protobufjs/eventemitter@^1.1.0\":\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz#355cbc98bafad5978f9ed095f397621f1d066b70\"\n+  integrity sha1-NVy8mLr61ZePntCV85diHx0Ga3A=\n+\n+\"@protobufjs/fetch@^1.1.0\":\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/@protobufjs/fetch/-/fetch-1.1.0.tgz#ba99fb598614af65700c1619ff06d454b0d84c45\"\n+  integrity sha1-upn7WYYUr2VwDBYZ/wbUVLDYTEU=\n+  dependencies:\n+    \"@protobufjs/aspromise\" \"^1.1.1\"\n+    \"@protobufjs/inquire\" \"^1.1.0\"\n+\n+\"@protobufjs/float@^1.0.2\":\n+  version \"1.0.2\"\n+  resolved \"https://registry.yarnpkg.com/@protobufjs/float/-/float-1.0.2.tgz#5e9e1abdcb73fc0a7cb8b291df78c8cbd97b87d1\"\n+  integrity sha1-Xp4avctz/Ap8uLKR33jIy9l7h9E=\n+\n+\"@protobufjs/inquire@^1.1.0\":\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/@protobufjs/inquire/-/inquire-1.1.0.tgz#ff200e3e7cf2429e2dcafc1140828e8cc638f089\"\n+  integrity sha1-/yAOPnzyQp4tyvwRQIKOjMY48Ik=\n+\n+\"@protobufjs/path@^1.1.2\":\n+  version \"1.1.2\"\n+  resolved \"https://registry.yarnpkg.com/@protobufjs/path/-/path-1.1.2.tgz#6cc2b20c5c9ad6ad0dccfd21ca7673d8d7fbf68d\"\n+  integrity sha1-bMKyDFya1q0NzP0hynZz2Nf79o0=\n+\n+\"@protobufjs/pool@^1.1.0\":\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/@protobufjs/pool/-/pool-1.1.0.tgz#09fd15f2d6d3abfa9b65bc366506d6ad7846ff54\"\n+  integrity sha1-Cf0V8tbTq/qbZbw2ZQbWrXhG/1Q=\n+\n+\"@protobufjs/utf8@^1.1.0\":\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/@protobufjs/utf8/-/utf8-1.1.0.tgz#a777360b5b39a1a2e5106f8e858f2fd2d060c570\"\n+  integrity sha1-p3c2C1s5oaLlEG+OhY8v0tBgxXA=\n+\n+\"@serverless/aws-iam-role@^1.0.0\":\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/aws-iam-role/-/aws-iam-role-1.0.0.tgz#bab4ee9dd82f3f05b875daa9bb4b27f28038dc51\"\n+  integrity sha512-xEUF4upBki7O20QR51V/hRscBSqIsOun6ePtnJkiIEzMi6Fj51PbzySlj95+Ll5qBA5m8gDytu49BEClLfk5DQ==\n+  dependencies:\n+    \"@serverless/core\" \"^1.0.0\"\n+    aws-sdk \"^2.488.0\"\n+    ramda \"^0.26.0\"\n+\n+\"@serverless/aws-lambda-layer@^1.0.0\":\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/aws-lambda-layer/-/aws-lambda-layer-1.0.0.tgz#be51ef02a003bd2450bd0c7db37363d75c8874db\"\n+  integrity sha512-kjh+ib257gPO9nCJUQ4ZEV54gAPd4JDWWcbGdN2aa1HVhPZf2V8qBI7bNQMknp+u2mRU3y1f7L/Qihb9bIDEOw==\n+  dependencies:\n+    \"@serverless/aws-s3\" \"^1.0.0\"\n+    \"@serverless/core\" \"^1.0.0\"\n+    archiver \"^3.0.0\"\n+    aws-sdk \"^2.387.0\"\n+    fs-extra \"^7.0.1\"\n+    globby \"^9.2.0\"\n+    ramda \"^0.26.1\"\n+\n+\"@serverless/aws-s3@^1.0.0\":\n+  version \"1.0.1\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/aws-s3/-/aws-s3-1.0.1.tgz#79befe9d92a083e22c99af7d33f7d1215561e6fd\"\n+  integrity sha512-RDN/ykANnUuqGUWCrQdEC9H4YVkqDCg46/ZzP7H/c6GSbRBL6Supbne3GOOPHspjxGZMJJ3Q9f7xSKHE6chKnQ==\n+  dependencies:\n+    \"@serverless/core\" \"^1.0.0\"\n+    archiver \"^3.0.0\"\n+    aws-sdk \"^2.488.0\"\n+    fs-extra \"^7.0.0\"\n+    klaw-sync \"^6.0.0\"\n+    mime-types \"^2.1.22\"\n+    ramda \"^0.26.1\"\n+    s3-stream-upload \"^2.0.2\"\n+\n+\"@serverless/aws-s3@^4.2.0\":\n+  version \"4.2.0\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/aws-s3/-/aws-s3-4.2.0.tgz#3c4634d37d6caaea743e4feeaba316cd5471d1b6\"\n+  integrity sha512-+3tTxbCryZa4YHoD8+GzeXeWkkuCpqWNJepTrZQw1WZtxWCJk2997RfYC7bxhaLrIVuuxIzTEXEq/sWA81l0BA==\n+  dependencies:\n+    \"@serverless/core\" \"^1.0.0\"\n+    archiver \"^3.0.0\"\n+    aws-sdk \"^2.488.0\"\n+    fs-extra \"^7.0.0\"\n+    klaw-sync \"^6.0.0\"\n+    mime-types \"^2.1.22\"\n+    ramda \"^0.26.1\"\n+    s3-stream-upload \"^2.0.2\"\n+\n+\"@serverless/cli@^1.5.2\":\n+  version \"1.5.2\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/cli/-/cli-1.5.2.tgz#7741d84ea8b5f6dcf18e21406300f01ece2865da\"\n+  integrity sha512-FMACx0qPD6Uj8U+7jDmAxEe1tdF9DsuY5VsG45nvZ3olC9xYJe/PMwxWsjXfK3tg1HUNywYAGCsy7p5fdXhNzw==\n+  dependencies:\n+    \"@serverless/core\" \"^1.1.2\"\n+    \"@serverless/template\" \"^1.1.3\"\n+    \"@serverless/utils\" \"^1.2.0\"\n+    ansi-escapes \"^4.3.1\"\n+    chalk \"^2.4.2\"\n+    chokidar \"^3.4.1\"\n+    dotenv \"^8.2.0\"\n+    figures \"^3.2.0\"\n+    minimist \"^1.2.5\"\n+    prettyoutput \"^1.2.0\"\n+    strip-ansi \"^5.2.0\"\n+\n+\"@serverless/component-metrics@^1.0.8\":\n+  version \"1.0.8\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/component-metrics/-/component-metrics-1.0.8.tgz#a552d694863e36ee9b5095cc9cc0b5387c8dcaf9\"\n+  integrity sha512-lOUyRopNTKJYVEU9T6stp2irwlTDsYMmUKBOUjnMcwGveuUfIJqrCOtFLtIPPj3XJlbZy5F68l4KP9rZ8Ipang==\n+  dependencies:\n+    node-fetch \"^2.6.0\"\n+    shortid \"^2.2.14\"\n+\n+\"@serverless/components@^3.5.1\":\n+  version \"3.5.1\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/components/-/components-3.5.1.tgz#124493a9f8faa64b0fa345330620d1c72cc1c7d1\"\n+  integrity sha512-GRXdO4e2gWwVQ+RNdbffaym92cIcUHzYfIK3mxWv2zIL/4rKXz5YaptRj6hd3EST12/iBsEOktomtuCfG1i9RA==\n+  dependencies:\n+    \"@serverless/platform-client\" \"^3.1.5\"\n+    \"@serverless/platform-client-china\" \"^2.1.0\"\n+    \"@serverless/platform-sdk\" \"^2.3.2\"\n+    \"@serverless/utils\" \"^2.2.0\"\n+    adm-zip \"^0.4.16\"\n+    ansi-escapes \"^4.3.1\"\n+    aws4 \"^1.11.0\"\n+    chalk \"^4.1.0\"\n+    child-process-ext \"^2.1.1\"\n+    chokidar \"^3.5.0\"\n+    dotenv \"^8.2.0\"\n+    figures \"^3.2.0\"\n+    fs-extra \"^9.0.1\"\n+    globby \"^11.0.2\"\n+    got \"^11.8.1\"\n+    graphlib \"^2.1.8\"\n+    https-proxy-agent \"^5.0.0\"\n+    ini \"^1.3.8\"\n+    inquirer-autocomplete-prompt \"^1.3.0\"\n+    js-yaml \"^3.14.1\"\n+    memoizee \"^0.4.14\"\n+    minimist \"^1.2.5\"\n+    moment \"^2.29.1\"\n+    open \"^7.3.1\"\n+    prettyoutput \"^1.2.0\"\n+    ramda \"^0.27.1\"\n+    semver \"^7.3.4\"\n+    strip-ansi \"^6.0.0\"\n+    traverse \"^0.6.6\"\n+    uuid \"^8.3.2\"\n+\n+\"@serverless/core@^1.0.0\", \"@serverless/core@^1.1.2\":\n+  version \"1.1.2\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/core/-/core-1.1.2.tgz#96a2ac428d81c0459474e77db6881ebdd820065d\"\n+  integrity sha512-PY7gH+7aQ+MltcUD7SRDuQODJ9Sav9HhFJsgOiyf8IVo7XVD6FxZIsSnpMI6paSkptOB7n+0Jz03gNlEkKetQQ==\n+  dependencies:\n+    fs-extra \"^7.0.1\"\n+    js-yaml \"^3.13.1\"\n+    package-json \"^6.3.0\"\n+    ramda \"^0.26.1\"\n+    semver \"^6.1.1\"\n+\n+\"@serverless/enterprise-plugin@^4.4.2\":\n+  version \"4.4.2\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/enterprise-plugin/-/enterprise-plugin-4.4.2.tgz#ec635a2099e63ecd6a82a005272cbfad8cbdfac6\"\n+  integrity sha512-w5xD8R8tFK6B7QiLvWI5jqVHTtH1LdTyGp5eRcjkdJBa10/D2IZFpJimMAGsBxk9U1JGKO4j0miVnRHIW8ppeg==\n+  dependencies:\n+    \"@serverless/event-mocks\" \"^1.1.1\"\n+    \"@serverless/platform-client\" \"^3.1.5\"\n+    \"@serverless/platform-sdk\" \"^2.3.2\"\n+    chalk \"^4.1.0\"\n+    child-process-ext \"^2.1.1\"\n+    chokidar \"^3.5.0\"\n+    cli-color \"^2.0.0\"\n+    flat \"^5.0.2\"\n+    fs-extra \"^9.0.1\"\n+    js-yaml \"^3.14.1\"\n+    jszip \"^3.5.0\"\n+    lodash \"^4.17.20\"\n+    memoizee \"^0.4.14\"\n+    ncjsm \"^4.1.0\"\n+    node-dir \"^0.1.17\"\n+    node-fetch \"^2.6.1\"\n+    open \"^7.3.0\"\n+    semver \"^7.3.4\"\n+    simple-git \"^2.31.0\"\n+    uuid \"^8.3.2\"\n+    yamljs \"^0.3.0\"\n+\n+\"@serverless/event-mocks@^1.1.1\":\n+  version \"1.1.1\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/event-mocks/-/event-mocks-1.1.1.tgz#7064b99ccc29d9a8e9b799f413dbcfd64ea3b7ee\"\n+  integrity sha512-YAV5V/y+XIOfd+HEVeXfPWZb8C6QLruFk9tBivoX2roQLWVq145s4uxf8D0QioCueuRzkukHUS4JIj+KVoS34A==\n+  dependencies:\n+    \"@types/lodash\" \"^4.14.123\"\n+    lodash \"^4.17.11\"\n+\n+\"@serverless/platform-client-china@^2.1.0\":\n+  version \"2.1.2\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/platform-client-china/-/platform-client-china-2.1.2.tgz#31b0ad8375838b6077123d385a66d7d57a65ec6a\"\n+  integrity sha512-G1wVPGTvzO/yLELddNQiWGkJJQtqtbkXH4Kb5c/mbvO5GPz+zAIB7j1wBLY/b3Sk+4pQRYjMINIwopv+M/g3Gg==\n+  dependencies:\n+    \"@serverless/utils-china\" \"^1.0.13\"\n+    adm-zip \"^0.5.1\"\n+    archiver \"^5.0.2\"\n+    axios \"^0.21.1\"\n+    dotenv \"^8.2.0\"\n+    fast-glob \"^3.2.4\"\n+    fs-extra \"^9.0.1\"\n+    https-proxy-agent \"^5.0.0\"\n+    js-yaml \"^3.14.0\"\n+    minimatch \"^3.0.4\"\n+    querystring \"^0.2.0\"\n+    run-parallel-limit \"^1.0.6\"\n+    traverse \"^0.6.6\"\n+    urlencode \"^1.1.0\"\n+    ws \"^7.3.1\"\n+\n+\"@serverless/platform-client@^3.1.5\":\n+  version \"3.8.1\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/platform-client/-/platform-client-3.8.1.tgz#8b14b24e94b0833513bb73ffcf4d301b7a1b6b99\"\n+  integrity sha512-kdLKQPoiZedgYQ38v5s0Bpo+KpAl/2Cz4qL73oJxfqVI0ZQiINR7jxblT+fA2SwcyJdGzbZf/98Tx4bekwPs2g==\n+  dependencies:\n+    adm-zip \"^0.4.13\"\n+    archiver \"^5.0.0\"\n+    axios \"^0.21.1\"\n+    fast-glob \"^3.2.4\"\n+    https-proxy-agent \"^5.0.0\"\n+    ignore \"^5.1.8\"\n+    isomorphic-ws \"^4.0.1\"\n+    js-yaml \"^3.13.1\"\n+    jwt-decode \"^2.2.0\"\n+    minimatch \"^3.0.4\"\n+    querystring \"^0.2.0\"\n+    run-parallel-limit \"^1.0.6\"\n+    throat \"^5.0.0\"\n+    traverse \"^0.6.6\"\n+    ws \"^7.2.1\"\n+\n+\"@serverless/platform-sdk@^2.3.2\":\n+  version \"2.3.2\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/platform-sdk/-/platform-sdk-2.3.2.tgz#d53e37c910e66687e0cc398c3b83fde9d7357806\"\n+  integrity sha512-JSX0/EphGVvnb4RAgZYewtBXPuVsU2TFCuXh6EEZ4jxK3WgUwNYeYdwB8EuVLrm1/dYqu/UWUC0rPKb+ZDycJg==\n+  dependencies:\n+    chalk \"^2.4.2\"\n+    https-proxy-agent \"^4.0.0\"\n+    is-docker \"^1.1.0\"\n+    jwt-decode \"^2.2.0\"\n+    node-fetch \"^2.6.1\"\n+    opn \"^5.5.0\"\n+    querystring \"^0.2.0\"\n+    ramda \"^0.25.0\"\n+    rc \"^1.2.8\"\n+    regenerator-runtime \"^0.13.7\"\n+    source-map-support \"^0.5.19\"\n+    uuid \"^3.4.0\"\n+    write-file-atomic \"^2.4.3\"\n+    ws \"<7.0.0\"\n+\n+\"@serverless/template@^1.1.3\":\n+  version \"1.1.4\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/template/-/template-1.1.4.tgz#fb3e3eb0bc545f4a5ff339dfb5810237ea839687\"\n+  integrity sha512-LYC+RmSD4ozStdCxSHInpVWP8h+0sSa0lmPGjAb1Fw4Ppk+LCJqJTrohbhHmF2ixgaIBu6ceNtVTB4qM+2NvIA==\n+  dependencies:\n+    \"@serverless/component-metrics\" \"^1.0.8\"\n+    \"@serverless/core\" \"^1.1.2\"\n+    graphlib \"^2.1.8\"\n+    ramda \"^0.26.1\"\n+    traverse \"^0.6.6\"\n+\n+\"@serverless/utils-china@^1.0.13\":\n+  version \"1.0.14\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/utils-china/-/utils-china-1.0.14.tgz#6495220bea5be95a36c9073de9ea4264c9cc1695\"\n+  integrity sha512-7ku9ePjb+bneFV1Akmz0t8pU8hhHfPJsBjG/Kf6IjyGAQrEjN/PcY2QUDm0emdCNyCsuido1wp0DWMGiwuhC8Q==\n+  dependencies:\n+    \"@tencent-sdk/capi\" \"^1.1.2\"\n+    dijkstrajs \"^1.0.1\"\n+    dot-qs \"0.2.0\"\n+    duplexify \"^4.1.1\"\n+    end-of-stream \"^1.4.4\"\n+    https-proxy-agent \"^5.0.0\"\n+    kafka-node \"^5.0.0\"\n+    protobufjs \"^6.9.0\"\n+    qrcode-terminal \"^0.12.0\"\n+    socket.io-client \"^2.3.0\"\n+    winston \"3.2.1\"\n+\n+\"@serverless/utils@^1.2.0\":\n+  version \"1.2.0\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/utils/-/utils-1.2.0.tgz#d32f2be6e9db84419c1da4b8e0e8b3706e1c69a7\"\n+  integrity sha512-aI/cpGVUhWbJUR8QDMtPue28EU4ViG/L4/XKuZDfAN2uNQv3NRjwEFIBi/cxyfQnMTYVtMLe9wDjuwzOT4ENzA==\n+  dependencies:\n+    chalk \"^2.0.1\"\n+    lodash \"^4.17.15\"\n+    rc \"^1.2.8\"\n+    type \"^2.0.0\"\n+    uuid \"^3.4.0\"\n+    write-file-atomic \"^2.4.3\"\n+\n+\"@serverless/utils@^2.2.0\":\n+  version \"2.2.0\"\n+  resolved \"https://registry.yarnpkg.com/@serverless/utils/-/utils-2.2.0.tgz#80dba2a98307f9987e8c8e399381a9302dd4a39f\"\n+  integrity sha512-0TqmLwH9r2GAewvz9mhZ+TSyQBoE9ANuB4nNhn6lJvVUgzlzji3aqeFbAuDt+Z60ZkaIDNipU/J5Vf2Lo/QTQQ==\n+  dependencies:\n+    chalk \"^4.1.0\"\n+    inquirer \"^7.3.3\"\n+    js-yaml \"^4.0.0\"\n+    lodash \"^4.17.20\"\n+    ncjsm \"^4.1.0\"\n+    rc \"^1.2.8\"\n+    type \"^2.1.0\"\n+    uuid \"^8.3.2\"\n+    write-file-atomic \"^3.0.3\"\n+\n+\"@sindresorhus/is@^0.14.0\":\n+  version \"0.14.0\"\n+  resolved \"https://registry.yarnpkg.com/@sindresorhus/is/-/is-0.14.0.tgz#9fb3a3cf3132328151f353de4632e01e52102bea\"\n+  integrity sha512-9NET910DNaIPngYnLLPeg+Ogzqsi9uM4mSboU5y6p8S5DzMTVEsJZrawi+BoDNUVBa2DhJqQYUFvMDfgU062LQ==\n+\n+\"@sindresorhus/is@^0.7.0\":\n+  version \"0.7.0\"\n+  resolved \"https://registry.yarnpkg.com/@sindresorhus/is/-/is-0.7.0.tgz#9a06f4f137ee84d7df0460c1fdb1135ffa6c50fd\"\n+  integrity sha512-ONhaKPIufzzrlNbqtWFFd+jlnemX6lJAgq9ZeiZtS7I1PIf/la7CW4m83rTXRnVnsMbW2k56pGYu7AUFJD9Pow==\n+\n+\"@sindresorhus/is@^4.0.0\":\n+  version \"4.0.0\"\n+  resolved \"https://registry.yarnpkg.com/@sindresorhus/is/-/is-4.0.0.tgz#2ff674e9611b45b528896d820d3d7a812de2f0e4\"\n+  integrity sha512-FyD2meJpDPjyNQejSjvnhpgI/azsQkA4lGbuu5BQZfjvJ9cbRZXzeWL2HceCekW4lixO9JPesIIQkSoLjeJHNQ==\n+\n+\"@sls-next/aws-cloudfront@1.3.0\":\n+  version \"1.3.0\"\n+  resolved \"https://registry.yarnpkg.com/@sls-next/aws-cloudfront/-/aws-cloudfront-1.3.0.tgz#ec5e8b5936eb6206040ed7fe301beb959f665c9b\"\n+  integrity sha512-Bw7LOx+uag6oEor6yhR42LZenEJCah9DyXFLuRiupR2VDDThiPt7SH5WpkCZafgUhgyXlMvlGeIHa9cdJLLXsA==\n+  dependencies:\n+    ramda \"^0.26.1\"\n+\n+\"@sls-next/aws-lambda@1.0.3\":\n+  version \"1.0.3\"\n+  resolved \"https://registry.yarnpkg.com/@sls-next/aws-lambda/-/aws-lambda-1.0.3.tgz#a5fc8898f656dda1c44e05c3ca0b75e311b9e710\"\n+  integrity sha512-IVytLgTO80mT+k9orOA4hf5v7RLAhI9j9wy0lz+EuzKd3AVUVS/2GJYJrvl7ARj52vdCC6/iETQ5mCHooc9pIA==\n+  dependencies:\n+    \"@serverless/aws-iam-role\" \"^1.0.0\"\n+    \"@serverless/aws-lambda-layer\" \"^1.0.0\"\n+    \"@serverless/aws-s3\" \"^4.2.0\"\n+    archiver \"^4.0.1\"\n+    fs-extra \"^9.0.1\"\n+    globby \"^11.0.1\"\n+    ramda \"^0.27.0\"\n+\n+\"@sls-next/cloudfront@1.0.4\":\n+  version \"1.0.4\"\n+  resolved \"https://registry.yarnpkg.com/@sls-next/cloudfront/-/cloudfront-1.0.4.tgz#1b578d5a3948c41593fb97c2d7a9395f2f9ac8a4\"\n+  integrity sha512-ZcmWLhIC8OKmiv9FLYz1/Rc6GFBw27X7a/LUHE1ghaLfUvitQcRKlB5xtXO/V/JyKCzHsD69NpGSScXhRZqxbg==\n+  dependencies:\n+    aws-sdk \"2.728.0\"\n+\n+\"@sls-next/domain@1.1.0\":\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/@sls-next/domain/-/domain-1.1.0.tgz#dc8c4e60d6732189e9782f60366ac580e493c4df\"\n+  integrity sha512-aOrEvuDm6vF8Sn0Ad1Zz2P3P2ZHSjYmLNHdzUe3GjTcmSkiXjzqjmM1OkJ1b7XUlYC5fRKdaruC1nzkpuc8aUA==\n+\n+\"@sls-next/lambda-at-edge@1.7.0\":\n+  version \"1.7.0\"\n+  resolved \"https://registry.yarnpkg.com/@sls-next/lambda-at-edge/-/lambda-at-edge-1.7.0.tgz#86b2a4642ef252eb8bb96b8931808d4c18d54082\"\n+  integrity sha512-mBdw4EgsNB9tE7pZ/YIhfkZbkbXzGjcaeJxGBKN0HsJwMJCNdJKnxPC2a29rvaovHnyFD6s91HVJ9V7b1GH/XQ==\n+  dependencies:\n+    \"@aws-sdk/client-s3\" \"1.0.0-rc.3\"\n+    \"@zeit/node-file-trace\" \"^0.6.5\"\n+    cookie \"^0.4.1\"\n+    execa \"^4.0.2\"\n+    fs-extra \"^9.0.1\"\n+    get-stream \"^6.0.0\"\n+    jsonwebtoken \"^8.5.1\"\n+    path-to-regexp \"^6.1.0\"\n+\n+\"@sls-next/next-aws-cloudfront@1.6.0\":\n+  version \"1.6.0\"\n+  resolved \"https://registry.yarnpkg.com/@sls-next/next-aws-cloudfront/-/next-aws-cloudfront-1.6.0.tgz#60e16bd21367fc5e48ad90a24d8aff02d3485e48\"\n+  integrity sha512-jq5fivztiO+h/p5+Pl0vsFJsXPghPxAByZ8UMHdvC2Nz9gFOzOzkNFqYq4tMpMGT97RBNkSRF4rt7VNcNDnVPA==\n+\n+\"@sls-next/s3-static-assets@1.3.1\":\n+  version \"1.3.1\"\n+  resolved \"https://registry.yarnpkg.com/@sls-next/s3-static-assets/-/s3-static-assets-1.3.1.tgz#d7be581b6250caf632e0af5dcbda0857ad687caa\"\n+  integrity sha512-0u/5uicoa4g3/C2cgopi/H1Q+NowYp9HyGGK1Pf3vKyWcVouxynZh0cynGm+03l5+IxxdeGAPOVmJuzIgracxg==\n+  dependencies:\n+    aws-sdk \"2.728.0\"\n+    fs-extra \"^9.0.1\"\n+    klaw \"^3.0.0\"\n+    mime-types \"^2.1.27\"\n+    regex-parser \"^2.2.10\"\n+\n+\"@sls-next/serverless-component@^1.18.0\":\n+  version \"1.18.0\"\n+  resolved \"https://registry.yarnpkg.com/@sls-next/serverless-component/-/serverless-component-1.18.0.tgz#aacf7b40ea1eb5246e2dfd02323f3abe18883210\"\n+  integrity sha512-eg8kSofLhDg99Roe2eiz/z0+rnIrNfouD1VMB59Hd3YbCDJmszTGHCbA+uYBz+lCCvhVgpToCqRxcr84+RAwIQ==\n+  dependencies:\n+    \"@serverless/aws-s3\" \"^4.2.0\"\n+    \"@serverless/core\" \"^1.1.2\"\n+    \"@sls-next/aws-cloudfront\" \"1.3.0\"\n+    \"@sls-next/aws-lambda\" \"1.0.3\"\n+    \"@sls-next/cloudfront\" \"1.0.4\"\n+    \"@sls-next/domain\" \"1.1.0\"\n+    \"@sls-next/lambda-at-edge\" \"1.7.0\"\n+    \"@sls-next/next-aws-cloudfront\" \"1.6.0\"\n+    \"@sls-next/s3-static-assets\" \"1.3.1\"\n+    aws-sdk \"^2.702.0\"\n+    fs-extra \"^9.0.1\"\n+\n+\"@szmarczak/http-timer@^1.1.2\":\n+  version \"1.1.2\"\n+  resolved \"https://registry.yarnpkg.com/@szmarczak/http-timer/-/http-timer-1.1.2.tgz#b1665e2c461a2cd92f4c1bbf50d5454de0d4b421\"\n+  integrity sha512-XIB2XbzHTN6ieIjfIMV9hlVcfPU26s2vafYWQcZHWXHOxiaRZYEDKEwdl129Zyg50+foYV2jCgtrqSA6qNuNSA==\n+  dependencies:\n+    defer-to-connect \"^1.0.1\"\n+\n+\"@szmarczak/http-timer@^4.0.5\":\n+  version \"4.0.5\"\n+  resolved \"https://registry.yarnpkg.com/@szmarczak/http-timer/-/http-timer-4.0.5.tgz#bfbd50211e9dfa51ba07da58a14cdfd333205152\"\n+  integrity sha512-PyRA9sm1Yayuj5OIoJ1hGt2YISX45w9WcFbh6ddT0Z/0yaFxOtGLInr4jUfU1EAFVs0Yfyfev4RNwBlUaHdlDQ==\n+  dependencies:\n+    defer-to-connect \"^2.0.0\"\n+\n+\"@tencent-sdk/capi@^1.1.2\":\n+  version \"1.1.8\"\n+  resolved \"https://registry.yarnpkg.com/@tencent-sdk/capi/-/capi-1.1.8.tgz#955130f9c7da88a599c05b3eae01b2f0e15a9beb\"\n+  integrity sha512-AmyMQndtxMsM59eDeA0gGiw8T2LzNvDhx/xl+ygFXXrsw+yb/mit73ndHkiHKcRA1EpNHTyD1PN9ATxghzplfg==\n+  dependencies:\n+    \"@types/request\" \"^2.48.3\"\n+    \"@types/request-promise-native\" \"^1.0.17\"\n+    request \"^2.88.0\"\n+    request-promise-native \"^1.0.8\"\n+\n+\"@types/cacheable-request@^6.0.1\":\n+  version \"6.0.1\"\n+  resolved \"https://registry.yarnpkg.com/@types/cacheable-request/-/cacheable-request-6.0.1.tgz#5d22f3dded1fd3a84c0bbeb5039a7419c2c91976\"\n+  integrity sha512-ykFq2zmBGOCbpIXtoVbz4SKY5QriWPh3AjyU4G74RYbtt5yOc5OfaY75ftjg7mikMOla1CTGpX3lLbuJh8DTrQ==\n+  dependencies:\n+    \"@types/http-cache-semantics\" \"*\"\n+    \"@types/keyv\" \"*\"\n+    \"@types/node\" \"*\"\n+    \"@types/responselike\" \"*\"\n+\n+\"@types/caseless@*\":\n+  version \"0.12.2\"\n+  resolved \"https://registry.yarnpkg.com/@types/caseless/-/caseless-0.12.2.tgz#f65d3d6389e01eeb458bd54dc8f52b95a9463bc8\"\n+  integrity sha512-6ckxMjBBD8URvjB6J3NcnuAn5Pkl7t3TizAg+xdlzzQGSPSmBcXf8KoIH0ua/i+tio+ZRUHEXp0HEmvaR4kt0w==\n+\n+\"@types/glob@^7.1.1\":\n+  version \"7.1.3\"\n+  resolved \"https://registry.yarnpkg.com/@types/glob/-/glob-7.1.3.tgz#e6ba80f36b7daad2c685acd9266382e68985c183\"\n+  integrity sha512-SEYeGAIQIQX8NN6LDKprLjbrd5dARM5EXsd8GI/A5l0apYI1fGMWgPHSe4ZKL4eozlAyI+doUE9XbYS4xCkQ1w==\n+  dependencies:\n+    \"@types/minimatch\" \"*\"\n+    \"@types/node\" \"*\"\n+\n+\"@types/http-cache-semantics@*\":\n+  version \"4.0.0\"\n+  resolved \"https://registry.yarnpkg.com/@types/http-cache-semantics/-/http-cache-semantics-4.0.0.tgz#9140779736aa2655635ee756e2467d787cfe8a2a\"\n+  integrity sha512-c3Xy026kOF7QOTn00hbIllV1dLR9hG9NkSrLQgCVs8NF6sBU+VGWjD3wLPhmh1TYAc7ugCFsvHYMN4VcBN1U1A==\n+\n \"@types/json-schema@^7.0.3\", \"@types/json-schema@^7.0.5\", \"@types/json-schema@^7.0.6\":\n   version \"7.0.7\"\n   resolved \"https://registry.yarnpkg.com/@types/json-schema/-/json-schema-7.0.7.tgz#98a993516c859eb0d5c4c8f098317a9ea68db9ad\"\n   integrity sha512-cxWFQVseBm6O9Gbw1IWb8r6OS4OhSt3hPZLkFApLjM8TEXROBuQGLAH2i2gZpcXdLBIrpXuTDhH7Vbm1iXmNGA==\n\n-\"@types/node@^14.14.22\":\n+\"@types/keyv@*\":\n+  version \"3.1.1\"\n+  resolved \"https://registry.yarnpkg.com/@types/keyv/-/keyv-3.1.1.tgz#e45a45324fca9dab716ab1230ee249c9fb52cfa7\"\n+  integrity sha512-MPtoySlAZQ37VoLaPcTHCu1RWJ4llDkULYZIzOYxlhxBqYPB0RsRlmMU0R6tahtFe27mIdkHV+551ZWV4PLmVw==\n+  dependencies:\n+    \"@types/node\" \"*\"\n+\n+\"@types/lodash@^4.14.123\":\n+  version \"4.14.168\"\n+  resolved \"https://registry.yarnpkg.com/@types/lodash/-/lodash-4.14.168.tgz#fe24632e79b7ade3f132891afff86caa5e5ce008\"\n+  integrity sha512-oVfRvqHV/V6D1yifJbVRU3TMp8OT6o6BG+U9MkwuJ3U8/CsDHvalRpsxBqivn71ztOFZBTfJMvETbqHiaNSj7Q==\n+\n+\"@types/long@^4.0.1\":\n+  version \"4.0.1\"\n+  resolved \"https://registry.yarnpkg.com/@types/long/-/long-4.0.1.tgz#459c65fa1867dafe6a8f322c4c51695663cc55e9\"\n+  integrity sha512-5tXH6Bx/kNGd3MgffdmP4dy2Z+G4eaXw0SE81Tq3BNadtnMR5/ySMzX4SLEzHJzSmPNn4HIdpQsBvXMUykr58w==\n+\n+\"@types/minimatch@*\":\n+  version \"3.0.3\"\n+  resolved \"https://registry.yarnpkg.com/@types/minimatch/-/minimatch-3.0.3.tgz#3dca0e3f33b200fc7d1139c0cd96c1268cadfd9d\"\n+  integrity sha512-tHq6qdbT9U1IRSGf14CL0pUlULksvY9OZ+5eEgl1N7t+OA3tGvNpxJCzuKQlsNgCVwbAs670L1vcVQi8j9HjnA==\n+\n+\"@types/node@*\", \"@types/node@^14.14.22\":\n   version \"14.14.22\"\n   resolved \"https://registry.yarnpkg.com/@types/node/-/node-14.14.22.tgz#0d29f382472c4ccf3bd96ff0ce47daf5b7b84b18\"\n   integrity sha512-g+f/qj/cNcqKkc3tFqlXOYjrmZA+jNBiDzbP3kH+B+otKFqAdPgVTGP1IeKRdMml/aE69as5S4FqtxAbl+LaMw==\n\n+\"@types/node@^13.7.0\":\n+  version \"13.13.40\"\n+  resolved \"https://registry.yarnpkg.com/@types/node/-/node-13.13.40.tgz#f655ef327362cc83912f2e69336ddc62a24a9f88\"\n+  integrity sha512-eKaRo87lu1yAXrzEJl0zcJxfUMDT5/mZalFyOkT44rnQps41eS2pfWzbaulSPpQLFNy29bFqn+Y5lOTL8ATlEQ==\n+\n \"@types/prop-types@*\":\n   version \"15.7.3\"\n   resolved \"https://registry.yarnpkg.com/@types/prop-types/-/prop-types-15.7.3.tgz#2ab0d5da2e5815f94b0b9d4b95d1e5f243ab2ca7\"\n@@ -214,6 +1395,35 @@\n     \"@types/prop-types\" \"*\"\n     csstype \"^3.0.2\"\n\n+\"@types/request-promise-native@^1.0.17\":\n+  version \"1.0.17\"\n+  resolved \"https://registry.yarnpkg.com/@types/request-promise-native/-/request-promise-native-1.0.17.tgz#74a2d7269aebf18b9bdf35f01459cf0a7bfc7fab\"\n+  integrity sha512-05/d0WbmuwjtGMYEdHIBZ0tqMJJQ2AD9LG2F6rKNBGX1SSFR27XveajH//2N/XYtual8T9Axwl+4v7oBtPUZqg==\n+  dependencies:\n+    \"@types/request\" \"*\"\n+\n+\"@types/request@*\", \"@types/request@^2.48.3\":\n+  version \"2.48.5\"\n+  resolved \"https://registry.yarnpkg.com/@types/request/-/request-2.48.5.tgz#019b8536b402069f6d11bee1b2c03e7f232937a0\"\n+  integrity sha512-/LO7xRVnL3DxJ1WkPGDQrp4VTV1reX9RkC85mJ+Qzykj2Bdw+mG15aAfDahc76HtknjzE16SX/Yddn6MxVbmGQ==\n+  dependencies:\n+    \"@types/caseless\" \"*\"\n+    \"@types/node\" \"*\"\n+    \"@types/tough-cookie\" \"*\"\n+    form-data \"^2.5.0\"\n+\n+\"@types/responselike@*\", \"@types/responselike@^1.0.0\":\n+  version \"1.0.0\"\n+  resolved \"https://registry.yarnpkg.com/@types/responselike/-/responselike-1.0.0.tgz#251f4fe7d154d2bad125abe1b429b23afd262e29\"\n+  integrity sha512-85Y2BjiufFzaMIlvJDvTTB8Fxl2xfLo4HgmHzVBz08w4wDePCTjYw66PdrolO0kzli3yam/YCgRufyo1DdQVTA==\n+  dependencies:\n+    \"@types/node\" \"*\"\n+\n+\"@types/tough-cookie@*\":\n+  version \"4.0.0\"\n+  resolved \"https://registry.yarnpkg.com/@types/tough-cookie/-/tough-cookie-4.0.0.tgz#fef1904e4668b6e5ecee60c52cc6a078ffa6697d\"\n+  integrity sha512-I99sngh224D0M7XgW1s120zxCt3VYQ3IQsuw3P3jbq5GG4yc79+ZjyKznyOGIQrflfylLgcfekeZW/vk0yng6A==\n+\n \"@typescript-eslint/eslint-plugin@^4.13.0\":\n   version \"4.14.0\"\n   resolved \"https://registry.yarnpkg.com/@typescript-eslint/eslint-plugin/-/eslint-plugin-4.14.0.tgz#92db8e7c357ed7d69632d6843ca70b71be3a721d\"\n@@ -440,6 +1650,33 @@\n   resolved \"https://registry.yarnpkg.com/@xtuc/long/-/long-4.2.2.tgz#d291c6a4e97989b5c61d9acf396ae4fe133a718d\"\n   integrity sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==\n\n+\"@zeit/node-file-trace@^0.6.5\":\n+  version \"0.6.5\"\n+  resolved \"https://registry.yarnpkg.com/@zeit/node-file-trace/-/node-file-trace-0.6.5.tgz#ffd443e4648eb88591c53b1a871a47bff651b62e\"\n+  integrity sha512-PbxtiZBU+axKtR9dU2/iQgK9+aP/ip94SqI/FCMWppmFPGlxGKHf8UnJZskFuqLZeWWzL+L+8SeipsNHATO9nw==\n+  dependencies:\n+    acorn \"^7.1.1\"\n+    acorn-class-fields \"^0.3.2\"\n+    acorn-export-ns-from \"^0.1.0\"\n+    acorn-import-meta \"^1.1.0\"\n+    acorn-numeric-separator \"^0.3.0\"\n+    acorn-static-class-features \"^0.2.1\"\n+    bindings \"^1.4.0\"\n+    estree-walker \"^0.6.0\"\n+    glob \"^7.1.3\"\n+    graceful-fs \"^4.1.15\"\n+    micromatch \"^4.0.2\"\n+    mkdirp \"^0.5.1\"\n+    node-gyp-build \"^4.2.2\"\n+    node-pre-gyp \"^0.13.0\"\n+    resolve-from \"^5.0.0\"\n+    rollup-pluginutils \"^2.8.2\"\n+\n+abbrev@1:\n+  version \"1.1.1\"\n+  resolved \"https://registry.yarnpkg.com/abbrev/-/abbrev-1.1.1.tgz#f8f2c887ad10bf67f634f005b6987fed3179aac8\"\n+  integrity sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==\n+\n abort-controller@3.0.0:\n   version \"3.0.0\"\n   resolved \"https://registry.yarnpkg.com/abort-controller/-/abort-controller-3.0.0.tgz#eaf54d53b62bae4138e809ca225c8439a6efb392\"\n@@ -447,17 +1684,51 @@ abort-controller@3.0.0:\n   dependencies:\n     event-target-shim \"^5.0.0\"\n\n+acorn-class-fields@^0.3.2:\n+  version \"0.3.7\"\n+  resolved \"https://registry.yarnpkg.com/acorn-class-fields/-/acorn-class-fields-0.3.7.tgz#a35122f3cc6ad2bb33b1857e79215677fcfdd720\"\n+  integrity sha512-jdUWSFce0fuADUljmExz4TWpPkxmRW/ZCPRqeeUzbGf0vFUcpQYbyq52l75qGd0oSwwtAepeL6hgb/naRgvcKQ==\n+  dependencies:\n+    acorn-private-class-elements \"^0.2.7\"\n+\n+acorn-export-ns-from@^0.1.0:\n+  version \"0.1.0\"\n+  resolved \"https://registry.yarnpkg.com/acorn-export-ns-from/-/acorn-export-ns-from-0.1.0.tgz#192687869bba3bcb2ef1a1ba196486ea7e100e5c\"\n+  integrity sha512-QDQJBe2DfxNBIMxs+19XY2i/XXilJn+kPgX30HWNYK4IXoNj3ACNSWPU7szL0SzqjFyOG4zoZxG9P7JfNw5g7A==\n+\n+acorn-import-meta@^1.1.0:\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/acorn-import-meta/-/acorn-import-meta-1.1.0.tgz#c384423462ee7d4721d4de83231021a36cb09def\"\n+  integrity sha512-pshgiVR5mhpjFVdizKTN+kAGRqjJFUOEB3TvpQ6kiAutb1lvHrIVVcGoe5xzMpJkVNifCeymMG7/tsDkWn8CdQ==\n+\n acorn-jsx@^5.3.1:\n   version \"5.3.1\"\n   resolved \"https://registry.yarnpkg.com/acorn-jsx/-/acorn-jsx-5.3.1.tgz#fc8661e11b7ac1539c47dbfea2e72b3af34d267b\"\n   integrity sha512-K0Ptm/47OKfQRpNQ2J/oIN/3QYiK6FwW+eJbILhsdxh2WTLdl+30o8aGdTbm5JbffpFFAg/g+zi1E+jvJha5ng==\n\n+acorn-numeric-separator@^0.3.0:\n+  version \"0.3.6\"\n+  resolved \"https://registry.yarnpkg.com/acorn-numeric-separator/-/acorn-numeric-separator-0.3.6.tgz#af7f0abaf8e74bd9ca1117602954d0a3b75804f3\"\n+  integrity sha512-jUr5esgChu4k7VzesH/Nww3EysuyGJJcTEEiXqILUFKpO96PNyEXmK21M6nE0TSqGA1PeEg1MzgqJaoFsn9JMw==\n+\n+acorn-private-class-elements@^0.2.7:\n+  version \"0.2.7\"\n+  resolved \"https://registry.yarnpkg.com/acorn-private-class-elements/-/acorn-private-class-elements-0.2.7.tgz#b14902c705bcff267adede1c9f61c1a317ef95d2\"\n+  integrity sha512-+GZH2wOKNZOBI4OOPmzpo4cs6mW297sn6fgIk1dUI08jGjhAaEwvC39mN2gJAg2lmAQJ1rBkFqKWonL3Zz6PVA==\n+\n+acorn-static-class-features@^0.2.1:\n+  version \"0.2.4\"\n+  resolved \"https://registry.yarnpkg.com/acorn-static-class-features/-/acorn-static-class-features-0.2.4.tgz#a0f5261dd483f25196716854f2d7652a1deb39ee\"\n+  integrity sha512-5X4mpYq5J3pdndLmIB0+WtFd/mKWnNYpuTlTzj32wUu/PMmEGOiayQ5UrqgwdBNiaZBtDDh5kddpP7Yg2QaQYA==\n+  dependencies:\n+    acorn-private-class-elements \"^0.2.7\"\n+\n acorn@^6.4.1:\n   version \"6.4.2\"\n   resolved \"https://registry.yarnpkg.com/acorn/-/acorn-6.4.2.tgz#35866fd710528e92de10cf06016498e47e39e1e6\"\n   integrity sha512-XtGIhXwF8YM8bJhGxG5kXgjkEuNGLTkoYqVE+KMR+aspr4KGYmKYg7yUe3KghyQ9yheNwLnjmzh/7+gfDBmHCQ==\n\n-acorn@^7.4.0:\n+acorn@^7.1.1, acorn@^7.4.0:\n   version \"7.4.1\"\n   resolved \"https://registry.yarnpkg.com/acorn/-/acorn-7.4.1.tgz#feaed255973d2e77555b83dbc08851a6c63520fa\"\n   integrity sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==\n@@ -470,6 +1741,26 @@ adjust-sourcemap-loader@3.0.0:\n     loader-utils \"^2.0.0\"\n     regex-parser \"^2.2.11\"\n\n+adm-zip@^0.4.13, adm-zip@^0.4.16:\n+  version \"0.4.16\"\n+  resolved \"https://registry.yarnpkg.com/adm-zip/-/adm-zip-0.4.16.tgz#cf4c508fdffab02c269cbc7f471a875f05570365\"\n+  integrity sha512-TFi4HBKSGfIKsK5YCkKaaFG2m4PEDyViZmEwof3MTIgzimHLto6muaHVpbrljdIvIrFZzEq/p4nafOeLcYegrg==\n+\n+adm-zip@^0.5.1:\n+  version \"0.5.1\"\n+  resolved \"https://registry.yarnpkg.com/adm-zip/-/adm-zip-0.5.1.tgz#32e51c6fe88370f4389b424567b78a345e79ebc6\"\n+  integrity sha512-a5ABmIFUJ9OxHV5zrXM9Q41JzpRIflFtdgpL4UQM9DsTHHxQzPRaeyAdnMW7kxL0NRWm/NHafJdj6pO+ty7L2g==\n+\n+after@0.8.2:\n+  version \"0.8.2\"\n+  resolved \"https://registry.yarnpkg.com/after/-/after-0.8.2.tgz#fedb394f9f0e02aa9768e702bda23b505fae7e1f\"\n+  integrity sha1-/ts5T58OAqqXaOcCvaI7UF+ufh8=\n+\n+agent-base@5:\n+  version \"5.1.1\"\n+  resolved \"https://registry.yarnpkg.com/agent-base/-/agent-base-5.1.1.tgz#e8fb3f242959db44d63be665db7a8e739537a32c\"\n+  integrity sha512-TMeqbNl2fMW0nMjTEPOwe3J/PRFP4vqeoNuQMG0HlMrtm5QxKqdvAkZ1pRBQ/ulIyDD5Yq0nJ7YbdD8ey0TO3g==\n+\n agent-base@6:\n   version \"6.0.2\"\n   resolved \"https://registry.yarnpkg.com/agent-base/-/agent-base-6.0.2.tgz#49fff58577cfee3f37176feab4c22e00f86d7f77\"\n@@ -487,7 +1778,7 @@ ajv-keywords@^3.1.0, ajv-keywords@^3.4.1, ajv-keywords@^3.5.2:\n   resolved \"https://registry.yarnpkg.com/ajv-keywords/-/ajv-keywords-3.5.2.tgz#31f29da5ab6e00d1c2d329acf7b5929614d5014d\"\n   integrity sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==\n\n-ajv@^6.1.0, ajv@^6.10.0, ajv@^6.10.2, ajv@^6.12.4, ajv@^6.12.5:\n+ajv@^6.1.0, ajv@^6.10.0, ajv@^6.10.2, ajv@^6.12.3, ajv@^6.12.4, ajv@^6.12.5, ajv@^6.12.6:\n   version \"6.12.6\"\n   resolved \"https://registry.yarnpkg.com/ajv/-/ajv-6.12.6.tgz#baf5a62e802b07d977034586f8c3baf5adf26df4\"\n   integrity sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg…",
        "tree": {
          "url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/git/trees/91ea95b739db76352b29e95f9dc0841e73a9c1d8",
          "sha": "91ea95b739db76352b29e95f9dc0841e73a9c1d8"
        },
        "comment_count": 1
      },
      "author": {
        "login": "kawamataryo",
        "id": 11070996,
        "node_id": "MDQ6VXNlcjExMDcwOTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/11070996?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kawamataryo",
        "html_url": "https://github.com/kawamataryo",
        "followers_url": "https://api.github.com/users/kawamataryo/followers",
        "following_url": "https://api.github.com/users/kawamataryo/following{/other_user}",
        "gists_url": "https://api.github.com/users/kawamataryo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kawamataryo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kawamataryo/subscriptions",
        "organizations_url": "https://api.github.com/users/kawamataryo/orgs",
        "repos_url": "https://api.github.com/users/kawamataryo/repos",
        "events_url": "https://api.github.com/users/kawamataryo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kawamataryo/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "kawamataryo",
        "id": 11070996,
        "node_id": "MDQ6VXNlcjExMDcwOTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/11070996?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kawamataryo",
        "html_url": "https://github.com/kawamataryo",
        "followers_url": "https://api.github.com/users/kawamataryo/followers",
        "following_url": "https://api.github.com/users/kawamataryo/following{/other_user}",
        "gists_url": "https://api.github.com/users/kawamataryo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kawamataryo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kawamataryo/subscriptions",
        "organizations_url": "https://api.github.com/users/kawamataryo/orgs",
        "repos_url": "https://api.github.com/users/kawamataryo/repos",
        "events_url": "https://api.github.com/users/kawamataryo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kawamataryo/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/commits/7294e9d47b307c8e8831a5d460279345fd9d82ff",
          "html_url": "https://github.com/kawamataryo/sandbox-for-nextjs-ssg-csr/commit/7294e9d47b307c8e8831a5d460279345fd9d82ff",
          "sha": "7294e9d47b307c8e8831a5d460279345fd9d82ff"
        }
      ],
      "repository": {
        "id": 331876420,
        "node_id": "MDEwOlJlcG9zaXRvcnkzMzE4NzY0MjA=",
        "name": "sandbox-for-nextjs-ssg-csr",
        "full_name": "kawamataryo/sandbox-for-nextjs-ssg-csr",
        "private": false,
        "owner": {
          "login": "kawamataryo",
          "id": 11070996,
          "node_id": "MDQ6VXNlcjExMDcwOTk2",
          "avatar_url": "https://avatars.githubusercontent.com/u/11070996?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/kawamataryo",
          "html_url": "https://github.com/kawamataryo",
          "followers_url": "https://api.github.com/users/kawamataryo/followers",
          "following_url": "https://api.github.com/users/kawamataryo/following{/other_user}",
          "gists_url": "https://api.github.com/users/kawamataryo/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/kawamataryo/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/kawamataryo/subscriptions",
          "organizations_url": "https://api.github.com/users/kawamataryo/orgs",
          "repos_url": "https://api.github.com/users/kawamataryo/repos",
          "events_url": "https://api.github.com/users/kawamataryo/events{/privacy}",
          "received_events_url": "https://api.github.com/users/kawamataryo/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/kawamataryo/sandbox-for-nextjs-ssg-csr",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr",
        "forks_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/forks",
        "keys_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/teams",
        "hooks_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/hooks",
        "issue_events_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/issues/events{/number}",
        "events_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/events",
        "assignees_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/assignees{/user}",
        "branches_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/branches{/branch}",
        "tags_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/tags",
        "blobs_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/languages",
        "stargazers_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/stargazers",
        "contributors_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/contributors",
        "subscribers_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/subscribers",
        "subscription_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/subscription",
        "commits_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/contents/{+path}",
        "compare_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/merges",
        "archive_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/downloads",
        "issues_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/issues{/number}",
        "pulls_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/labels{/name}",
        "releases_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/releases{/id}",
        "deployments_url": "https://api.github.com/repos/kawamataryo/sandbox-for-nextjs-ssg-csr/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/Lewuathe/mlir-hello/commits/5f63028555f11989b78d61371cb851f56e9779f3",
      "sha": "5f63028555f11989b78d61371cb851f56e9779f3",
      "node_id": "MDY6Q29tbWl0MzE3NzUwNTkwOjVmNjMwMjg1NTVmMTE5ODliNzhkNjEzNzFjYjg1MWY1NmU5Nzc5ZjM=",
      "html_url": "https://github.com/Lewuathe/mlir-hello/commit/5f63028555f11989b78d61371cb851f56e9779f3",
      "comments_url": "https://api.github.com/repos/Lewuathe/mlir-hello/commits/5f63028555f11989b78d61371cb851f56e9779f3/comments",
      "commit": {
        "url": "https://api.github.com/repos/Lewuathe/mlir-hello/git/commits/5f63028555f11989b78d61371cb851f56e9779f3",
        "author": {
          "date": "2023-02-18T10:57:51.000+09:00",
          "name": "Kai Sasaki",
          "email": "lewuathe@gmail.com"
        },
        "committer": {
          "date": "2023-02-18T10:57:51.000+09:00",
          "name": "Kai Sasaki",
          "email": "lewuathe@gmail.com"
        },
        "message": "Squashed 'thirdparty/llvm-project/' changes from 23c1822d1a74..63c77bf71d80\n\n63c77bf71d80 [lldb] Make persisting result variables configurable\n920b46e108b2 [lldb] Add expression command options in dwim-print\ne49b93ef29a6 [gn build] Port 07e3ca238e68\n07e3ca238e68 Revert \"[TextAPI] Implement TBDv5 Reader\"\n4be17641b05d [TextAPI] wrap returned Errors in std::move\n347954314c97 [gn build] Port b861b1225380\nb861b1225380 [TextAPI] Implement TBDv5 Reader\nb309bc04eebc [GlobalISel] Combine out-of-range shifts to undef.\nd6d59e660bc7 [Clang] Fix __VA_OPT__ implementation so that it treats the concatenation of a non-placemaker token and placemaker token as a non-placemaker token\n34aff47521c3 [RISCV] Use MCSubtargetInfo::hasFeature where possible. NFC\nd9e4c1044072 [AArch64] Simplify with MCSubtargetInfo::hasFeature. NFC\nc0f3ac1d0015 Revert \"[Fuchsia] Enable llvm-driver build\"\nb1e09b5fa679 [libc++][NFC] Remove TODOs that are already done\n8007bcc13f8f [llvm-cov] Create syntax to pass source w/o binary.\n4eadd19cc423 [Fuchsia] Enable llvm-driver build\nef3a3b0726f4 [libc++][NFC] Replace _VSTD and _LIBCPP_INLINE_VISIBILITY in <__atomic/*>\n10b7cd660c73 [RISCV] Select signed and unsigned bitfield extracts for XTHeadBb\n2f88c07cf820 [lldb] StructuredData should not truncate uint64_t values\n8caa8d95afe4 [libc++][format] Addresses LWG3810.\n01afb3fb9902 [NVPTX] Use by default 'sm_60' architecture when expanding %ptxas-verify macro.\nf50cad2c55df [libc++] Mark a test relying on `typeid` as unsupported without RTTI.\nf6b724f1f9c8 [libc] Add basic fuzz target for the printf parser\n47fb6d1c65ec [libc] add mock arg list\n5fa9933c13e7 [mlir][tensor] Do not use affine ops on non-perfect-tiling unpack cases.\n2b2b8409e684 [RISCV] For rv32, accept constants like 0xfffff800 as a valid simm12.\nefe7c4b77bed Revert \"[RISCV] Add performMULcombine to perform strength-reduction\"\n16a66af0a0fe Revert \"[RISCV] Add vendor-defined XTheadMemPair (two-GPR Memory Operations) extension\"\n6774ba841145 [RISCV] xtheadmac: fix commutativity issue for the in/out register\n20cc23c708f0 [RISCV] Add performMULcombine to perform strength-reduction\nd2918544a7fc [RISCV] Add vendor-defined XTheadMemPair (two-GPR Memory Operations) extension\n21a543656cf4 [libc++] Add missing include in <__atomic/cxx_atomic_impl.h>\ndf56b55e1288 [RISCV][CodeGen] Add codegen patterns for experimental zfa extension (try 2)\n04d59f2ab3a8 [IR] Fix a warning\nf25cfd339a80 [mlir] Reintroduce API for creating operations with a DictionaryAttr\nbe83a4b257c8 [ADT] Fix tests for `StringMap::at` and `DenseMap::at`\n42944abf8583 [RISCV] Improve isInterleaveShuffle to handle interleaving the high half and low half of the same source.\nbc6e10c9efca [ELF][llvm-objcopy] Reject duplicate SHT_SYMTAB sections\n998ad085e865 Reland [gn build] Support linux/win compiler-rt cross compilation\n7a035de2d6c4 Revert \"[gn build] Support linux/win compiler-rt cross compilation\"\n2d85683f987a [lib++][format] Uses the new exception test macros.\nc0947dc44109 [RISCV][MC] Add support for experimental zfa extension (FLI instruction not included) (try 3)\nd73eb92cc673 [gn build] Support linux/win compiler-rt cross compilation\ncf86855c4453 [M68k] fix test regression introduced by D140180\n261d21f8c375 [libc++] Fixes a flaky test.\nc8399811e7b1 [gn build] Support building x86/64 Android libraries\n1ceb79e2e075 Port PlaceSafepoints pass to the new pass manager\n4180b29d206f [flang][runtime] Support DT edit descriptor in result of READ(SIZE=)\n7067aee367d4 [libc++][CI] Switches to clang-format-16.\nf7f86451ecd7 [libc++] Improve the format ignorelist generation.\n22b564c64b73 [RISCV] Add preferred function and loop alignment RISCVSubtarget. NFC\nb22aa3d74f27 [libc++][NFC] Rename _LIBCPP_NO_EXCEPTIONS to _LIBCPP_HAS_NO_EXCEPTIONS\n132003603ae3 [ADT] Add `at` method (assertive lookup) to DenseMap and StringMap\n2b51c8cd2ac6 [clang-tidy] Clarify bugprone-branch-clone diagnostic message\ndf82394e7a2d [libc][bazel] Export .bzl files for libc/test and libc/test/src/math.\n3476b56f0c78 [libc++][test] Adds more generic test macros.\n783cbf70abca [gn build] Port bf0f94a5cf82\nddeb55ab3359 [mlir] add option to multi-buffering\n4ecc6af813e2 [InstCombine] create a pass options container and add \"use-loop-info\" argument\ne03d254bbd54 [SLP]Do not reduce repeated values, use scalar red ops instead.\nbf0f94a5cf82 New SetOperations and unittesting for all SetOperations\n17a90f1196c1 Tighten up a modules test\n87a0479538fe [mlir][llvm] Fuse access_group & loop export (NFC)\ncf4df6168838 [SVE] Add intrinsics for floating-point operations that explicitly undefine the result for inactive lanes.\n83e9ef7e519a [mlir][standalone] Extend sample with custom type\naf6c0b6d8c9d [clang][CodeGen] Use base subobject type layout for potentially-overlapping fields\n4bf6cc63aa77 GH60642: Fix ICE when checking a lambda defined in a concept definition\n06621ecdaf41 [Clang] Convert some tests to opaque pointers (NFC)\nf098fb69f164 [Clang] Convert some tests to opaque pointers (NFC)\n4901245481b6 Fix Clang sphinx build\n6f3a756998b3 [RISCV][NFC] Add missing immediate operand types.\ne133cb9c6daf [mlir][llvm] Add DINamespace attribute\n276358fd3af5 [mlir][llvm] Make DI param optional to match LLVM\n76c638d1ddec [gn build] Port 46db8d822ecd\n46db8d822ecd [libc++] Granularize <atomic>\n62e4f81c6793 [AMDGPU] Simplify widenScalar condition for BigTy for G_(UN)MERGE_VALUES\nf3fa1086c7f8 [Clang] Convert some tests to opaque pointers (NFC)\nafcf70aa6de7 [analyzer] Remove unjustified assert from EquivalenceClass::simplify\n40a20ae6ab80 [libc++] Granularize <bit> includes\n2693efa8a5bc [MachineCombiner] Support local strategy for traces\ne6e0ba8d20b4 [Clang] Convert some tests to opaque pointers (NFC)\ncdf8f064694c [mlir] Add a folder for lbs, ubs, steps of scf.forall.\neb14186771e7 Revert \"[LLD] [COFF] Don't try to detect MSVC installations in mingw mode\"\nbf91cd6ea9d6 [mlir][llvm] Verify LLVM module before import\nda3623de2411 [JT] Always create BPI/BFI when running in legacy PM\n159073bc0a87 [clang-repl] Support compound statement as a top-level statement.\neb2f946e780c [mlir][scf] Rename ForeachThreadOp->ForallOp, PerformConcurrentlyOp->InParallelOp.\n65898e526060 [ConstantRange] Handle `Intrinsic::ctlz`\na1e80c69223a [Support] [Windows] Don't check file access time in equivalent(file_status, file_status)\n389bfbd66d6f [LLD] [COFF] Don't try to detect MSVC installations in mingw mode\n3d84f4268dd9 [Clang] Convert some tests to opaque pointers (NFC)\n6f4af64b7422 [mlir][llvm] Add atomic support to the LoadOp.\n55a18bfe9b65 [Clang] Convert some tests to opaque pointers (NFC)\n58dada5f0aad [AMDGPU] Add cross-project-tests for WMMA builtins\na048d7394be5 [MLIR][LLVM] Only disallow inlining for selected function attributes.\n57c81917d3a5 [Clang] Convert update_cc_test_checks tests to opaque pointers (NFC)\na96cbeb45062 [DAGCombiner] Teach MatchContextClass classes to use TargetLowering::isOperationLegalOrCustom().\n310deca248c8 [mlir] Add loop bounds to scf.foreach_thread.\n6d5ea6b12342 Revert \"[Coroutines] Stop supportting std::experimental::coroutine_traits\"\nc4e6e771f255 [Coroutines] Stop supportting std::experimental::coroutine_traits\nf2404a58b0b4 [NDF] Revert earlier nfc commit to test commit access\n511d55060454 [NFC] Testing new commit access by adding newline\ne0528382b570 [lldb] Add missing decorators import in TestPoPersistentResult.py\n5552c4ddd76d [lldb] Limit TestPoPersistentResult to darwin\n3328ee550c86 [lldb] Suppress persistent result when running po\nb3215c810617 [lldb] Rename SetResultIsInternal to SetSuppressPersistentResult (NFC)\n39811e2e537d [llvm][test] enable/disable -verify-machineinstrs where possible for callbr\nb05dc1b8766a [clang-format] Add a space between an overloaded operator and '>'\n7c9df7743521 [ADT] Provide C++20-style bit functions\n93de5f13b9dd [CodeGen] Fix warnings\n0eabb884abeb [mlir][gpu] NFC let user pick the threadID values when distributing foreach_thread\ne3a88a41af83 Revert \"[mlir][vector] Prevent duplicating operations during vector distribute\"\ncda4a0e918b5 [Sema] Relax a failing assertion in TransformBlockExpr\n25a461046ec2 OpenMP: Regenerate test checks\n77af16bcb78a Recommit \"Remove incorrect comment around `truncateAVX512SetCCNoBWI`; NFC\" (2nd Try)\n9e9444ca7d4b Recommit \"Transform vector SET{LE/ULT/ULE} -> SETLT and SET{GE/UGT/UGE} -> SETGT if possible\" (2nd Try)\nffe982f96bff [lldb] Stop generating swig bindings for SBLaunchInfo copy constructor\n8045ba89488c [ThinLTO/WPD] Handle function alias in vtable correctly\n54186d33c3a0 [clang] add __has_extension(gnu_asm_goto_with_outputs_full)\naf6656338db3 [clang] fix -Wuninitialized for asm goto outputs on indirect edges.\n329ef60f3e21 [Clang] support for outputs along indirect edges of asm goto\nb1bc723dfe97 [Clang] refactor CodeGenFunction::EmitAsmStmt NFC\na3a84c9e2511 [llvm] add CallBrPrepare pass to pipelines\n5cc1016a57b3 [llvm][SelectionDAGBuilder] codegen callbr.landingpad intrinsic\n28d45c843cd0 [llvm][CallBrPrepare] use SSAUpdater to use intrinsic value\n094190c2f529 [llvm][CallBrPrepare] add llvm.callbr.landingpad intrinsic\n0a39af0eb72d [llvm][CallBrPrepare] split critical edges\nfb471158aa0d [llvm] boilerplate for new callbrprepare codegen IR pass\n45a291b5f609 [Dominators] check indirect branches of callbr\ndf277ec67efd [X86][MC] Fix the bug of -output-asm-variant=1 for intel syntax\n7495a2e51bff [Attributor][FIX] Ensure we adjust types properly\n58bedaed0fea [LLDB] Remove unused variable 'lang_rt' in ClangExpressionParser.cpp (NFC)\n2738dc0bd3b7 [ComplexLogicCombine] Precommit tests for complex logic combine init patch; NFC\n8116fc592c5e Revert \"[LLDB] Enable 64 bit debug/type offset\"\nf253bb640d97 [WebAssembly] Fix simd bit shift intrinsics codegen\ne073de833671 [WebAssembly] Update wasm.c with update_cc_test_checks.py. NFC\ne6758c81f867 [mlir][sparse] comment out test cases in sparse_conversion with similiar behavior.\n65277494f04d [flang][runtime] Allow record advancement in child I/O via '/' control edit descriptor\n52a774fd4c18 [PowerPC] remove XXSWAPD after load from CP which is a splat value\nfb7c38073e80 [AArch64][ISel] Always use pre-inc/post-inc addressing mode for auto-indexed load/store with constant offset.\n0af5f84a13be [mlir][sparse] split reshape.mlir into expand/collapse_shape.mlir.\n22cdeb54a123 [MLIR][OpenMP] Add Conversion for Atomic Update Op\nb374423304a8 [Pipeline] Move ControlHeightReduction to module optimization pipeline\n9e8d9316ceaf [mlir][sparse] allow foreach operation to generate out-of-order loop on non-annotated tensor.\n2062e90aa531 [LLDB] Enable 64 bit debug/type offset\nb66fdbad44b3 [gn build] Manually port D143983\n956c7dca29c7 [Object][NFC] Remove unneeded llvm_unreachable\n56e41fcf5028 [PowerPC] Bail out of FISel when lowering long calls\nc2e248c6aea6 [mlir][sparse] Remove the expansion of symmetric MTX in the sparse tensor storage.\n5172877bbddc [Libomptarget] Check errors when synchronizing the async queue\n48c8e1602048 Revert \"[Libomptarget] Check errors when synchronizing the async queue\"\n53862b5658dd RenderScript still exists as a clang language, so handle as invalid\nf83e6c6d7a8d [Bazel][mlir] Fix build errors\nf5cca3c5ce7a [flang] Handle expression in SELECT TYPE selector\nb8d3d02d7c8c Remove now unused enum.\n5f5cf6029852 [Pipeline] Remove -enable-npm-O3-nontrivial-unswitch flag\n4d16ebd6c971 [Pipeline] Remove -enable-no-rerun-simplification-pipeline flag\ndccd1d736c25 [libc][bazel] add string to float targets\n662548c82683 [lldb] Replace SB swig interfaces with API headers\n23d43e697757 [libc++] Add regression test for std::hash implementation in ABI v1\nc6c41c31f1e5 [mlir][linalg][tensor] Delete duplicate tests and fix typo in filename\n17e2497593d6 Remove Renderscript LLDB\n22e199e6afb1 [RISCV] Accept zicsr and zifencei command line options\n372820bf571c [libunwind][PowerPC] Fix saving/restoring VSX registers on LE systems\nfbe210dc7a6a [libc] Implement htonl and htons\n35742743d273 [Hexagon] Fix number of arguments in call to DAG.getNode for VINSERTW0\nf842b7a6b8f4 [HLSL] add log library functions\n891b0910b3c4 Revert \"[RISCV][MC] Add support for experimental zfa extension (FLI instruction not included)\"\n8a17cd9905c2 AMDGPU: Add a regression test case for D143963\n8e5a41e8271f Revert \"AMDGPU: Override getNegatedExpression constant handling\"\nbbef38352fba Revert \"[LowerTypeTests] Support generating Armv6-M jump tables.\"\n9305b63d6951 [AMDGPU] Add another G_UNMERGE_VALUES legalization test case\nd9a04d1d5453 [libc] Support running tests for Pigweed\n2ac85cd56381 [AMDGPU] Regenerate check lines to enable updating for D144050.\n0871337d97f7 [XCore] Adapt Clang tests to opaque pointers.\n7ed26ad10cef [flang] Always incorporate parent types' special generic bindings\n1538761303ce [LSR] Add test case which shows additional LSR with D144050.\n861709107b43 [Libomptarget] Check errors when synchronizing the async queue\nf6fa5a66d8a8 [RISCV][MC] Add support for experimental zfa extension (FLI instruction not included)\neb3dfa0a2487 [Clang] Convert some tests to opaque pointers (NFC)\n081815b4e32c [Clang] Regenerate check lines (NFC)\n2d6713b5b7a2 Revert \"[RISCV][MC] Add support for experimental zfa extension(FLI instruction not included)\"\n80334ca1e285 Revert \"Update: [RISCV][MC] Add support for experimental zfa extension(FLI instruction not included)\"\n80abf86d506b Revert \"[RISCV][CodeGen] Add codegen pattern for experimental zfa extension (FLI and FCVTMOD not included)\"\n7abe3497e72a [LSR] Improve filtered uses in NarrowSearchSpaceByPickingWinnerRegs\na768112e0641 [Clang] Convert some tests to opaque pointers (NFC)\nf6ddf7781471 [LowerTypeTests] Support generating Armv6-M jump tables.\nafde3f549d7a llvm-tblgen: Apply IWYU partially\n3a6f3b44e434 [flang] lower hlfir.matmul into fir runtime call\n91cbc3f2d83d [flang] lower matmul intrinsic to hlfir.matmul operation\n09472ba31504 [flang] add hlfir.matmul operation\nec640382fc93 [mlir][MemRef] NFC - Add debug information to MultiBuffer.cpp\ne44f405bb41b [mlir][bufferization] Fix bug in findValueInReverseUseDefChain\n4565bc00de6e [DataLayout] Use separate vectors to store alignment (NFC)\nace6072bca65 [mlir] PromoteBuffersToStackPass - Copy attributes of original AllocOp\n28542e99bb82 [mlir][llvm] Use before def debug intrinsic import\n8421307b6b16 [Clang] Convert some tests to opaque pointers (NFC)\nb32b7068ef8e [ConstraintSystem] Use sparse representation for constraints. (NFC)\n66749ce92707 [ARM] Add Thumb LSR codegen tests. NFC\na9e4bb387b21 [flang][hlfir] Array constructor lowering [part 2/4]\nffde9f17300b [flang][hlfir] Array constructor lowering [part 1/4]\n849c4402261a [Flang][OpenMP] Added parser support for device_type clause\n5c988cba4a66 [flang] Use derivedType from toAddedum to get updated components\n96179dff46a9 [mlir][Linalg] Add a transform dialect op to rewrite ops to destination passing style.\nb58daf91d677 Add a lowering for memref.dealloc with unranked memrefs.\nba23bca0a83d [SME2][AArch64] Add multi-single multiply-add long long intrinsics\ne97fc5007e72 [flang] Add TODO instead of crashing on assert\n83014d877017 [libc++] LWG 3857: allow `string_view` conversion when only traits vary\n574e417460cd [clang] Fix a bug that allowed some overflowing octal escape sequences\n5bdd0beeee56 [MachineCombiner][NFC] Rename `MinInstr` to `TraceEnsemble`\na3d1de3e2908 [LV] Move invalid cost remark code to separate function (NFC).\n873ea45115a8 [mlir][llvm] Rename void debug type to null\nc76acb9dffec [UniformityAnalysis] Fix some file headers and pass names\n130d2953d878 [Flang][OpenMP] Fix a corner case where target region is empty\n4bc2357c3de2 [mlir][MemRef|Tensor] Fix the handling of DimOp\n7fbcc24409ef [llvm-debuginfo-analyzer] (08a/09) - Memory Management\n2002c82278f6 AArch64: count callee stack we use when estimating scavenging requirements.\n819dfc338bdd [AMDGPU] Autogenerate checks for several tests. NFCI\n0e1fb48bb95a [lld-macho] Use uint64_t instead of size_t to fix 32 bit test failures\neeb125659c17 [InstSimplify] Slightly optimize simplifyLoad() (NFC)\n37b7a60cd74b [NFC] Add a test for C++20 Modules\na1b78fb929fc [JT][CT] Preserve exisiting BPI/BFI during JumpThreading\nf8d5f0e53b04 [NFC] Add two tests for C++ modules\n4469ec1d196f [mlir][llvm] Import alias scope metadata from LLVM IR.\nc9fad20f6a66 [InstCombine] Call simplifyInsertValueInst()\n6bec2c30777f [InstCombine] Add additional aggregate reconstruction test (NFC)\n9ca2c309ab06 [InstSimplify] Fix poison safety in insertvalue fold\nb0de87268a60 [flang] Retrieve the correct scope when lowering SELECT TYPE\n86c8ea9ac922 [mlir] Add check for value that might be null.\nf62b084e92e0 [LoopDeletion] Remove legacy pass\n999ead9dc908 [Modules] Code cleanup after removing ModulesTS\n612f3ac26f8c [Modules] Remove -fmodules-ts\n96df79af029b [X86] Support load/store for bf16 in avx\n7e6e636fb683 Use llvm::has_single_bit<uint32_t> (NFC)\n68e81d7e45c7 [ADT] Use llvm::rotr (NFC)\nd54888a3ebb1 [Modules] Refactor modules-ts tests to use standard c++ modules\nfc6d517e2f33 [RISCV][CodeGen] Add codegen pattern for experimental zfa extension (FLI and FCVTMOD not included)\n5e815372480d [Clang][RISCV] Sort test cases into its mnemonics\na1aad28d297a [mlir][vector] NFC: Improve vector type accessor methods\n5382d28815d8 [mlir] Use std::optional instead of llvm::Optional (NFC)\n43059255ce53 [RISCV] Make a const member function static. NFC\n321cd52ba264 Update: [RISCV][MC] Add support for experimental zfa extension(FLI instruction not included)\n54c136e6c630 [RISCV][MC] Add support for experimental zfa extension(FLI instruction not included)\n7081e59dd12a [MC] Remove an unneeded comparison on cast result. NFC\n9a2cb3a6925f Fix bazel build\nf30ca850ef8b [mlir][sparse] reduce the input size in stress_test.py to make it finish in time.\ndcf18e4757b2 [debugserver] Initialize logging earlier in the startup sequence\nc738b430c46a [mlir][sparse] introduce operations to query sparse tensor slice offset/strides at the given dimenion\na851d46e07c1 [Clang][Driver] Fix integer normalization with KCFI\n4eee77873bca [LoopReroll] Remove legacy pass (unused in the pipeline)\ne2e83f4c8f1d [mlir][sparse] support coiteration over sparse tensor slices\n22b7685401e8 Reland \"[hwasan] Add definitions for missing operator delete functions\"\na9269773eb94 [scudo] Improve the uses of roundUpTo/roundDownTo/isAligned\n94a391b94972 [scudo] Calling iterateOverChunks requires holding lock\nae1bd3adf02f [scudo] Add thread-safety annotations on TSD data members\ne7d3f43eafdd [LoopFlatten] Inline an external linkage function not in llvm::. NFC\n48bfed77cf86 [LoopFlatten] Remove legacy pass (unused in the pipeline)\nf1ddfa6d8a72 [lldb] Remove pydoc import during script interpreter init\n7d62bc9cd380 [mlir][sparse] disable sparse convolution test cases.\n21ccddd2cee1 [LoopInterchange] Remove legacy pass (unused in the pipeline)\n66b3f4a40731 [libc][bazel] Add missing dependency for stdlib tests.\n9ed587ea9bec [mlir][sparse] split sparse concatenate test cases smaller ones.\nae7942e2960e [mlir][sparse] adding `SparseTensorType::get{Pointer,Index}Type` methods\n8bd0e9481cfc Revert \"Transform vector SET{LE/ULT/ULE} -> SETLT and SET{GE/UGT/UGE} -> SETGT if possible\"\n7adf26e7683d Revert \"Remove incorrect comment around `truncateAVX512SetCCNoBWI`; NFC\"\nc38c8d674383 [PseudoProbe] Refactoring a test\n7058f083020d [gn build] Port 6f3e6a765a9e\nf5aa8d191a5b [Clang][docs] Update the release notes page to the new skeleton\n6313ece5ce94 Revert \"[hwasan] Add definitions for missing operator delete functions\"\n052ae28ac77f [RISCV] Use !cond instead of multiple !if in RISCVInstrInfoVPseudos.td. NFC\nd464edde9571 [X86][Win64] Avoid statepoints prior to SEH epilogue\nd950bdc73eb2 [mlir][sparse] misc code cleanup\n74a5d7471fbd [flang][runtime] MayAlias() must be false for unallocated descriptors\n08ecef8e338f [RISCV] Add CLB/CLH/SLB/SLH formats for Zcb instructions.\n792a724f894a [RISCV] Remove some vestiges of Zbp and Zbt extensions. NFC\n8c1f77af7fd1 [clang-format] Fix windows build.\ne6fbfb1ff1d3 [NFC] Make Module::getIFuncList() private\nbb4fc6b6d6b4 [mlir][sparse] Adding `SparseTensorType::{operator==, hasSameDimToLvlMap}`\nee437afa912b [flang] Don't add a source range to a type instantiation's scope\n6f3e6a765a9e Revert D129735 \"[RISCV] Add new pass to transform undef to pseudo for vector values.\"\na9797d7d2d78 [C2x] Implement the `unreachable` macro for WG14 N2826\nd6ff0808618c [hwasan] Add definitions for missing operator delete functions\n565048543b35 [NFC][SVE] Refactor isel for floating multiply-add operations to use PatFrags.\n72584d91990b [scudo] Fix inconsistent signed/unsigned comparison\ndf2ea2fc2839 [ConstriantElimination] Add NODEBUG condition around `dump`\n8a7b5e0e50de [AArch64] Guard extra uses in mls combine.\nc3ca29080c17 [mlir] bazel fix\nbe75cf931f3f [mlir][tensor] Fix a bug in tiling unpack op.\na41e1ea2a746 [libc++][CI] Starts using Clang 17.\neddec9de44cd [Pseudo probe] Duplicate probes in vectorized loop body.\n57865bc5ad27 [CodeGen] Add a flag to `Address` and `Lvalue` that is used to keep track of whether the pointer is known not to be null\n9048ea28da95 Reland \"[mlir] Make the vast majority of intgration and runner tests work on Windows\"\n114ce273d86a [flang][runtime] Fix typo in assign.cpp\n78e172fc92e7 [mlir][spirv] Support i32 memref.atomic_rmw conversion\n7889f424966e [flang][NFC] Remove unwanted tab\n97ba3c2bec48 [Clang][AMDGPU] Set LTO CG opt level based on Clang option\n45ee0a9afc62 [LLD] Add --lto-CGO[0-3] option\n3cf7f2249825 [mlir][vectorToGPU] Fix type used when folding transpose into read op\na225d897c151 [DebugInfo][Docs] Fix broken link in instruction referencing doc\n82ae83a8487d [mlir] Silence a few -Wunused-but-set-parameter warnings\n22f0c7a45149 [mlir][AMDGPU] 8-bit float usage in the AMDGPU dialect\n50ef8673a378 [InstCombine] remove stale test comment; NFC\n07f93d8c2cc4 Recommit \"[ConstraintElimination] Change debug output to display variable names.\"\nb413b84a704e [libc++abi][AIX] Skip non-C++ EH aware frames when retrieving exception object\nb0bfbad19b06 [AArch64] Always lower fp16 zero to FMOVH0\nef15617f124c [flang][runtime] Return the right mutable modes from INQUIRE in child I/O\n6dd9d18204d2 [mlir][linalg] Fix insertion point bug in D144022\n4f15267d3dd7 [libc++][NFC] Replace _LIBCPP_STD_VER > x with _LIBCPP_STD_VER >= x\n6b991ba486b6 [clang][dataflow] Change `transfer` API to take a reference.\n02ae7e72b3f0 Revert \"Recommit \"[ConstraintElimination] Change debug output to display variable names.\"\"\n22882c39df71 [InstSimplify] Add additional insertvalue into undef tests (NFC)\n93164dba086d [llvm][AArch64] Fix BTI after returns_twice when call has no attributes\n2a2a6bfcfe8e Recommit \"[ConstraintElimination] Change debug output to display variable names.\"\n62d0e1a8541f Revert \"[ConstraintElimination] Change debug output to display variable names.\"\n869c87ad10e8 [ConstraintElimination] Change debug output to display variable names.\nb67ee5d50562 [reland][libc] Separate memcpy implementations per arch\nc645eb0d03bd [mlir][memref] Bufferize memref.tensor_store op\n01581e28ad92 [mlir][linalg] Add bufferize_to_allocation transform op\n07916cea2e7e [ConstantFold] Check for constant global earlier (NFC)\n8b5004864aab [lld][RISCV][test] Expand testing in riscv-attributes.s\n4c3408697b73 [LangRef] improve documentation of SNaN in the default FP environment\n7a282bd2aaa5 [bazel] Fix missing dependency in clang-tools-extra/clang-tidy:llvmlibc\n861764b1c5f7 [NVPTX] Fix NVPTX output name in the driver with `-save-temps`\n15b90805bcb8 Revert \"[libc] Separate memcpy implementations per arch\"\n97e441dc6cfa [libc] Separate memcpy implementations per arch\n3ef062a4bd86 [mlir][transform] Add transform.get_result op\n1f818f63b829 [clang-format] assert(false) -> llvm_unreachable\nf70282237166 [bazel] create a clang-tidy binary target\n980aa8d740da [MachineTraceMetrics] Add local strategy\nb0e7ca79ab0c [X86] Remove abs(sub_nsw()) -> abds fold from adbu test file\na8483b9b3038 [lldb] Fix a log format warning on Windows, don't assume uint64_t is a long type\n1995d4424505 [clang-format] Enable FormatTokenSource to insert tokens.\n9ccc58893be8 AMDGPU: Fix not adding to depth in getNegatedExpression\n7cbbbc0a045b clang: Rename misleading test name\n674f094d852b [lld][ARM][NFCI][1/3]Big Endian support - Removing assumptions\n5bb8ead4e9dc [AArch64][NFC] Rename  AEK_SMEF64 and AEK_SMEI64 feature flags\n3600b384462b [SimpleLoopUnswitch] Canonicalize conditions for injection of invariant condition\n0992e6ee115e [Test][NFC] Rename one of test parameters to avoid confusing associations\ne117fd28d525 [Symbolize][MinGW] Support demangling i386 call-conv-decorated C++ names\n14fcdd7f9d7b [CVP] Add additional ctlz tests (NFC)\n4c8eda9337d4 [XCore] Adapt threads.ll to opaque pointers.\nbc173f526c57 [SimpleLoopUnswitch] Fix overflowing frequencies case\n45ddc157ca7c [clang-tidy][NFC] Remove ModernizeTidyModule::getModuleOptions\nc7f9344d0f8f [DAGCombine] Fold redundant select\nc3228714cc0e [libc][NFC] Make tuning macros start with LIBC_COPT_\nd64d5772b1ea Add InstSimplify tests for comparisons between known constants\n59b8db1db8ec [JITLink] Drop const qualifier from argument to ELFLinkGraphBuilder's ctors (NFC)\n1c42f8e69d8f [JITLink] Fix whitespace in debug dumps (NFC)\n7d9cf97f80f0 [bazel][mlir][examples] Add missing dependency for 72429a42ac33564fa82449d99dc234da32a05498\n458ad6900e66 Revert \"InstCombine: Fold is.fpclass(x, fcZero) to fcmp oeq 0\"\ne1d95e99bc31 [flang] Update intrinsic types to unlimited polymorphic form\n11c3cead2378 AMDGPU: Override getNegatedExpression constant handling\na4e8347b3661 AMDGPU: Refactor isConstantCostlierToNegate\ndf78976d023a InstCombine: Fold is.fpclass(x, fcZero) to fcmp oeq 0\n8f7e7400b74b [mlir][bufferization] Add restrict and writable attrs to to_tensor\n462227f1150f [SROA] NFC: Look at TypeStoreSize scalable property, rather than at type directly.\n35276f16e5a2 [llvm-c] Add C API methods to match 64bit ArrayType C++ API signatures\n71712440bbb2 [mlir] Add vectorize_nd_extract attribute to the masked_vectorize Op\n86a63b2ae147 [Metarenamer] Use 'inst' as default name for instructions\nddc5d40dd285 [clang][analyzer] Make messages of StdCLibraryFunctionsChecker user-friendly\nc1eb3db780b7 [LoopFuse] Remove legacy pass\n30d542f9b2ad [MLIR][Tensor] Introduce a pattern to propagate through `tensor.pad`\n2872987e5e91 [InstCombine] Fix InstCombinerImpl::foldICmpMulConstant for nsw and nuw mul with unsigned compare.\n41628d050a17 [mlir][Bazel] Add missing dependencies for 72429a42ac33564fa82449d99dc234da32a05498\n4bba8bd33efd [mlir] Add RewriterBase::replaceAllUsesWith for Blocks.\n72429a42ac33 Add a pass that builds a debug info scope for LLVMFuncOp (adding a DISubprogramAttr)\nd7ca25342ff6 [mlir][Bazel] Add dependency needed for e9b82a5c\n1427277eed80 [mlir][Vector] Enable masking for static shapes\n1ac874c9aa18 [mlir][Vector] Add support for masked vector gather ops\n9452356ddcf4 [mlir][Vector] Add support for masked vector.contract\ne9b82a5c4fb6 [mlir][Vector] Add LLVM lowering for masked reductions\na409f3c06914 [LoopVersioningLICM] Remove legacy pass\n0dc18b6222f4 [mlir] Use std::optional instead of llvm::Optional (NFC)\n05423905d064 [mlir] Use std::optional instead of llvm::Optional (NFC)\n4dfd5a3eb6c3 [llvm] Use std::optional instead of llvm::Optional (NFC)\n71251e8d4f3f [mlir] Fix -Wsign-compare in SparseTensorRewriting.cpp and Sparsification.cpp (NFC)\n9e6e96f3e4c3 [gn build] Port f1c4241fb6e5\nf1c4241fb6e5 [RISCV] Add new pass to transform undef to pseudo for vector values.\na17bfbad6387 [RISCV] precommit test for D129735\n54cf24dc6e63 [NFC] Refactor ModuleDeclStateTest to make it not dependent on Frontend\nef6d474aa7ac [ORC] Add ELFNixPlatform::Create overload -- Pass ORC runtime as def generator.\nf708a549b87e [mlir][sparse] Factoring out SparseTensorType class\n8d995b26c755 [C++20] [Modules] [ClangScanDeps] Ensure that we can mix the use of and clang modules\naef76fe554ee [clang-format][NFC] Reformat clang/tools/clang-format/fuzzer/\n81cb70e46ea1 [mlir][sparse] fix a bug in UnpackOp converter.\ndd31a3b3a526 [InstCombine] fold icmp of the sum of ext bool based on limited range\n06f06644efb0 [SeparateConstOffsetFromGEP] Fix: `b - a` matched `a - b` during reuniteExts\nf93da3962eed [Instcombine] Precommit tests for icmp range; NFC\na52432f63312 [NFC][SeparateConstOffsetFromGEP] Added flag `lower-gep`\na211d79cac12 [bazel] Port 26662ac010ef50e65e2774eab84f325aa09360fe\n6e794ba0b238 [Clang][RISCV] Guard vector int64, float32, float64 with semantic analysis\nc0f504df4857 [mlir] Fix two build warnings in VectorToGPU (NFC)\nbb692d44c43f [gn build] Add missing count dependency for check-asan\ndfacba5af0fb [scudo] Update ring buffer test to make it accept zero size\n766065aa6553 [LoopUnrollAndJam] Remove legacy pass\n6a4c39596d68 [scudo] Add the thread-safety annotations\n2b8cb7d87fcb [LoongArch] Make use of addu16i.d for adds with suitable immediates\ndcf9c60a538c [LoongArch] Add baseline tests for `addu16i.d` codegen. NFC\n82c6e90d6a3d [Clang][Test] Add llvm-lto, llvm-lto2 and llvm-profdata to the tool substitutions list\n6adf92026ee5 Remove trailing whitespace in `X86InstrAVX512.td`; NFC\nf895d55f149b Remove incorrect comment around `truncateAVX512SetCCNoBWI`; NFC\n42e11a6ea321 Add transform (and/or (icmp eq/ne (A, C)), (icmp eq/ne (A, -C))) -> (icmp eq/ne (ABS A), ABS(C))\nabf6692f9513 Tests for (and/or (icmp eq/ne A, C), (icmp eq/ne A, -C)) <--> (icmp eq/ne (ABS A), ABS(C)); NFC\n8b5c3902475b Transform `(icmp eq/ne Abs(A), Pow2)` -> `(and/or (icmp eq/ne A,Pow2), (icmp eq/ne A,-Pow2))`\n54a9e992c84c Add Transform for `(and/or (eq/ne A,Pow2),(eq/ne A,-Pow2))`->`(eq/ne (and (and A,Pow2),~(Pow2*2)), 0)`\ne29c4393236f Add tests for folding `(and/or (icmp eq/ne A, Pow2), (icmp eq/ne A, -Pow2))`; NFC\nf3732c2b18df Transform vector SET{LE/ULT/ULE} -> SETLT and SET{GE/UGT/UGE} -> SETGT if possible\n3e0866bf616b [mlir][Vector] NFC - Fail gracefully on size mismatch instead of assert\n5ef7ceae5769 [mlir][Vector] Significantly improve VectorToGPU.cpp\n26662ac010ef [Support/BLAKE3] Rename blake3_* -> llvm_blake3_* to avoid symbol collisions\n10eea3fe1536 [LoopVersioning] Remove legacy pass\n74a2dd1356bf [InstSimplify] fix/improve folding with an SNaN vector element operand\nac2f13f673b8 [InstSimplify] add tests for vectors with SNaN constants; NFC\nae0c203e676e [LoopLoadElimination] Remove legacy pass\n87046744e6a8 [Driver] Allow test to use lld-link.exe not just lld-link\neb5530e621aa [LoopDistribute] Remove legacy pass\n823186b14dc9 Recommit: [NFC][IR] Make Module::getGlobalList() private\n0a0d58f5465a [libc++] `<algorithm>`: `ranges::minmax` should dereference iterators only once\n83ba349ae0a8 [InstSimplify] fix/improve folding with an SNaN operand\n4a4e44e378ca [InstCombine] add test for loop-invariant fdiv; NFC\n1ce1e4a4d59d [mlir][spirv] Validate float type bitwidths\n96fcaf0cc06a [openmp] Fix building for mingw targets after import library changes\ncb5f239363a3 Revert \"[NFC][IR] Make Module::getGlobalList() private\"\ncafb1c1cb241 [runtimes] Remove duplicate imports of libcxx.test.config\nb4243bb611a3 [clang-format] Don't rewrite the input file if already formatted\ned3e3ee9e30d [NFC][IR] Make Module::getGlobalList() private\n33d0d1e36ffa [runtimes] Rename newconfig.py to config.py -- it's not new anymore\n9f3a3e1f3f97 [lldb] Disable macro redefinition warnings in expression wrapper\n20cdf7c70667 [InstCombine] Increase limit for max copied from constant fold\n0d4e55ba69c1 [OpenMP] Recover non-blocking target nowait disabled by D141232\n9093f3c39b8f Report a useful error when someone passes an incorrect python class name.\n853a46cfb1ca Revert \"llvm-reduce: Run instruction reduction last\"\n9e9293ee6aaf [llvm][test] convert one test to use opaque ptrs (NFC)\nac835ecb5fea [Fuchsia] Set /winsysroot in Windows runtimes linker flags\nc062e97acfba [llvm][test] restrict 2 GVN tests to just test GVN (NFC)\nc510c387631e [libc++][NFC] update Range Status for the completion of C++20 ranges\nb677d0753c0a [IPSCCP] Remove legacy pass\n36606cf07080 [NFC] Replace -1U{LL} expressions with appropriate *_MAX macros in Support library.\n31c35285d27e [mlir][spirv] Fix crash when decorating physical storage buffer pointers\n913b4aa60830 Reland \"[compiler-rt][hwasan] Add unused attribute to GetRegisters\"\nddb704247b16 [clang][test][RISCV] Introduce separate RUN lines for __risv_i test in riscv-target-features.c\naecb36c8489a [GlobalOpt] Remove legacy pass\nb40bfc1b9e38 Reland \"[gn] port f29cfab55d1f\"\n5b455a8efbf5 [InlineAdvisor] Restructure advisor plugin unittest cmake\n08533f8b8660 Revert \"[CGP] Add generic TargetLowering::shouldAlignPointerArgs() implementation\"\n12b4f9e2af95 [AMDGPU] Do not apply schedule metric for regions with spilling\n5c1b8de77d1c [libc++][doc] Sets the proper plenary date.\n8cf1524cbc7f [loop unroll] Fix `branch-weights` for unrolled loop.\nfb717fe06dd0 [NFC][IR] Make Module::getNamedMDList() private\neaeb8ddd4a9d [LLDB] add arch-specific watchpoint behavior defaults to lldb\n8198f30f7e75 [lld-macho] Account for alignment in thunk insertion algorithm\n055cd78eef15 [RISCV] Untabify THMulAccumulate_rr. NFC.\nd4012bc43f9a [RISCV] Add vendor-defined XTheadMAC (multiply-accumulate) extension\n179db7efe567 [MLIR][OpenMP] Add support for depend clause\n361d5a7a9f14 [gn] port 4e3dac6f0a4c (ScudoHooksUnitTest)\n7301a7ce196e [mlir][linalg] Make Linalg vectorizer lower affine.apply\n4e3dac6f0a4c [scudo] Call __scudo_deallocate_hook on reallocations.\n6c7894a8e652 [libc][doc] Move docs/math.rst to docs/math/index.rst\nddde06906be1 [OpenMP]Fix PR55970: Miscompile of collapse(3) with non-rectangular loop nest.\n5dc400ea2f06 [gn build] Port 7f5d130a428f\n1da2085a5133 libclc: add clspv to targets exempt from alwaysinline\n290308a99e6b libclc: add generated convert.cl to clspv/clspv64 targets\n9c8f3409494f [libc++][format] Fixes test failures.\n7f5d130a428f [libc++][chrono] Add hh_mm_ss formatter.\n5205c7126b2f [mlir][gpu] Add support for unsigned integer extend in vector to gpu.subgroup_mma lowering\nf6cd46e07fcc libclc: add more generic implementations to clspv SOURCES\nf8877d86a867 [libc++][doc] Adds Issaquah papers and issues.\n5a81d0eea40a [AArch64] Remove dead isReflexive methods. NFC\na9f384994b9d [libc++] Counter<T>'s assignment operator shouldn't ++gConstructed\n755535b5eb5f [flang][runtime] Handle aliasing in Assign()\n0f52c1f86c62 [llvm] Deprecate {Bits,Float,Double}To{Bits,Float,Double} (NFC)\nd180443570d7 [NFC][IR] Make Module::getIFuncList() private.\n016d5a0a0a15 [flang] Strengthen conformance requirements for allocatable/pointer dummy arguments\nd05e1e99b1d6 [clang][test][RISCV] Check for __riscv_i in riscv-target-features.c\n574d0c2ec107 [clang][test][RISCV] Fix precision of CHECK-NOT lines in riscv-target-features.c\nf4d8b8781de9 [AMDGPU ASAN] Remove reference to asan bitcode library\nc5085c91cc8e [CodeGen] Trivial simplification of some getRegisterType calls. NFC.\n800fec13a81f [libc++] Enforce formatting for already formatted and new files and ignore the formatting of tests\nacbb15ed705f Revert \"[extract_symbols.py] Adjust how the output of nm is interpreted\"\n9a8d64a66a15 Revert \"[libc] Separate memcpy implementations per arch\"\nbf987e108fcc [AArch64][SME]: Custom lower select and fp_extend for streaming SVE\n26541d417634 [libc] Separate memcpy implementations per arch\n8981f20ae9c3 [libc] refactor logic around embedded memcpy\n3af88305e443 [flang] Associate entities are variables\nfefe729f0f4a [AArch64][SME]: Custom-lower SIGN_EXTEND_INREG for streaming SVE\n057cae64ebc4 [MLIR][Presburger] Matrix: hide expensive consistency check behind EXPENSIVE_CHECKS macro\nf04421739232 [ConstraintElim] Add reproducer remarks.\n9c14132d7b6c [AArch64][SME]: Add missing Ops that need custom-lowering in streaming mode.\nbfbfbd8b65de [LVI] Fix and re-enable at-use reasoning (PR60629)\n0fa5df1959fa [LV] Synthesize all true masks for masked vector function variants\n09dd4d870e19 DAG: Remove hasBitPreservingFPLogic\nd94399c64151 [mlir][llvm] Make LoopAnnotations non-discardable\n463fa25c34d6 [clang][NFC] Adjust tests to not un/define predefined macros\n7a49d50f22ad [flang] support fir.unreachable in stack arrays pass\neb436da6b826 [flang] automatically load FIR dialect with hlfir\nddfabefe1be1 [libc] Conform memcpy tuning macro to the new naming scheme\n77bd15ae2fa3 [MachineTraceMetrics][NFC] Move Strategy enum out of the class\n147f476e851d [mlir][LLVM] Properly wrap code examples in markdown code blocks\na5488a398f3b [flang][hlfir] remove unnecessary header include\n1fae1464d7a7 [flang] Fix USE rename\n67223522355b [SimpleLoopUnswitch] Re-enable simple-loop-unswitch-inject-invariant-conditions\nc7ea20c8eed5 [SimpleLoopUnswitch] Ignore inner loops when injecting invariant conditions. PR60736\nf3c008ca776b DAG: Relax foldBitcastedFPLogic conditions\n3849dc1f8eeb [NFC] Move some asserts out of Expensive Checks\n94676cf8a13c [llvm][AArch64] Fix an interaction of SLS and BTI after a returns twice call\nebc21c7a2558 [Test] Add test for PR60736\ncfeb0bf83ec1 [SimpleLoopUnswitch] Temorarily switch off simple-loop-unswitch-inject-invariant-conditions. PR60736\n8c7cfa357280 [mlir] fix LLVM IR translation of vector<... x index>\n98ecc3ac77a9 [Flang] Fix for Any/All simplification to properly propogate the inital value\ne8d44841c5d5 [docs] Update the ACLE URL\n6240627cfda4 [docs] Fix bullet list formatting\n0b33f0d80b83 [mlir][linalg] expose convolution dimension classifier\n7fdc2ed09f44 [mlir] reallow null results in TransformEachOpTrait\n64dad4ba9af6 Use llvm::bit_cast (NFC)\n544831ab9f35 [mlir] Drop unused arith conversion class (NFC)\n504aa8ae941e [include-cleaner] Better support ambiguous std symbols\n1ba93c3c30dc [Modules] Don't re-generate template specialization in the importer\n46cdf7f09912 [Tooling][Stdlib][NFC] Reflow comments and strip clang-format pragmas\n697a162fa63d [AVR] Fix inaccurate offsets in PC relative branch instructions\n1e6921131aa4 Move global namespace cl::opt inside llvm::\n4f0eb57222de AMDGPU: Teach getNegatedExpression about rcp\nce4b719f33e5 AMDGPU: Add test for getNegatedExpression with rcp\n0a669bd894f3 AMDGPU: Add additional tests for combiner infinite loop\n463ab1e07a0a llvm-reduce: Run instruction reduction last\n04f69345894d [DAG] Handle build_vector with all undefs in reduceBuildVecTruncToBitCast\n2e9549db2686 [LangRef] Global variable declarations imply minimum size\naf838c1b1c20 [Coroutines] Don't run optimizations for optnone functions\nbfea83767603 [mlir][llvm] Reintroduce string based attribute setting.\ncb90bb986611 [PowerPC] Specify the dynamic loader prefix in ppc-float-abi-warning\ndf3e73dabb5b [LoopDeletion] Simplify. NFC\n9c4f0d83f64e [docs] Add document for clang-scan-deps -format=p1689\n8c74defcca50 [OpenMP] Fix extra parenthesis in kmp_os.h\n5e78b749eccf [ARM] Use llvm::rotl and llvm::rotr (NFC)\na411bc727426 [RISCV] Rename InstFormatCSZN->InstFormatCU to match latest Zcb spec. NFC\n639b7865a67f [RISCV] Use llvm::rotl (NFC)\nafad153a0890 Recommit: [NFC][IR] Make Module::getAliasList() private\ndf77dec93e17 [AArch64] Use llvm::rotl and llvm::rotr (NFC)\n9700eb4fbfdc [bazel] build fix\n48f04ffa9f36 [mlir][affine] Normalize constant valued bound loop\n6d4a674acbc5 Revert \"[NFC][IR] Make Module::getAliasList() private\"\n7c6b46e87eaf Revert \"[DAGCombiner] handle more store value forwarding\"\nac6219d0aeb7 Revert \"[DAGCombiner] fix comments for D138899; NFC\"\nb64f7d028bdc [NFC][IR] Make Module::getAliasList() private\n6ee2f770efb6 [PowerPC][GISel] add support for fpconstant\n5561e174117f Revert \"[mlir] Make the vast majority of integration and runner tests work on Windows\"\n663725947bae [flang] Disable libc++ assertions in the runtime library\ncff7fad1544a [flang] Catch repeated BIND(C) attribute specifications for a symbol\n235e90c1d760 [Clang][RISCV] Guard vector float16 type correctly with semantic analysis\n4b815d8443db [mlir][NFC] Remove unused variable 'indexType' in GPUTransformOps.cpp\n288ae0b92f57 [mlir][gpu] NFC change to pass threadID ops to rewriteOneForeachThreadToGpuThreads\n69373a5d3f45 [flang] Check for invalid BIND(C) names\n4148f2768b87 [flang] Check for non-interoperable intrinsic types in BIND(C) derived types\n855b67799b7c [libc++][NFC] Remove duplicated line from `Cxx20Issues.csv`\n30d932305567 [flang] Pointers returned from functions are not definable as pointers\n632fd9fb861c [flang] Respect inaccessibility of type-bound ASSIGNMENT(=)\n5402110e0123 Revert \"[lldb] Use portable format string PRIx64\"\n7bc9dc26bc9b [Fuchsia] Add FUCHSIA_ENABLE_LLDB option.\n860ed6c078b4 [flang] Warn about dangerous TRANSFER()\n776b7499ea81 [TLS] Added a LangRef entry wrt the module flag MaxTLSAlign.\nb57bc158ea46 [flang] Catch obscure structure constructor error\nee88f1177003 Find SDK path more lazily in Apple Simulator platforms\nf7016f8a8ea2 [scudo] Call getStats when the region is exhausted\n70758b801df9 [scudo] Calling getStats requires holding lock\nf28c1a9df2e3 [flang] Conform with standard (mostly) for character length mismatches on arguments\ne800c664f0e9 [mlir][sparse] Extend readCOOIndices to support overhead types beyond index_type.\n8151d6f80458 [flang] Diagnose REPEAT with negative NCOPIES=\nce9ce66b8def [mlir][sparse] fix a memory leakage when converting from a tensor slice\n5fde2d99513f [libc] Write stub files to a new directory to avoid conflicts\n4f1037f86a62 [flang][build] Fix build issue reported on recent commit\n620b3d9ba334 Revert \"[LLDB] Enable 64 bit debug/type offset\"\neb0ea28b6a1b [OpenMP] Add check for target allocator regardless of the availability of libmemkind\n81566001e0c8 [mlir][tosa] Enable `apply_scale` unrolling\nb673135bb833 [Release] Produce bolt tarball\nbe7d7ca11018 [lldb] Use portable format string PRIx64\n17b097b8df69 [runtimes] Set LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default to ON for OS390\nf11ab8353f97 libclc: remove sqrt/rsqrt from clspv SOURCES\n807d43239a5f [VPlan] Use properlyDominates predicate for ordering FOR users.\n161b9d741a3c [mlir] Make the vast majority of integration and runner tests work on Windows\n19b1e27fcd56 [mlir][SPIRVToLLVM] Add pass option to emit opaque-pointers\n009fc4ca3b44 [mlir][LLVM] Verify correct pointer casts with `llvm.bitcast`\n0aaf2e3bc057 [mlir][GPU] add required address space cast when lowering to LLVM\n9d0b596aada6 [mlir][tosa] Fix segmentation fault in case of folding unranked tensor\nf36fe009c0fc [LLDB] Enable 64 bit debug/type offset\n7156d3b1fe80 [libc][bazel] Update math function unit tests' dependency computation.\n2dab5bdf89f6 [flang] Warn on mismatched DATA substring sizes rather than crashing\n9369b7d307be [lld][WebAssembly] Limit size of shared 64-bit memories of 2^^34\n67d78e3c6fe5 [libc] Add a loader utility for AMDHSA architectures for testing\ne5d914672233 [extract_symbols.py] Be more permissive when examining nm output\n8f5d81585aa9 [Clang][LLVM] Enable __arithmetic_fence and fprotect-parens on AArch64\ne96f994f39ad Revert \"[Hexagon] Add release note for LLVM 16\"\n892bf09606b6 [mlir][arith] Allow to specify `constFoldBinaryOp` result type\ndc38cbcc8b89 [mlir][arith] Fold selection over constant vector conditions\nf841c4af5f5e [lldb] Fix image lookup crash\n51a07fc24cb9 [clang] Add test for CWG2396\n7638409d4363 [RISCV] Make vsetvli intrinsics default to MA.\n06d9bf5e64d4 [OpenMP] generate the Windows import library that imports by name rather than ordinal\n96267b6b8840 [mlir] Add Float8E5M2FNUZ and Float8E4M3FNUZ types to MLIR\n7c84f6a43ae3 [flang] Emit portability warning for extension\n8e628f72b00c [mlir] Avoid building some shared libraries when PIC is off\nbf7c42161700 Revert \"Reland \"[lldb][DWARFASTParserClang] Attach linkage name to ctors/dtors if missing\"\"\n8a57748804bd Revert \"[lldb][Test][NFC] TestExternalCtorDtorLookup: add more instantiations to test linkage name is correct\"\n9dd1168fe115 [docs] Speculative link syntax fix\nf1f62ed0c834 [ADT] Add llvm::rotl and llvm::rotr to bit.h\n31c42f8f3588 [libc++][doc] Updates format status page.\n756395f61b90 [clang] fix DR status in cxx_status.html\ndf5beebc98bb [Driver] Add --vfsoverlay flag\n176ee268f8df [flang] Allow for user-defined intrinsic operators (regression)\n39eb1c6145eb [CSSPGO][Preinliner] Set default value of sample-profile-inline-limit-max to 50000.\nb6259eca16f6 [Clang] Export CanPassInRegisters as a type trait\n0c412fed360f [RISCV][docs] Describe status of zicsr and zifencei\nd4021ed3d79d [Tooling/Inclusion] Add symbol mappings for `std::experimental::filesystem`\n6e10e6cb8fab Reland \"[lldb][DWARFASTParserClang] Correctly resolve imported namespaces during expression evaluation\"\n1232b9d47209 [RISCV] Fix -Wbraced-scalar-init warning. NFC\n171ffd499e16 [ORC] StaticLibraryDefinitionGenerator -- support in-memory universal binaries.\n201b2b5674e1 [libc++] Reorganize exception_guard\n1c9e6238fe2f [AMDGPU] Allow architected SGPRs for workgroup IDs\nb35d0a6834f8 [AMDGPU] Add switch to enable architected SGPRs.\n1edb04bc70f3 [extract_symbols.py] Adjust usage of nm again\n4198ff0cb999 [AArch64] Add NZCV Def for TLSDESC_CALLSEQ\nd44b31eca27c [DAGCombine] Allow DAGCombine to remove dead masked stores.\n58d246a27b8c [mlir][spirv] Drop outdated TODO comment\nfc02eeb24fc0 [RISCV] Add vendor-defined XTheadBb (basic bit-manipulation) extension\nb8c2ba138ef6 [NFC] Fix using-declspec.cpp test with non-C++17 compilers\n00a5ae12448e [mlir][bufferization] Better propagation of bufferizesToMemoryWrite through regions\n95526930da6c [flang] Fix new assertion failure\nbbff77a14ef2 Revert \"[libc++] Remove _LIBCPP_CONSTEVAL\"\n04a2baf58f23 [RISCV] Add vendor-defined XTHeadBs (single-bit) extension\n676bca0b6f0d [libc][NFC] Fix typo in header guards\n5a5f3de6ee62 [RISCV] edit document of Zcb to match the Implementation\n2e47aafb02f3 [PowerPC] Fix float materialization patterns.\n6a6c527ee287 [X86][FP16] Combine two steps conversions into direct conversion\n388d679c1dfa Recommit [YAML IO] Check that mapping doesn't contain duplicating keys\nd904ee3d479a [flang] Handle correctly optional intrinsic scalar to unlimited polymorphic optional\n877859a09bda [clang] Handle __declspec() attributes in using\na01edb169bb0 [flang] Fix output type when emboxing intrinsic type to unlimited polymorphic box\ncc4fb5837647 [mlir] support complex type in DenseElementsAttr::get.\ne9eaee9da196 [AArch64] Reassociate sub(x, add(m1, m2)) to sub(sub(x, m1), m2)\naf3c25dc3d87 [VPlan] Fix iterator invalidation in adjustFixedOrderRecurrences.\n580109025801 [libc++] Fix bug in allocate_shared_for_overwrite\n7eec2f2f218c [flang] Avoid infinite recursion in common block check\n87cc95a904e0 [libc++] Implement P2136R3 std::invoke_r\nafe9b0ba87b7 [Test][lldb] Fix YAML mapping keys duplication. NFC.\nd3b0fba6084d Revert rG0b0a38a7a229b70d7261771ba0e702843bd34e97 : \"[X86] combineX86ShufflesRecursively - don't widen shuffle subvector inputs\"\nb838b6287617 [mlir][MemRef][Transform] Don't apply multibuffer on \"useless\" allocs\n5d3c58829d28 [gn] port c4f7cc867299 (CoroTests)\n9f650ae779b4 [Libomptarget] Remove dependency on the DeviceRTL from the GPU plugins\n3c160d3051dc [lldb][Test][NFC] TestExternalCtorDtorLookup: add more instantiations to test linkage name is correct\n9e3010ad992d [AArch64] Fix LSE2/LSE128/RCPC3 precedence\ne698c5950430 [libc++] Granularize <type_traits> includes in <algorithm>\ne3515ba3816b Reapply \"[AMDGPU] Modify adjustInliningThreshold to also consider the cost of passing function arguments through the stack\"\n8b28500f60b7 [mlir][MemRef][TransformOps] Fix error reporting for multibuffer\n4c273cd07115 [DWARFLinker] Refactor cloneAddressAttribute().\n30f515a9101d [libc] Fix LIBC_LOOP_NOUNROLL being a noop\nc4f7cc867299 [Coroutines] Modify CoroFrame materializable into a callback\n3e51af9b5b3a [Coroutines] Improve rematerialization stage\n35106ad1009f [Coroutines] Presubmit test for more coro remats\n8f104a3f9ae2 [ARM] O3-pipeline fix\n5922b886350c [flang] RFC: -fstack-arrays\n2feafd059e9f [flang][hlfir] lower hlfir.sum into fir runtime call\n9facbb694250 [flang] lower sum intrinsic to hlfir.sum operation\n3ad26060e4bc [flang] add hlfir.sum operation\n7c4e45ec7d6d [mlir][SCFToOpenMP] Add pass option to emit LLVM opaque pointers\n4a2d4588a041 [mlir][Vector] add pass option to `convert-vector-to-llvm` to emit opaque pointers\nd5ea1b22cba3 [flang] use mlir::LoopLikeOpInterface::blockIsInLoop\ne6ec76c647aa [LLDB] Apply FixCodeAddress to all forms of address arguments\na9329a96ada3 Adjust #pragma warning so GCC is not unhappy\n5a028cc8ffa5 [mlir][LinAlgTransformOps][NFC] Use emitSilenceableError\n2a58be423963 [HardwareLoops] NewPM support.\nc5e1000b2915 Add build for Windows on Arm in packaging script\nfdd18e866b05 [llvm][TableGen][Jupyter] Show llvm-tblgen not found error in notebook\n24ecd9984235 [NFC] Set C++20 Named Modules for CodeGen in ASTContext in the early place\n19659b5f0dd1 [clangd] Drop includes from disabled PP regions in preamble patch\nfae01d175a29 [clangd] Fix bugs in main-file include patching for stale preambles\nf79a5fb9df42 [Test][SCEV] Add a test where the trip count can't be calculated\n7f249e45eca4 [milr][llvm] Add remaining loop metadata support\nfff762d674c3 Revert \"[CMake] Remove custom ccache CMake logic\"\n240c6f264399 [mlir][llvm] Improve LoadOp and StoreOp import.\n0fad18c44a14 [CMake] Remove custom ccache CMake logic\nae55f1cf9c10 [gn build] Port b7b28c6cfe04\nb7b28c6cfe04 [clang-tidy][libc] Add an inline function checker for the libc project.\n2bc095037eb6 [AMDGPU] Use llvm::bit_cast (NFC)\n92716a42a6aa [llvm-debuginfo-analyzer] LLVM 16.0.0-rc1 Failing test on osx-64.\nb49b429fde3a [llvm] Deprecate PowerOf2Floor and ByteSwap_{16,32,64}\n9c401687eb46 [x86] Move combineAddOrSubToADCOrSBB within the source file (NFC)\ne0e329609858 [X86] Precommit tests for D143838\n64287d69827c Recommit [C++20] [Modules] [ClangScanDeps] Enable to print make-style dependency file within P1689 format (4/4)\n212d905643bd Recommit [C++20] [Modules] [ClangScanDeps] Allow clang-scan-deps to without specified compilation database in P1689 (3/4)\neb70b38f838f Recommit [C++20] [Modules] [ClangScanDeps] Add ClangScanDeps support for C++20 Named Modules in P1689 format (2/4)\n2e4499e749c0 [flang] Handle forward references to modules\nff5c00d4ffc8 [X86][FP16] Add tests to show suboptimal codegen, NFC\n9f8ee610beb1 [flang] Warn on overflow folding DIM()\naa128bb21ee3 [flang] Catch misuse of a procedure designator as an output item\n57751e60e34e [gn build] Port 2a06757a200c\n2a06757a200c [libc++][spaceship] Implement `lexicographical_compare_three_way`\n2e6430666caf [LV] Update recipe builder functions to pass VPlan directly (NFC).\naf03616f46a1 [Flang][OpenMP][NFC] Remove usage of else after return\n15cb5ebed7a4 [Support] Use llvm::popcount (NFC)\nbe2fc577c389 [ORC] Add MachOPlatform::Create overload -- Pass ORC runtime as def generator.\naca9016bcde0 [flang] Fix crash on SELECT RANK\nec116ea684b4 [llvm] Deprecate llvm::count{Leading,Trailing}{Zeros,Ones} and llvm::countPopulation\nbb00fb66ba11 [libc++][NFC] Fix formatting in ranges status page\n594700c12247 [flang] Warn about construct names that are not distinct in the inclusive scope\n129eb5bcab91 [lldb] Add the ability to provide a message to a progress event update\n19c1682b6a4c [X86] combineConcatVectorOps - concatenate 512-bit VPERMILPS nodes.\n6eb66890e473 [X86] Add some basic matrix multiplication test coverage\n10d8b3054a72 [Flang][OpenMP][NFC] Correct a few instances of variable naming\n9f2014269ad8 [AArch64] Regenerate and extend zip1 tests. NFC\nfaf5616e110c BlockFrequencyInfoImpl.cpp - add missing closing namespace comment. NFC\nd38fcb421657 BlockFrequencyInfoImpl.h - use auto* for pointer types. NFC.\n51007cfa456f BlockFrequency.h - add missing closing namespace comment. NFC\nfe655717bff1 [flang] Support polymorphic inputs for the TRANSPOSE intrinsic\n1bb95a3a99cb [X86] combinePredicateReduction - attempt to fold subvector all_of(icmp_eq()) / any_of(icmp_ne()) to integers\n8bb98b571547 [Clang] Add the list of approved (Issaquah) C++ papers to the status page\n738370ae0e7f DemandedBits.cpp - use auto* when initializing from cast<>. NFC.\n41328d7c0e6e RegisterPressure.h - consistently initialize all pointer fields. NFC.\n1300a4fdae35 Revert rG23cb32c6d5bda0919cc1ef129917ceb2dbf1b1b8 \"[X86] combineX86ShufflesRecursively - treat ISD::TRUNCATE as faux shuffle\"\n7717e1114ad3 Revert \"[AArch64] Reassociate sub(x, add(m1, m2)) to sub(sub(x, m1), m2)\"\nf48f17871792 [InstCombine] canonicalize cmp+select as smin/smax\n14411adc3dce [InstCombine] add tests for disguised smin/smax; NFC\nc697119dafce [bazel][libc] Add a few more missing dependency that show up when parsing headers\nbb5f79158b71 llvm-tblgen: Apply IWYU in some files\n2d570bab4f99 CodeGenTarget.cpp: Reformat.\n0e18b5feaaba LLVMFuzzerCLI: [CMake] Prune the last PARTIAL_SOURCES_INTENDED to cover all sources.\n36adb82c251d LLVMProcessSources.cmake: Improve PARTIAL_SOURCES_INTENDED.\n19128792e2aa Reland \"[lldb][DWARFASTParserClang] Attach linkage name to ctors/dtors if missing\"\nfebe740b2c8f [test] Remove occurences of br undef in Transform/Util tests [NFC]\n069dd8768a6a Revert \"[C++20] [Modules] [ClangScanDeps] Add ClangScanDeps support for C++20 Named Modules in P1689 format (2/4)\"\nf8b5003cb3f9 Revert \"[C++20] [Modules] [ClangScanDeps] Allow clang-scan-deps to without specified compilation database in P1689 (3/4)\"\n502e357dc77c Revert \"[ClangScanDeps] Add UNSUPPORTED: system-windows to test P1689.cppm\"\n08f31b8fa85c [docs] Make consistent between MLIR tutorial doc and example code\nc9a7b92a23bb [AArch64] Consider tiny code model in emitLoadFromConstantPool.\n6a75aec09098 [Clang][perf-training] Remove trailing whitespace in perf-helper\ndf3b703a4c17 [AArch64] Use llvm::countr_{zero,one} (NFC)\n6d90c590b7f5 [JITLink] Don't initialize local ArrayRefs with initializer lists.\nc8ad1de4f068 [RISCV] Remove dead code from RISCVDAGToDAGISel::selectVSETVLI. NFC\n4afb1ee7bc0e Specify target triple for bb-prefix-dump.ll\n86cbf3d5f8a2 [JITLink] Add explicit conversion to silence warnings / errors on bots.\n01d68b13f52d [libcxx][ranges] mark new join view tests unsupported without experimental flag\n7e772e12d10e [RISCV] Fix mistake in comment. NFC\n10b5fec25638 [JITLink][ORC] Add LinkGraph::allocateCString method.\na38a4654ce4b [libc++] fix `shared_ptr`'s incorrect constraints\n23cb32c6d5bd [X86] combineX86ShufflesRecursively - treat ISD::TRUNCATE as faux shuffle\nd05f889535ab [libc++] Enable radability-identifier-naming for local variables and fix any problems\ncc236b64d11d [gn build] Port 3d4e9d5eb0f7\n9eccc6cce07b [JITLink] Add a predicate to test for C-string blocks.\n3d4e9d5eb0f7 [ORC] Move ORC-specific object format details into OrcShared.\nf00d101b8e32 llvm/utils/TableGen/CodeGenIntrinsics.h: Fix a comment line (since 2006!)\nda876a157d79 [libc++][NFC] Reorganize the std::pair constructor tests to be more consistently named\n2e08e431cc18 LLVMTableGenGlobalISel: Provide `INTERFACE_INCLUDE_DIRECTORIES`\n4537bda929bd [libc++][NFC] Change some std::pair tests from .compile.fail.cpp to .verify.cpp\naaef3b82f4f0 [libc++] Remove _LIBCPP_CONSTEVAL\ne3eb61a8cd61 [libc++][NFC] Fix leftover #endif comments\nb48880f39f96 [libc++][NFC] Use using instead of typedef in pair.h\nab17e1b76cf7 [libc++][NFC] Always define __non_trivially_copyable_base in pair.h\na98936d5a698 [libc++][NFC] Use std:: instead of _VSTD:: in pair.h\n9994340a49ba [libc++][NFC] Use >= 23 instead of > 20 in pair.h\n1d6117c8c4d2 [libc++][NFC] Use std:: instead of _VSTD:: in construct_at.h\nf543614ce641 [libc] Update dependency for __support_fputil_nearest_integer in bazel overlay.\n4c2ad195f8c9 [libc++][ranges] move all range iterators back in class\n3b059cd25b8c [libcxx][ranges] revert join_view::iterator and sentinel to be in-class\nc586b81347cb [X86][Win64] Precommit test for D143812\na55b35dbee6d [X86] combineVectorInsert - pull out Vec/Scl/Idx operands. NFC.\n0b0a38a7a229 [X86] combineX86ShufflesRecursively - don't widen shuffle subvector inputs\n5dc34eb379f4 Reland \"[mlir][func] Use the generated pass options in func to llvm.\"\n5ba396011377 [MLGO] Disable BB Profile Dump Test on NVPTX\n09e0f48c0a40 [MLGO] Enable BB Profile Dump Test without TFLite\n39da46826da8 Revert \"[mlir][func] Use the generated pass options in func to llvm.\"\n771d9c05afc2 [mlir][func] Use the generated pass options in func to llvm.\n19c42f672f94 [DFAPacketizer] Move DefaultVLIWScheduler class declaration to header file\n5fc73b7502fb [clang] Add test for CWG1111\n22fb66eb94b6 [clang][NFC] Add another example to CWG952 test\n89ba737bcf34 [clang] Mark CWG2165 as N/A\n5eaaf8f18093 Revert \"[clang] Mark CWG2165 as N/A\"\nd0e24f0c97ec [clang] Mark CWG2165 as N/A\n4663d784ddee [libc] Update macros/optimization.h build dependency for CMake and Bazel.\na630b8eefb41 [libc][Obvious] Fix static method declarations for FEnv class on macOS.\ne9e43e31d3bd [libc] Fix the regex detecting architecture triplet for macOS.\nd8e9a1a12557 [CMake] Use `LLVM_ENABLE_ASSERTIONS` to enable assertions in `libc++`\n29fa21eb6129 [lldb] Fix passing None as an env variable in TestMultipleDebuggers\n294ca122956f Adapt TestCustomShell and TestMultipleDebuggers to run under ASAN\n0ac8dfd0587a [lldb] Add an SB API to get progress events as SBStructuredData\ndc6427d687c4 [mlir][sparse] implement lowering rules for sparse_tensor::unpack\n6dbca86d838c [mlir][sparse] introduce sparse_tensor::unpack operation\ne74bb3471fc4 [libc++] Remove unused std::function test\ne7ade78a8ceb [dfsan] Fix some build-libc-list.py lint issues\n9db037d542d9 [mlir][sparse] fixed pack op documentation and purity\ndac423bd5718 [SanitizerBinaryMetadata] Fix ignorelist test with -Assert\ne8a79dc3d8eb [flang] Do not print backtrace for most TODOs.\nd2cc2c5610ff Revert \"[lldb][DWARFASTParserClang] Attach linkage name to ctors/dtors if missing\"\nc46e15e1dec9 Revert \"[lldb][Test] TestExternalCtorDtorLookup.py: skip on Windows and dwo\"\n2979070f1b3a [libc++] Simplify non_default_alloc\n043550e33509 [Driver] Stop stack use after free\n9e57a5739d8b [bazel] Fix {clang,llvm}/unittests\n0751fc68b976 [libunwind] On Darwin, add a callback-based lookup scheme for JIT'd unwind info.\n89197b59f597 [openmp] Fix building z_Linux_asm.S for armv5t\n3de0bc4c3d02 [MLIR] Reintroduce shared attribute names in the LLVM dialect\ndb89896bbbd2 [InstCombine] Add tests for D143766. NFC\n811d11b064f7 [AMDGPU] Add GFX11 HW_REG_PERF_SNAPSHOT_*\na2dcd994a7f8 [mlir][tosa] Add TOSA f64 type support for cast op\ncd4ca2d7f991 [mlir] Port Conversion Passes to LLVM to use TableGen generated constructors and options\n3e57aa304f15 [llvm-driver] Reinvoke clang as described by llvm driver extra args\n1f173a0653e7 [llvm-driver] Pass extra arguments to tools\n34653a0a8a40 [Propeller] Change SHT_LLVM_BB_ADDR_MAP version to 2.\n8e13ec9eca1f [libc++] In tests, use `abort` to terminate upon an error.\n7ca3444fba73 AMDGPU: Use module flag to get code object version at IR level folow-up\n70acb3aab3a1 A slightly more concise AST dump :)\n83e84cdbe4bc [InstCombine] precommit tests for D143593\n81d0d2b2a068 [mlir][sparse] Sparse reduction in lex order no longer produces dense output\nae2d8b49713d [libc][math] Update exceptional cases for logf, log10f, log2f, log1pf.\n35188e02d1f2 [dfsan] Fix build-libc-list.py for Python 3 after D143701\na543d840ee0a Fix handling of -> calls for modernize-use-emplace\nf889d6f9d05b [lldb][Test] TestExternalCtorDtorLookup.py: skip on Windows and dwo\nc8b8d6baddf9 [Passes] Remove some legacy passes\n3a66446a9a0d [libc] add standalone strtoint/float fuzzers\n79a3803bb2cc [ClangScanDeps] Add UNSUPPORTED: system-windows to test P1689.cppm\ne7e577f68421 [clang-tidy] Clarify documention of `bugprone-unchecked-optional-access`.\n295f5fafcb55 [Assignment Tracking] Fix migrateDebuginfo in SROA\nc52255d26a23 [AArch64] Reassociate sub(x, add(m1, m2)) to sub(sub(x, m1), m2)\nd37a31cf237c [X86] Attempt to fix ubsan failure.\n185dbf9d6f00 [bazel] Port 81a79ee446\n1763c632544d [Attributor][NFCI] Use a set to track dependences\n86cce90e21c5 [Attributor][NFCI] Avoid AAIntraFnReachability updates if possible\na9557aacd1a9 [Attributor][NFCI] Use queries without exclusion set whenever possible\n294db31be748 [Attributor][FIX] Ensure we use the right set comparison\n76a19190269b [Attributor][NFC] Avoid unnecessary string operations\nbf9964fb138f [Attributor][NFCI] Create a AAIsDead for the function eagerly\n8bc0bee2f8ca [Attributor][NFCI] Avoid a temporary vector and exit early\n91e38bc76010 [libc++][NFC] Reorganize hash.h\nb296ddd91cb8 [lldb][DWARFASTParserClang] Attach linkage name to ctors/dtors if missing\nb8ef007fca1d Reland \"[llvm][dsymutil] Add DW_TAG_imported_declaration to accelerator table\"\n9497680067cc [ConstraintElim] Update getLastConstraint to return to last row. (NFC)\nff8742df9e65 [flang] Fixed selective TargetRewrite.\n81767f52f493 [mlir][OpenMP] Add support for using Opaque Pointers in the OpenMP Dialect\n2ca46421f85a [mlir][Async] Add option to LLVM lowering to use opaque pointers\n7da2d644e039 [clang] [extract-api] Don't crash for category in libclang APIs\n57606bb35619 [ConstraintElim] Improve debug test to show removed constraints (NFC).\n81a79ee446fe [mlir] Add function for checking if a block is inside a loop\naf39acda8873 [VectorCombine] fix insertion point of shuffles\n78f13ea093af [extract_symbols.py] Adjust how the output of nm is interpreted\na00f17d81efb [clang][dataflow] Convert nonnull pointer parameter to a reference.\nb87e53ee2ad1 Revert \"[mlgo] Fix test after D143624\"\n737e1cd161f3 [libc] Move likely/unlikely to the optimization header\n78056e2f2d95 [InstCombine] propagate FMF in exp2->ldexp fold\n3abea2b5447c [InstCombine] copy tail markings in exp2->ldexp fold\ne89180801cd2 [InstCombine] add 'tail' to exp2 call in test; NFC\n86bfeb906e3a Revert \"Inlining: Run the legacy AlwaysInliner before the regular inliner.\"\nc4a250ecea14 [AMDGPU][MC] Generate relative relocations for allocatable (more particularly, eh_frame) sections\nf1837c707478 [DebugInfo] Handle missed DW_FORM_addrx3 and DW_FORM_strx3 cases\n04f4c4cc59db [clangd] Move function body to out-of-line: unnamed class method incorrect moving\nfef08da4b75f [mlir][llvm] Store memory op metadata using op attributes.\n067a5c68845c [amdgpu-arch] Fix build of amdgpu-arch with CLANG_LINK_CLANG_DYLIB\nb252824e6e6e [clangd] fix wrong CalleeArgInfo in the hover\n08061a5f1db6 [gn build] Port 6470706bc0ed\na3060f0f37e3 [X86] combineConcatVectorOps - concatenate AVX512 vselect nodes. NFC.\n4a96893fc5ca [libc] Fix exp2f and prevent misuse of likely/unlikely\n065a8cf00812 [gn] port 6470706bc0e\n25d0f3c4d0d9 [Assignment Tracking] Fix fragment index error in getDerefOffsetInBytes\n4d7c879d33a2 [mlir][llvm] Adapt loop metadata to match llvm\n8470430107d0 [NFC][compiler-rt] Shorten comment\n1e658ad1728e [Workflow] Add Release Repo sync script\n8ccde9368f94 [CMake][compiler-rt] Support clang-cl in CompilerRTMockLLVMCMakeConfig\nb3477f579c86 [RISCV] Add tests for .attribute stack_align\n9dcd7195a21c [InstCombine] avoid crashing in pow->ldexp\n5cec69bb43bc [clang] Update Clang version from 16 to 17 in scan-build.1.\n62a0a1b9eea7 [InstCombine] avoid crashing in exp2->ldexp\nc2b7085d5c86 [InstCombine] add test for exp2->ldexp; NFC\n55c0719557a9 [InstCombine] auto-generate check lines in test file; NFC\nc4ce967e3437 ARM: skip debug instructions when matching jump-table patterns.\ndc700f1e4daf [mlir][bufferization] Restrict function boundary buffer. to func.call.\n1842b5885baa [bazel] Fix build and make all target respect layering_check\nd624b9217d35 [RISCV] Add precommit tests for D143646\nf0f8ae7596c4 [AMDGPU][AsmParser] Fix matching immediate literals.\n68adc028b42d [InstCombine][NFC] regenerate tests for simple_phi_condition.ll\nce2514a6dea7 [Test] Add complementary tests for OR analogous for those for AND\n393675dad0c0 [Test] Add test showing an opportunity to transform checks and hoist invariants\nbb8bd8c232e8 [SanitizerBinaryMetadata] Fix ignorelist test under Windows\nbaca3c150733 Move SIMD alignment calculation to LLVM Frontend\nc77c186a647b [LVI] Don't traverse uses when calculating range at use\n0737770c3e1d [LVI][CVP] Add test for miscompilation by CVP due to incorrect range returned by LVI\nd768bf994f50 [NFC][TargetParser] Replace uses of llvm/Support/Host.h\n4ad8f7a18957 [Assignment Tracking][mem2reg] Remove overly defensive assert\nbb059e85d61b [Assignment Tracking][SROA] Delete dbg.assigns linked to rewritten stores\n65f9719913ec Revert \"[C++20] [Modules] [ClangScanDeps] Enable to print make-style dependency file within P1689 format (4/4)\"\na674a12dd57e [WebAssembly] Additional patterns for pmin/pax\n9ec06f40d66e [flang][NFC] Clean up polymorphic-temp.f90\n421215b919d0 [SanitizerBinaryMetadata] Support ignore list\nc340956e4efc [NFC][Assignment Tracking] Remove lifetime intrinsics from some tests\nfaf029d9728f [Test][SCEV] Add tests where multiple assumes can be used to improve trip multiple\n09c52a49402c [bazel] Add missing dependency after 687f78210d0\n57edc61093d9 [NFC] convert compiler-rt/lib/dfsan/scripts/build-libc-list.py to python3 syntax\nb67b26acc2ab [libc][Obvious] Include MPFRWrapper and testutils only if tests are enabled.\n6eb13809fb6f [bazel] fix build for 6470706bc0ed\n14dedd9cf596 [Reland][LSR] Hoist IVInc to loop header if its all uses are in the loop header\nd9283e79d826 [libc] Run libc tests unconditionally, even if there are no source changes.\n2441c0730603 [mlir][bufferization] Support multiple leaves in EmptyTensorElimination\nf4ef08433fe7 [OPENMP][NFC] added loop bind to the support page\n79d2c26f89e1 [SimplifyIndVar][NFC] Refactor Binary Operator's flag strengthening\n288f688e294a [NFC] Add test to show that preprocess an import decl won't require to load it actually\n687f78210d07 [MLIR] Fold away divs and mods in affine ops with operand info\ndd380f9243de [NFC] Remove the unused parameter introduced in e135476\n92e904b9ce2d [flang][hlfir] Ramp-up support of implicit interface mismatches\nfc2c791e89cd [mlir][llvm] Fix TBAA verfication crash\n70924673af68 [RFC][GISel] Add a way to ignore COPY instructions in InstructionSelector\nd9a6fc82f56f [AMDGPU] Run unmerge …",
        "tree": {
          "url": "https://api.github.com/repos/Lewuathe/mlir-hello/git/trees/6673480f178c18dcc743b1f61183a8eead4724a8",
          "sha": "6673480f178c18dcc743b1f61183a8eead4724a8"
        },
        "comment_count": 0
      },
      "author": {
        "login": "Lewuathe",
        "id": 1713047,
        "node_id": "MDQ6VXNlcjE3MTMwNDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1713047?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lewuathe",
        "html_url": "https://github.com/Lewuathe",
        "followers_url": "https://api.github.com/users/Lewuathe/followers",
        "following_url": "https://api.github.com/users/Lewuathe/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lewuathe/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lewuathe/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lewuathe/subscriptions",
        "organizations_url": "https://api.github.com/users/Lewuathe/orgs",
        "repos_url": "https://api.github.com/users/Lewuathe/repos",
        "events_url": "https://api.github.com/users/Lewuathe/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lewuathe/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "Lewuathe",
        "id": 1713047,
        "node_id": "MDQ6VXNlcjE3MTMwNDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1713047?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lewuathe",
        "html_url": "https://github.com/Lewuathe",
        "followers_url": "https://api.github.com/users/Lewuathe/followers",
        "following_url": "https://api.github.com/users/Lewuathe/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lewuathe/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lewuathe/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lewuathe/subscriptions",
        "organizations_url": "https://api.github.com/users/Lewuathe/orgs",
        "repos_url": "https://api.github.com/users/Lewuathe/repos",
        "events_url": "https://api.github.com/users/Lewuathe/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lewuathe/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/Lewuathe/mlir-hello/commits/59575d47b7b987c0f248b164547278a82ed0b456",
          "html_url": "https://github.com/Lewuathe/mlir-hello/commit/59575d47b7b987c0f248b164547278a82ed0b456",
          "sha": "59575d47b7b987c0f248b164547278a82ed0b456"
        }
      ],
      "repository": {
        "id": 317750590,
        "node_id": "MDEwOlJlcG9zaXRvcnkzMTc3NTA1OTA=",
        "name": "mlir-hello",
        "full_name": "Lewuathe/mlir-hello",
        "private": false,
        "owner": {
          "login": "Lewuathe",
          "id": 1713047,
          "node_id": "MDQ6VXNlcjE3MTMwNDc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1713047?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Lewuathe",
          "html_url": "https://github.com/Lewuathe",
          "followers_url": "https://api.github.com/users/Lewuathe/followers",
          "following_url": "https://api.github.com/users/Lewuathe/following{/other_user}",
          "gists_url": "https://api.github.com/users/Lewuathe/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Lewuathe/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Lewuathe/subscriptions",
          "organizations_url": "https://api.github.com/users/Lewuathe/orgs",
          "repos_url": "https://api.github.com/users/Lewuathe/repos",
          "events_url": "https://api.github.com/users/Lewuathe/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Lewuathe/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/Lewuathe/mlir-hello",
        "description": "MLIR Sample dialect",
        "fork": false,
        "url": "https://api.github.com/repos/Lewuathe/mlir-hello",
        "forks_url": "https://api.github.com/repos/Lewuathe/mlir-hello/forks",
        "keys_url": "https://api.github.com/repos/Lewuathe/mlir-hello/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/Lewuathe/mlir-hello/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/Lewuathe/mlir-hello/teams",
        "hooks_url": "https://api.github.com/repos/Lewuathe/mlir-hello/hooks",
        "issue_events_url": "https://api.github.com/repos/Lewuathe/mlir-hello/issues/events{/number}",
        "events_url": "https://api.github.com/repos/Lewuathe/mlir-hello/events",
        "assignees_url": "https://api.github.com/repos/Lewuathe/mlir-hello/assignees{/user}",
        "branches_url": "https://api.github.com/repos/Lewuathe/mlir-hello/branches{/branch}",
        "tags_url": "https://api.github.com/repos/Lewuathe/mlir-hello/tags",
        "blobs_url": "https://api.github.com/repos/Lewuathe/mlir-hello/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/Lewuathe/mlir-hello/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/Lewuathe/mlir-hello/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/Lewuathe/mlir-hello/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/Lewuathe/mlir-hello/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/Lewuathe/mlir-hello/languages",
        "stargazers_url": "https://api.github.com/repos/Lewuathe/mlir-hello/stargazers",
        "contributors_url": "https://api.github.com/repos/Lewuathe/mlir-hello/contributors",
        "subscribers_url": "https://api.github.com/repos/Lewuathe/mlir-hello/subscribers",
        "subscription_url": "https://api.github.com/repos/Lewuathe/mlir-hello/subscription",
        "commits_url": "https://api.github.com/repos/Lewuathe/mlir-hello/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/Lewuathe/mlir-hello/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/Lewuathe/mlir-hello/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/Lewuathe/mlir-hello/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/Lewuathe/mlir-hello/contents/{+path}",
        "compare_url": "https://api.github.com/repos/Lewuathe/mlir-hello/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/Lewuathe/mlir-hello/merges",
        "archive_url": "https://api.github.com/repos/Lewuathe/mlir-hello/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/Lewuathe/mlir-hello/downloads",
        "issues_url": "https://api.github.com/repos/Lewuathe/mlir-hello/issues{/number}",
        "pulls_url": "https://api.github.com/repos/Lewuathe/mlir-hello/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/Lewuathe/mlir-hello/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/Lewuathe/mlir-hello/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/Lewuathe/mlir-hello/labels{/name}",
        "releases_url": "https://api.github.com/repos/Lewuathe/mlir-hello/releases{/id}",
        "deployments_url": "https://api.github.com/repos/Lewuathe/mlir-hello/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/mocusez/mlir-learn/commits/5f63028555f11989b78d61371cb851f56e9779f3",
      "sha": "5f63028555f11989b78d61371cb851f56e9779f3",
      "node_id": "MDY6Q29tbWl0OTExNDQyMDU2OjVmNjMwMjg1NTVmMTE5ODliNzhkNjEzNzFjYjg1MWY1NmU5Nzc5ZjM=",
      "html_url": "https://github.com/mocusez/mlir-learn/commit/5f63028555f11989b78d61371cb851f56e9779f3",
      "comments_url": "https://api.github.com/repos/mocusez/mlir-learn/commits/5f63028555f11989b78d61371cb851f56e9779f3/comments",
      "commit": {
        "url": "https://api.github.com/repos/mocusez/mlir-learn/git/commits/5f63028555f11989b78d61371cb851f56e9779f3",
        "author": {
          "date": "2023-02-18T10:57:51.000+09:00",
          "name": "Kai Sasaki",
          "email": "lewuathe@gmail.com"
        },
        "committer": {
          "date": "2023-02-18T10:57:51.000+09:00",
          "name": "Kai Sasaki",
          "email": "lewuathe@gmail.com"
        },
        "message": "Squashed 'thirdparty/llvm-project/' changes from 23c1822d1a74..63c77bf71d80\n\n63c77bf71d80 [lldb] Make persisting result variables configurable\n920b46e108b2 [lldb] Add expression command options in dwim-print\ne49b93ef29a6 [gn build] Port 07e3ca238e68\n07e3ca238e68 Revert \"[TextAPI] Implement TBDv5 Reader\"\n4be17641b05d [TextAPI] wrap returned Errors in std::move\n347954314c97 [gn build] Port b861b1225380\nb861b1225380 [TextAPI] Implement TBDv5 Reader\nb309bc04eebc [GlobalISel] Combine out-of-range shifts to undef.\nd6d59e660bc7 [Clang] Fix __VA_OPT__ implementation so that it treats the concatenation of a non-placemaker token and placemaker token as a non-placemaker token\n34aff47521c3 [RISCV] Use MCSubtargetInfo::hasFeature where possible. NFC\nd9e4c1044072 [AArch64] Simplify with MCSubtargetInfo::hasFeature. NFC\nc0f3ac1d0015 Revert \"[Fuchsia] Enable llvm-driver build\"\nb1e09b5fa679 [libc++][NFC] Remove TODOs that are already done\n8007bcc13f8f [llvm-cov] Create syntax to pass source w/o binary.\n4eadd19cc423 [Fuchsia] Enable llvm-driver build\nef3a3b0726f4 [libc++][NFC] Replace _VSTD and _LIBCPP_INLINE_VISIBILITY in <__atomic/*>\n10b7cd660c73 [RISCV] Select signed and unsigned bitfield extracts for XTHeadBb\n2f88c07cf820 [lldb] StructuredData should not truncate uint64_t values\n8caa8d95afe4 [libc++][format] Addresses LWG3810.\n01afb3fb9902 [NVPTX] Use by default 'sm_60' architecture when expanding %ptxas-verify macro.\nf50cad2c55df [libc++] Mark a test relying on `typeid` as unsupported without RTTI.\nf6b724f1f9c8 [libc] Add basic fuzz target for the printf parser\n47fb6d1c65ec [libc] add mock arg list\n5fa9933c13e7 [mlir][tensor] Do not use affine ops on non-perfect-tiling unpack cases.\n2b2b8409e684 [RISCV] For rv32, accept constants like 0xfffff800 as a valid simm12.\nefe7c4b77bed Revert \"[RISCV] Add performMULcombine to perform strength-reduction\"\n16a66af0a0fe Revert \"[RISCV] Add vendor-defined XTheadMemPair (two-GPR Memory Operations) extension\"\n6774ba841145 [RISCV] xtheadmac: fix commutativity issue for the in/out register\n20cc23c708f0 [RISCV] Add performMULcombine to perform strength-reduction\nd2918544a7fc [RISCV] Add vendor-defined XTheadMemPair (two-GPR Memory Operations) extension\n21a543656cf4 [libc++] Add missing include in <__atomic/cxx_atomic_impl.h>\ndf56b55e1288 [RISCV][CodeGen] Add codegen patterns for experimental zfa extension (try 2)\n04d59f2ab3a8 [IR] Fix a warning\nf25cfd339a80 [mlir] Reintroduce API for creating operations with a DictionaryAttr\nbe83a4b257c8 [ADT] Fix tests for `StringMap::at` and `DenseMap::at`\n42944abf8583 [RISCV] Improve isInterleaveShuffle to handle interleaving the high half and low half of the same source.\nbc6e10c9efca [ELF][llvm-objcopy] Reject duplicate SHT_SYMTAB sections\n998ad085e865 Reland [gn build] Support linux/win compiler-rt cross compilation\n7a035de2d6c4 Revert \"[gn build] Support linux/win compiler-rt cross compilation\"\n2d85683f987a [lib++][format] Uses the new exception test macros.\nc0947dc44109 [RISCV][MC] Add support for experimental zfa extension (FLI instruction not included) (try 3)\nd73eb92cc673 [gn build] Support linux/win compiler-rt cross compilation\ncf86855c4453 [M68k] fix test regression introduced by D140180\n261d21f8c375 [libc++] Fixes a flaky test.\nc8399811e7b1 [gn build] Support building x86/64 Android libraries\n1ceb79e2e075 Port PlaceSafepoints pass to the new pass manager\n4180b29d206f [flang][runtime] Support DT edit descriptor in result of READ(SIZE=)\n7067aee367d4 [libc++][CI] Switches to clang-format-16.\nf7f86451ecd7 [libc++] Improve the format ignorelist generation.\n22b564c64b73 [RISCV] Add preferred function and loop alignment RISCVSubtarget. NFC\nb22aa3d74f27 [libc++][NFC] Rename _LIBCPP_NO_EXCEPTIONS to _LIBCPP_HAS_NO_EXCEPTIONS\n132003603ae3 [ADT] Add `at` method (assertive lookup) to DenseMap and StringMap\n2b51c8cd2ac6 [clang-tidy] Clarify bugprone-branch-clone diagnostic message\ndf82394e7a2d [libc][bazel] Export .bzl files for libc/test and libc/test/src/math.\n3476b56f0c78 [libc++][test] Adds more generic test macros.\n783cbf70abca [gn build] Port bf0f94a5cf82\nddeb55ab3359 [mlir] add option to multi-buffering\n4ecc6af813e2 [InstCombine] create a pass options container and add \"use-loop-info\" argument\ne03d254bbd54 [SLP]Do not reduce repeated values, use scalar red ops instead.\nbf0f94a5cf82 New SetOperations and unittesting for all SetOperations\n17a90f1196c1 Tighten up a modules test\n87a0479538fe [mlir][llvm] Fuse access_group & loop export (NFC)\ncf4df6168838 [SVE] Add intrinsics for floating-point operations that explicitly undefine the result for inactive lanes.\n83e9ef7e519a [mlir][standalone] Extend sample with custom type\naf6c0b6d8c9d [clang][CodeGen] Use base subobject type layout for potentially-overlapping fields\n4bf6cc63aa77 GH60642: Fix ICE when checking a lambda defined in a concept definition\n06621ecdaf41 [Clang] Convert some tests to opaque pointers (NFC)\nf098fb69f164 [Clang] Convert some tests to opaque pointers (NFC)\n4901245481b6 Fix Clang sphinx build\n6f3a756998b3 [RISCV][NFC] Add missing immediate operand types.\ne133cb9c6daf [mlir][llvm] Add DINamespace attribute\n276358fd3af5 [mlir][llvm] Make DI param optional to match LLVM\n76c638d1ddec [gn build] Port 46db8d822ecd\n46db8d822ecd [libc++] Granularize <atomic>\n62e4f81c6793 [AMDGPU] Simplify widenScalar condition for BigTy for G_(UN)MERGE_VALUES\nf3fa1086c7f8 [Clang] Convert some tests to opaque pointers (NFC)\nafcf70aa6de7 [analyzer] Remove unjustified assert from EquivalenceClass::simplify\n40a20ae6ab80 [libc++] Granularize <bit> includes\n2693efa8a5bc [MachineCombiner] Support local strategy for traces\ne6e0ba8d20b4 [Clang] Convert some tests to opaque pointers (NFC)\ncdf8f064694c [mlir] Add a folder for lbs, ubs, steps of scf.forall.\neb14186771e7 Revert \"[LLD] [COFF] Don't try to detect MSVC installations in mingw mode\"\nbf91cd6ea9d6 [mlir][llvm] Verify LLVM module before import\nda3623de2411 [JT] Always create BPI/BFI when running in legacy PM\n159073bc0a87 [clang-repl] Support compound statement as a top-level statement.\neb2f946e780c [mlir][scf] Rename ForeachThreadOp->ForallOp, PerformConcurrentlyOp->InParallelOp.\n65898e526060 [ConstantRange] Handle `Intrinsic::ctlz`\na1e80c69223a [Support] [Windows] Don't check file access time in equivalent(file_status, file_status)\n389bfbd66d6f [LLD] [COFF] Don't try to detect MSVC installations in mingw mode\n3d84f4268dd9 [Clang] Convert some tests to opaque pointers (NFC)\n6f4af64b7422 [mlir][llvm] Add atomic support to the LoadOp.\n55a18bfe9b65 [Clang] Convert some tests to opaque pointers (NFC)\n58dada5f0aad [AMDGPU] Add cross-project-tests for WMMA builtins\na048d7394be5 [MLIR][LLVM] Only disallow inlining for selected function attributes.\n57c81917d3a5 [Clang] Convert update_cc_test_checks tests to opaque pointers (NFC)\na96cbeb45062 [DAGCombiner] Teach MatchContextClass classes to use TargetLowering::isOperationLegalOrCustom().\n310deca248c8 [mlir] Add loop bounds to scf.foreach_thread.\n6d5ea6b12342 Revert \"[Coroutines] Stop supportting std::experimental::coroutine_traits\"\nc4e6e771f255 [Coroutines] Stop supportting std::experimental::coroutine_traits\nf2404a58b0b4 [NDF] Revert earlier nfc commit to test commit access\n511d55060454 [NFC] Testing new commit access by adding newline\ne0528382b570 [lldb] Add missing decorators import in TestPoPersistentResult.py\n5552c4ddd76d [lldb] Limit TestPoPersistentResult to darwin\n3328ee550c86 [lldb] Suppress persistent result when running po\nb3215c810617 [lldb] Rename SetResultIsInternal to SetSuppressPersistentResult (NFC)\n39811e2e537d [llvm][test] enable/disable -verify-machineinstrs where possible for callbr\nb05dc1b8766a [clang-format] Add a space between an overloaded operator and '>'\n7c9df7743521 [ADT] Provide C++20-style bit functions\n93de5f13b9dd [CodeGen] Fix warnings\n0eabb884abeb [mlir][gpu] NFC let user pick the threadID values when distributing foreach_thread\ne3a88a41af83 Revert \"[mlir][vector] Prevent duplicating operations during vector distribute\"\ncda4a0e918b5 [Sema] Relax a failing assertion in TransformBlockExpr\n25a461046ec2 OpenMP: Regenerate test checks\n77af16bcb78a Recommit \"Remove incorrect comment around `truncateAVX512SetCCNoBWI`; NFC\" (2nd Try)\n9e9444ca7d4b Recommit \"Transform vector SET{LE/ULT/ULE} -> SETLT and SET{GE/UGT/UGE} -> SETGT if possible\" (2nd Try)\nffe982f96bff [lldb] Stop generating swig bindings for SBLaunchInfo copy constructor\n8045ba89488c [ThinLTO/WPD] Handle function alias in vtable correctly\n54186d33c3a0 [clang] add __has_extension(gnu_asm_goto_with_outputs_full)\naf6656338db3 [clang] fix -Wuninitialized for asm goto outputs on indirect edges.\n329ef60f3e21 [Clang] support for outputs along indirect edges of asm goto\nb1bc723dfe97 [Clang] refactor CodeGenFunction::EmitAsmStmt NFC\na3a84c9e2511 [llvm] add CallBrPrepare pass to pipelines\n5cc1016a57b3 [llvm][SelectionDAGBuilder] codegen callbr.landingpad intrinsic\n28d45c843cd0 [llvm][CallBrPrepare] use SSAUpdater to use intrinsic value\n094190c2f529 [llvm][CallBrPrepare] add llvm.callbr.landingpad intrinsic\n0a39af0eb72d [llvm][CallBrPrepare] split critical edges\nfb471158aa0d [llvm] boilerplate for new callbrprepare codegen IR pass\n45a291b5f609 [Dominators] check indirect branches of callbr\ndf277ec67efd [X86][MC] Fix the bug of -output-asm-variant=1 for intel syntax\n7495a2e51bff [Attributor][FIX] Ensure we adjust types properly\n58bedaed0fea [LLDB] Remove unused variable 'lang_rt' in ClangExpressionParser.cpp (NFC)\n2738dc0bd3b7 [ComplexLogicCombine] Precommit tests for complex logic combine init patch; NFC\n8116fc592c5e Revert \"[LLDB] Enable 64 bit debug/type offset\"\nf253bb640d97 [WebAssembly] Fix simd bit shift intrinsics codegen\ne073de833671 [WebAssembly] Update wasm.c with update_cc_test_checks.py. NFC\ne6758c81f867 [mlir][sparse] comment out test cases in sparse_conversion with similiar behavior.\n65277494f04d [flang][runtime] Allow record advancement in child I/O via '/' control edit descriptor\n52a774fd4c18 [PowerPC] remove XXSWAPD after load from CP which is a splat value\nfb7c38073e80 [AArch64][ISel] Always use pre-inc/post-inc addressing mode for auto-indexed load/store with constant offset.\n0af5f84a13be [mlir][sparse] split reshape.mlir into expand/collapse_shape.mlir.\n22cdeb54a123 [MLIR][OpenMP] Add Conversion for Atomic Update Op\nb374423304a8 [Pipeline] Move ControlHeightReduction to module optimization pipeline\n9e8d9316ceaf [mlir][sparse] allow foreach operation to generate out-of-order loop on non-annotated tensor.\n2062e90aa531 [LLDB] Enable 64 bit debug/type offset\nb66fdbad44b3 [gn build] Manually port D143983\n956c7dca29c7 [Object][NFC] Remove unneeded llvm_unreachable\n56e41fcf5028 [PowerPC] Bail out of FISel when lowering long calls\nc2e248c6aea6 [mlir][sparse] Remove the expansion of symmetric MTX in the sparse tensor storage.\n5172877bbddc [Libomptarget] Check errors when synchronizing the async queue\n48c8e1602048 Revert \"[Libomptarget] Check errors when synchronizing the async queue\"\n53862b5658dd RenderScript still exists as a clang language, so handle as invalid\nf83e6c6d7a8d [Bazel][mlir] Fix build errors\nf5cca3c5ce7a [flang] Handle expression in SELECT TYPE selector\nb8d3d02d7c8c Remove now unused enum.\n5f5cf6029852 [Pipeline] Remove -enable-npm-O3-nontrivial-unswitch flag\n4d16ebd6c971 [Pipeline] Remove -enable-no-rerun-simplification-pipeline flag\ndccd1d736c25 [libc][bazel] add string to float targets\n662548c82683 [lldb] Replace SB swig interfaces with API headers\n23d43e697757 [libc++] Add regression test for std::hash implementation in ABI v1\nc6c41c31f1e5 [mlir][linalg][tensor] Delete duplicate tests and fix typo in filename\n17e2497593d6 Remove Renderscript LLDB\n22e199e6afb1 [RISCV] Accept zicsr and zifencei command line options\n372820bf571c [libunwind][PowerPC] Fix saving/restoring VSX registers on LE systems\nfbe210dc7a6a [libc] Implement htonl and htons\n35742743d273 [Hexagon] Fix number of arguments in call to DAG.getNode for VINSERTW0\nf842b7a6b8f4 [HLSL] add log library functions\n891b0910b3c4 Revert \"[RISCV][MC] Add support for experimental zfa extension (FLI instruction not included)\"\n8a17cd9905c2 AMDGPU: Add a regression test case for D143963\n8e5a41e8271f Revert \"AMDGPU: Override getNegatedExpression constant handling\"\nbbef38352fba Revert \"[LowerTypeTests] Support generating Armv6-M jump tables.\"\n9305b63d6951 [AMDGPU] Add another G_UNMERGE_VALUES legalization test case\nd9a04d1d5453 [libc] Support running tests for Pigweed\n2ac85cd56381 [AMDGPU] Regenerate check lines to enable updating for D144050.\n0871337d97f7 [XCore] Adapt Clang tests to opaque pointers.\n7ed26ad10cef [flang] Always incorporate parent types' special generic bindings\n1538761303ce [LSR] Add test case which shows additional LSR with D144050.\n861709107b43 [Libomptarget] Check errors when synchronizing the async queue\nf6fa5a66d8a8 [RISCV][MC] Add support for experimental zfa extension (FLI instruction not included)\neb3dfa0a2487 [Clang] Convert some tests to opaque pointers (NFC)\n081815b4e32c [Clang] Regenerate check lines (NFC)\n2d6713b5b7a2 Revert \"[RISCV][MC] Add support for experimental zfa extension(FLI instruction not included)\"\n80334ca1e285 Revert \"Update: [RISCV][MC] Add support for experimental zfa extension(FLI instruction not included)\"\n80abf86d506b Revert \"[RISCV][CodeGen] Add codegen pattern for experimental zfa extension (FLI and FCVTMOD not included)\"\n7abe3497e72a [LSR] Improve filtered uses in NarrowSearchSpaceByPickingWinnerRegs\na768112e0641 [Clang] Convert some tests to opaque pointers (NFC)\nf6ddf7781471 [LowerTypeTests] Support generating Armv6-M jump tables.\nafde3f549d7a llvm-tblgen: Apply IWYU partially\n3a6f3b44e434 [flang] lower hlfir.matmul into fir runtime call\n91cbc3f2d83d [flang] lower matmul intrinsic to hlfir.matmul operation\n09472ba31504 [flang] add hlfir.matmul operation\nec640382fc93 [mlir][MemRef] NFC - Add debug information to MultiBuffer.cpp\ne44f405bb41b [mlir][bufferization] Fix bug in findValueInReverseUseDefChain\n4565bc00de6e [DataLayout] Use separate vectors to store alignment (NFC)\nace6072bca65 [mlir] PromoteBuffersToStackPass - Copy attributes of original AllocOp\n28542e99bb82 [mlir][llvm] Use before def debug intrinsic import\n8421307b6b16 [Clang] Convert some tests to opaque pointers (NFC)\nb32b7068ef8e [ConstraintSystem] Use sparse representation for constraints. (NFC)\n66749ce92707 [ARM] Add Thumb LSR codegen tests. NFC\na9e4bb387b21 [flang][hlfir] Array constructor lowering [part 2/4]\nffde9f17300b [flang][hlfir] Array constructor lowering [part 1/4]\n849c4402261a [Flang][OpenMP] Added parser support for device_type clause\n5c988cba4a66 [flang] Use derivedType from toAddedum to get updated components\n96179dff46a9 [mlir][Linalg] Add a transform dialect op to rewrite ops to destination passing style.\nb58daf91d677 Add a lowering for memref.dealloc with unranked memrefs.\nba23bca0a83d [SME2][AArch64] Add multi-single multiply-add long long intrinsics\ne97fc5007e72 [flang] Add TODO instead of crashing on assert\n83014d877017 [libc++] LWG 3857: allow `string_view` conversion when only traits vary\n574e417460cd [clang] Fix a bug that allowed some overflowing octal escape sequences\n5bdd0beeee56 [MachineCombiner][NFC] Rename `MinInstr` to `TraceEnsemble`\na3d1de3e2908 [LV] Move invalid cost remark code to separate function (NFC).\n873ea45115a8 [mlir][llvm] Rename void debug type to null\nc76acb9dffec [UniformityAnalysis] Fix some file headers and pass names\n130d2953d878 [Flang][OpenMP] Fix a corner case where target region is empty\n4bc2357c3de2 [mlir][MemRef|Tensor] Fix the handling of DimOp\n7fbcc24409ef [llvm-debuginfo-analyzer] (08a/09) - Memory Management\n2002c82278f6 AArch64: count callee stack we use when estimating scavenging requirements.\n819dfc338bdd [AMDGPU] Autogenerate checks for several tests. NFCI\n0e1fb48bb95a [lld-macho] Use uint64_t instead of size_t to fix 32 bit test failures\neeb125659c17 [InstSimplify] Slightly optimize simplifyLoad() (NFC)\n37b7a60cd74b [NFC] Add a test for C++20 Modules\na1b78fb929fc [JT][CT] Preserve exisiting BPI/BFI during JumpThreading\nf8d5f0e53b04 [NFC] Add two tests for C++ modules\n4469ec1d196f [mlir][llvm] Import alias scope metadata from LLVM IR.\nc9fad20f6a66 [InstCombine] Call simplifyInsertValueInst()\n6bec2c30777f [InstCombine] Add additional aggregate reconstruction test (NFC)\n9ca2c309ab06 [InstSimplify] Fix poison safety in insertvalue fold\nb0de87268a60 [flang] Retrieve the correct scope when lowering SELECT TYPE\n86c8ea9ac922 [mlir] Add check for value that might be null.\nf62b084e92e0 [LoopDeletion] Remove legacy pass\n999ead9dc908 [Modules] Code cleanup after removing ModulesTS\n612f3ac26f8c [Modules] Remove -fmodules-ts\n96df79af029b [X86] Support load/store for bf16 in avx\n7e6e636fb683 Use llvm::has_single_bit<uint32_t> (NFC)\n68e81d7e45c7 [ADT] Use llvm::rotr (NFC)\nd54888a3ebb1 [Modules] Refactor modules-ts tests to use standard c++ modules\nfc6d517e2f33 [RISCV][CodeGen] Add codegen pattern for experimental zfa extension (FLI and FCVTMOD not included)\n5e815372480d [Clang][RISCV] Sort test cases into its mnemonics\na1aad28d297a [mlir][vector] NFC: Improve vector type accessor methods\n5382d28815d8 [mlir] Use std::optional instead of llvm::Optional (NFC)\n43059255ce53 [RISCV] Make a const member function static. NFC\n321cd52ba264 Update: [RISCV][MC] Add support for experimental zfa extension(FLI instruction not included)\n54c136e6c630 [RISCV][MC] Add support for experimental zfa extension(FLI instruction not included)\n7081e59dd12a [MC] Remove an unneeded comparison on cast result. NFC\n9a2cb3a6925f Fix bazel build\nf30ca850ef8b [mlir][sparse] reduce the input size in stress_test.py to make it finish in time.\ndcf18e4757b2 [debugserver] Initialize logging earlier in the startup sequence\nc738b430c46a [mlir][sparse] introduce operations to query sparse tensor slice offset/strides at the given dimenion\na851d46e07c1 [Clang][Driver] Fix integer normalization with KCFI\n4eee77873bca [LoopReroll] Remove legacy pass (unused in the pipeline)\ne2e83f4c8f1d [mlir][sparse] support coiteration over sparse tensor slices\n22b7685401e8 Reland \"[hwasan] Add definitions for missing operator delete functions\"\na9269773eb94 [scudo] Improve the uses of roundUpTo/roundDownTo/isAligned\n94a391b94972 [scudo] Calling iterateOverChunks requires holding lock\nae1bd3adf02f [scudo] Add thread-safety annotations on TSD data members\ne7d3f43eafdd [LoopFlatten] Inline an external linkage function not in llvm::. NFC\n48bfed77cf86 [LoopFlatten] Remove legacy pass (unused in the pipeline)\nf1ddfa6d8a72 [lldb] Remove pydoc import during script interpreter init\n7d62bc9cd380 [mlir][sparse] disable sparse convolution test cases.\n21ccddd2cee1 [LoopInterchange] Remove legacy pass (unused in the pipeline)\n66b3f4a40731 [libc][bazel] Add missing dependency for stdlib tests.\n9ed587ea9bec [mlir][sparse] split sparse concatenate test cases smaller ones.\nae7942e2960e [mlir][sparse] adding `SparseTensorType::get{Pointer,Index}Type` methods\n8bd0e9481cfc Revert \"Transform vector SET{LE/ULT/ULE} -> SETLT and SET{GE/UGT/UGE} -> SETGT if possible\"\n7adf26e7683d Revert \"Remove incorrect comment around `truncateAVX512SetCCNoBWI`; NFC\"\nc38c8d674383 [PseudoProbe] Refactoring a test\n7058f083020d [gn build] Port 6f3e6a765a9e\nf5aa8d191a5b [Clang][docs] Update the release notes page to the new skeleton\n6313ece5ce94 Revert \"[hwasan] Add definitions for missing operator delete functions\"\n052ae28ac77f [RISCV] Use !cond instead of multiple !if in RISCVInstrInfoVPseudos.td. NFC\nd464edde9571 [X86][Win64] Avoid statepoints prior to SEH epilogue\nd950bdc73eb2 [mlir][sparse] misc code cleanup\n74a5d7471fbd [flang][runtime] MayAlias() must be false for unallocated descriptors\n08ecef8e338f [RISCV] Add CLB/CLH/SLB/SLH formats for Zcb instructions.\n792a724f894a [RISCV] Remove some vestiges of Zbp and Zbt extensions. NFC\n8c1f77af7fd1 [clang-format] Fix windows build.\ne6fbfb1ff1d3 [NFC] Make Module::getIFuncList() private\nbb4fc6b6d6b4 [mlir][sparse] Adding `SparseTensorType::{operator==, hasSameDimToLvlMap}`\nee437afa912b [flang] Don't add a source range to a type instantiation's scope\n6f3e6a765a9e Revert D129735 \"[RISCV] Add new pass to transform undef to pseudo for vector values.\"\na9797d7d2d78 [C2x] Implement the `unreachable` macro for WG14 N2826\nd6ff0808618c [hwasan] Add definitions for missing operator delete functions\n565048543b35 [NFC][SVE] Refactor isel for floating multiply-add operations to use PatFrags.\n72584d91990b [scudo] Fix inconsistent signed/unsigned comparison\ndf2ea2fc2839 [ConstriantElimination] Add NODEBUG condition around `dump`\n8a7b5e0e50de [AArch64] Guard extra uses in mls combine.\nc3ca29080c17 [mlir] bazel fix\nbe75cf931f3f [mlir][tensor] Fix a bug in tiling unpack op.\na41e1ea2a746 [libc++][CI] Starts using Clang 17.\neddec9de44cd [Pseudo probe] Duplicate probes in vectorized loop body.\n57865bc5ad27 [CodeGen] Add a flag to `Address` and `Lvalue` that is used to keep track of whether the pointer is known not to be null\n9048ea28da95 Reland \"[mlir] Make the vast majority of intgration and runner tests work on Windows\"\n114ce273d86a [flang][runtime] Fix typo in assign.cpp\n78e172fc92e7 [mlir][spirv] Support i32 memref.atomic_rmw conversion\n7889f424966e [flang][NFC] Remove unwanted tab\n97ba3c2bec48 [Clang][AMDGPU] Set LTO CG opt level based on Clang option\n45ee0a9afc62 [LLD] Add --lto-CGO[0-3] option\n3cf7f2249825 [mlir][vectorToGPU] Fix type used when folding transpose into read op\na225d897c151 [DebugInfo][Docs] Fix broken link in instruction referencing doc\n82ae83a8487d [mlir] Silence a few -Wunused-but-set-parameter warnings\n22f0c7a45149 [mlir][AMDGPU] 8-bit float usage in the AMDGPU dialect\n50ef8673a378 [InstCombine] remove stale test comment; NFC\n07f93d8c2cc4 Recommit \"[ConstraintElimination] Change debug output to display variable names.\"\nb413b84a704e [libc++abi][AIX] Skip non-C++ EH aware frames when retrieving exception object\nb0bfbad19b06 [AArch64] Always lower fp16 zero to FMOVH0\nef15617f124c [flang][runtime] Return the right mutable modes from INQUIRE in child I/O\n6dd9d18204d2 [mlir][linalg] Fix insertion point bug in D144022\n4f15267d3dd7 [libc++][NFC] Replace _LIBCPP_STD_VER > x with _LIBCPP_STD_VER >= x\n6b991ba486b6 [clang][dataflow] Change `transfer` API to take a reference.\n02ae7e72b3f0 Revert \"Recommit \"[ConstraintElimination] Change debug output to display variable names.\"\"\n22882c39df71 [InstSimplify] Add additional insertvalue into undef tests (NFC)\n93164dba086d [llvm][AArch64] Fix BTI after returns_twice when call has no attributes\n2a2a6bfcfe8e Recommit \"[ConstraintElimination] Change debug output to display variable names.\"\n62d0e1a8541f Revert \"[ConstraintElimination] Change debug output to display variable names.\"\n869c87ad10e8 [ConstraintElimination] Change debug output to display variable names.\nb67ee5d50562 [reland][libc] Separate memcpy implementations per arch\nc645eb0d03bd [mlir][memref] Bufferize memref.tensor_store op\n01581e28ad92 [mlir][linalg] Add bufferize_to_allocation transform op\n07916cea2e7e [ConstantFold] Check for constant global earlier (NFC)\n8b5004864aab [lld][RISCV][test] Expand testing in riscv-attributes.s\n4c3408697b73 [LangRef] improve documentation of SNaN in the default FP environment\n7a282bd2aaa5 [bazel] Fix missing dependency in clang-tools-extra/clang-tidy:llvmlibc\n861764b1c5f7 [NVPTX] Fix NVPTX output name in the driver with `-save-temps`\n15b90805bcb8 Revert \"[libc] Separate memcpy implementations per arch\"\n97e441dc6cfa [libc] Separate memcpy implementations per arch\n3ef062a4bd86 [mlir][transform] Add transform.get_result op\n1f818f63b829 [clang-format] assert(false) -> llvm_unreachable\nf70282237166 [bazel] create a clang-tidy binary target\n980aa8d740da [MachineTraceMetrics] Add local strategy\nb0e7ca79ab0c [X86] Remove abs(sub_nsw()) -> abds fold from adbu test file\na8483b9b3038 [lldb] Fix a log format warning on Windows, don't assume uint64_t is a long type\n1995d4424505 [clang-format] Enable FormatTokenSource to insert tokens.\n9ccc58893be8 AMDGPU: Fix not adding to depth in getNegatedExpression\n7cbbbc0a045b clang: Rename misleading test name\n674f094d852b [lld][ARM][NFCI][1/3]Big Endian support - Removing assumptions\n5bb8ead4e9dc [AArch64][NFC] Rename  AEK_SMEF64 and AEK_SMEI64 feature flags\n3600b384462b [SimpleLoopUnswitch] Canonicalize conditions for injection of invariant condition\n0992e6ee115e [Test][NFC] Rename one of test parameters to avoid confusing associations\ne117fd28d525 [Symbolize][MinGW] Support demangling i386 call-conv-decorated C++ names\n14fcdd7f9d7b [CVP] Add additional ctlz tests (NFC)\n4c8eda9337d4 [XCore] Adapt threads.ll to opaque pointers.\nbc173f526c57 [SimpleLoopUnswitch] Fix overflowing frequencies case\n45ddc157ca7c [clang-tidy][NFC] Remove ModernizeTidyModule::getModuleOptions\nc7f9344d0f8f [DAGCombine] Fold redundant select\nc3228714cc0e [libc][NFC] Make tuning macros start with LIBC_COPT_\nd64d5772b1ea Add InstSimplify tests for comparisons between known constants\n59b8db1db8ec [JITLink] Drop const qualifier from argument to ELFLinkGraphBuilder's ctors (NFC)\n1c42f8e69d8f [JITLink] Fix whitespace in debug dumps (NFC)\n7d9cf97f80f0 [bazel][mlir][examples] Add missing dependency for 72429a42ac33564fa82449d99dc234da32a05498\n458ad6900e66 Revert \"InstCombine: Fold is.fpclass(x, fcZero) to fcmp oeq 0\"\ne1d95e99bc31 [flang] Update intrinsic types to unlimited polymorphic form\n11c3cead2378 AMDGPU: Override getNegatedExpression constant handling\na4e8347b3661 AMDGPU: Refactor isConstantCostlierToNegate\ndf78976d023a InstCombine: Fold is.fpclass(x, fcZero) to fcmp oeq 0\n8f7e7400b74b [mlir][bufferization] Add restrict and writable attrs to to_tensor\n462227f1150f [SROA] NFC: Look at TypeStoreSize scalable property, rather than at type directly.\n35276f16e5a2 [llvm-c] Add C API methods to match 64bit ArrayType C++ API signatures\n71712440bbb2 [mlir] Add vectorize_nd_extract attribute to the masked_vectorize Op\n86a63b2ae147 [Metarenamer] Use 'inst' as default name for instructions\nddc5d40dd285 [clang][analyzer] Make messages of StdCLibraryFunctionsChecker user-friendly\nc1eb3db780b7 [LoopFuse] Remove legacy pass\n30d542f9b2ad [MLIR][Tensor] Introduce a pattern to propagate through `tensor.pad`\n2872987e5e91 [InstCombine] Fix InstCombinerImpl::foldICmpMulConstant for nsw and nuw mul with unsigned compare.\n41628d050a17 [mlir][Bazel] Add missing dependencies for 72429a42ac33564fa82449d99dc234da32a05498\n4bba8bd33efd [mlir] Add RewriterBase::replaceAllUsesWith for Blocks.\n72429a42ac33 Add a pass that builds a debug info scope for LLVMFuncOp (adding a DISubprogramAttr)\nd7ca25342ff6 [mlir][Bazel] Add dependency needed for e9b82a5c\n1427277eed80 [mlir][Vector] Enable masking for static shapes\n1ac874c9aa18 [mlir][Vector] Add support for masked vector gather ops\n9452356ddcf4 [mlir][Vector] Add support for masked vector.contract\ne9b82a5c4fb6 [mlir][Vector] Add LLVM lowering for masked reductions\na409f3c06914 [LoopVersioningLICM] Remove legacy pass\n0dc18b6222f4 [mlir] Use std::optional instead of llvm::Optional (NFC)\n05423905d064 [mlir] Use std::optional instead of llvm::Optional (NFC)\n4dfd5a3eb6c3 [llvm] Use std::optional instead of llvm::Optional (NFC)\n71251e8d4f3f [mlir] Fix -Wsign-compare in SparseTensorRewriting.cpp and Sparsification.cpp (NFC)\n9e6e96f3e4c3 [gn build] Port f1c4241fb6e5\nf1c4241fb6e5 [RISCV] Add new pass to transform undef to pseudo for vector values.\na17bfbad6387 [RISCV] precommit test for D129735\n54cf24dc6e63 [NFC] Refactor ModuleDeclStateTest to make it not dependent on Frontend\nef6d474aa7ac [ORC] Add ELFNixPlatform::Create overload -- Pass ORC runtime as def generator.\nf708a549b87e [mlir][sparse] Factoring out SparseTensorType class\n8d995b26c755 [C++20] [Modules] [ClangScanDeps] Ensure that we can mix the use of and clang modules\naef76fe554ee [clang-format][NFC] Reformat clang/tools/clang-format/fuzzer/\n81cb70e46ea1 [mlir][sparse] fix a bug in UnpackOp converter.\ndd31a3b3a526 [InstCombine] fold icmp of the sum of ext bool based on limited range\n06f06644efb0 [SeparateConstOffsetFromGEP] Fix: `b - a` matched `a - b` during reuniteExts\nf93da3962eed [Instcombine] Precommit tests for icmp range; NFC\na52432f63312 [NFC][SeparateConstOffsetFromGEP] Added flag `lower-gep`\na211d79cac12 [bazel] Port 26662ac010ef50e65e2774eab84f325aa09360fe\n6e794ba0b238 [Clang][RISCV] Guard vector int64, float32, float64 with semantic analysis\nc0f504df4857 [mlir] Fix two build warnings in VectorToGPU (NFC)\nbb692d44c43f [gn build] Add missing count dependency for check-asan\ndfacba5af0fb [scudo] Update ring buffer test to make it accept zero size\n766065aa6553 [LoopUnrollAndJam] Remove legacy pass\n6a4c39596d68 [scudo] Add the thread-safety annotations\n2b8cb7d87fcb [LoongArch] Make use of addu16i.d for adds with suitable immediates\ndcf9c60a538c [LoongArch] Add baseline tests for `addu16i.d` codegen. NFC\n82c6e90d6a3d [Clang][Test] Add llvm-lto, llvm-lto2 and llvm-profdata to the tool substitutions list\n6adf92026ee5 Remove trailing whitespace in `X86InstrAVX512.td`; NFC\nf895d55f149b Remove incorrect comment around `truncateAVX512SetCCNoBWI`; NFC\n42e11a6ea321 Add transform (and/or (icmp eq/ne (A, C)), (icmp eq/ne (A, -C))) -> (icmp eq/ne (ABS A), ABS(C))\nabf6692f9513 Tests for (and/or (icmp eq/ne A, C), (icmp eq/ne A, -C)) <--> (icmp eq/ne (ABS A), ABS(C)); NFC\n8b5c3902475b Transform `(icmp eq/ne Abs(A), Pow2)` -> `(and/or (icmp eq/ne A,Pow2), (icmp eq/ne A,-Pow2))`\n54a9e992c84c Add Transform for `(and/or (eq/ne A,Pow2),(eq/ne A,-Pow2))`->`(eq/ne (and (and A,Pow2),~(Pow2*2)), 0)`\ne29c4393236f Add tests for folding `(and/or (icmp eq/ne A, Pow2), (icmp eq/ne A, -Pow2))`; NFC\nf3732c2b18df Transform vector SET{LE/ULT/ULE} -> SETLT and SET{GE/UGT/UGE} -> SETGT if possible\n3e0866bf616b [mlir][Vector] NFC - Fail gracefully on size mismatch instead of assert\n5ef7ceae5769 [mlir][Vector] Significantly improve VectorToGPU.cpp\n26662ac010ef [Support/BLAKE3] Rename blake3_* -> llvm_blake3_* to avoid symbol collisions\n10eea3fe1536 [LoopVersioning] Remove legacy pass\n74a2dd1356bf [InstSimplify] fix/improve folding with an SNaN vector element operand\nac2f13f673b8 [InstSimplify] add tests for vectors with SNaN constants; NFC\nae0c203e676e [LoopLoadElimination] Remove legacy pass\n87046744e6a8 [Driver] Allow test to use lld-link.exe not just lld-link\neb5530e621aa [LoopDistribute] Remove legacy pass\n823186b14dc9 Recommit: [NFC][IR] Make Module::getGlobalList() private\n0a0d58f5465a [libc++] `<algorithm>`: `ranges::minmax` should dereference iterators only once\n83ba349ae0a8 [InstSimplify] fix/improve folding with an SNaN operand\n4a4e44e378ca [InstCombine] add test for loop-invariant fdiv; NFC\n1ce1e4a4d59d [mlir][spirv] Validate float type bitwidths\n96fcaf0cc06a [openmp] Fix building for mingw targets after import library changes\ncb5f239363a3 Revert \"[NFC][IR] Make Module::getGlobalList() private\"\ncafb1c1cb241 [runtimes] Remove duplicate imports of libcxx.test.config\nb4243bb611a3 [clang-format] Don't rewrite the input file if already formatted\ned3e3ee9e30d [NFC][IR] Make Module::getGlobalList() private\n33d0d1e36ffa [runtimes] Rename newconfig.py to config.py -- it's not new anymore\n9f3a3e1f3f97 [lldb] Disable macro redefinition warnings in expression wrapper\n20cdf7c70667 [InstCombine] Increase limit for max copied from constant fold\n0d4e55ba69c1 [OpenMP] Recover non-blocking target nowait disabled by D141232\n9093f3c39b8f Report a useful error when someone passes an incorrect python class name.\n853a46cfb1ca Revert \"llvm-reduce: Run instruction reduction last\"\n9e9293ee6aaf [llvm][test] convert one test to use opaque ptrs (NFC)\nac835ecb5fea [Fuchsia] Set /winsysroot in Windows runtimes linker flags\nc062e97acfba [llvm][test] restrict 2 GVN tests to just test GVN (NFC)\nc510c387631e [libc++][NFC] update Range Status for the completion of C++20 ranges\nb677d0753c0a [IPSCCP] Remove legacy pass\n36606cf07080 [NFC] Replace -1U{LL} expressions with appropriate *_MAX macros in Support library.\n31c35285d27e [mlir][spirv] Fix crash when decorating physical storage buffer pointers\n913b4aa60830 Reland \"[compiler-rt][hwasan] Add unused attribute to GetRegisters\"\nddb704247b16 [clang][test][RISCV] Introduce separate RUN lines for __risv_i test in riscv-target-features.c\naecb36c8489a [GlobalOpt] Remove legacy pass\nb40bfc1b9e38 Reland \"[gn] port f29cfab55d1f\"\n5b455a8efbf5 [InlineAdvisor] Restructure advisor plugin unittest cmake\n08533f8b8660 Revert \"[CGP] Add generic TargetLowering::shouldAlignPointerArgs() implementation\"\n12b4f9e2af95 [AMDGPU] Do not apply schedule metric for regions with spilling\n5c1b8de77d1c [libc++][doc] Sets the proper plenary date.\n8cf1524cbc7f [loop unroll] Fix `branch-weights` for unrolled loop.\nfb717fe06dd0 [NFC][IR] Make Module::getNamedMDList() private\neaeb8ddd4a9d [LLDB] add arch-specific watchpoint behavior defaults to lldb\n8198f30f7e75 [lld-macho] Account for alignment in thunk insertion algorithm\n055cd78eef15 [RISCV] Untabify THMulAccumulate_rr. NFC.\nd4012bc43f9a [RISCV] Add vendor-defined XTheadMAC (multiply-accumulate) extension\n179db7efe567 [MLIR][OpenMP] Add support for depend clause\n361d5a7a9f14 [gn] port 4e3dac6f0a4c (ScudoHooksUnitTest)\n7301a7ce196e [mlir][linalg] Make Linalg vectorizer lower affine.apply\n4e3dac6f0a4c [scudo] Call __scudo_deallocate_hook on reallocations.\n6c7894a8e652 [libc][doc] Move docs/math.rst to docs/math/index.rst\nddde06906be1 [OpenMP]Fix PR55970: Miscompile of collapse(3) with non-rectangular loop nest.\n5dc400ea2f06 [gn build] Port 7f5d130a428f\n1da2085a5133 libclc: add clspv to targets exempt from alwaysinline\n290308a99e6b libclc: add generated convert.cl to clspv/clspv64 targets\n9c8f3409494f [libc++][format] Fixes test failures.\n7f5d130a428f [libc++][chrono] Add hh_mm_ss formatter.\n5205c7126b2f [mlir][gpu] Add support for unsigned integer extend in vector to gpu.subgroup_mma lowering\nf6cd46e07fcc libclc: add more generic implementations to clspv SOURCES\nf8877d86a867 [libc++][doc] Adds Issaquah papers and issues.\n5a81d0eea40a [AArch64] Remove dead isReflexive methods. NFC\na9f384994b9d [libc++] Counter<T>'s assignment operator shouldn't ++gConstructed\n755535b5eb5f [flang][runtime] Handle aliasing in Assign()\n0f52c1f86c62 [llvm] Deprecate {Bits,Float,Double}To{Bits,Float,Double} (NFC)\nd180443570d7 [NFC][IR] Make Module::getIFuncList() private.\n016d5a0a0a15 [flang] Strengthen conformance requirements for allocatable/pointer dummy arguments\nd05e1e99b1d6 [clang][test][RISCV] Check for __riscv_i in riscv-target-features.c\n574d0c2ec107 [clang][test][RISCV] Fix precision of CHECK-NOT lines in riscv-target-features.c\nf4d8b8781de9 [AMDGPU ASAN] Remove reference to asan bitcode library\nc5085c91cc8e [CodeGen] Trivial simplification of some getRegisterType calls. NFC.\n800fec13a81f [libc++] Enforce formatting for already formatted and new files and ignore the formatting of tests\nacbb15ed705f Revert \"[extract_symbols.py] Adjust how the output of nm is interpreted\"\n9a8d64a66a15 Revert \"[libc] Separate memcpy implementations per arch\"\nbf987e108fcc [AArch64][SME]: Custom lower select and fp_extend for streaming SVE\n26541d417634 [libc] Separate memcpy implementations per arch\n8981f20ae9c3 [libc] refactor logic around embedded memcpy\n3af88305e443 [flang] Associate entities are variables\nfefe729f0f4a [AArch64][SME]: Custom-lower SIGN_EXTEND_INREG for streaming SVE\n057cae64ebc4 [MLIR][Presburger] Matrix: hide expensive consistency check behind EXPENSIVE_CHECKS macro\nf04421739232 [ConstraintElim] Add reproducer remarks.\n9c14132d7b6c [AArch64][SME]: Add missing Ops that need custom-lowering in streaming mode.\nbfbfbd8b65de [LVI] Fix and re-enable at-use reasoning (PR60629)\n0fa5df1959fa [LV] Synthesize all true masks for masked vector function variants\n09dd4d870e19 DAG: Remove hasBitPreservingFPLogic\nd94399c64151 [mlir][llvm] Make LoopAnnotations non-discardable\n463fa25c34d6 [clang][NFC] Adjust tests to not un/define predefined macros\n7a49d50f22ad [flang] support fir.unreachable in stack arrays pass\neb436da6b826 [flang] automatically load FIR dialect with hlfir\nddfabefe1be1 [libc] Conform memcpy tuning macro to the new naming scheme\n77bd15ae2fa3 [MachineTraceMetrics][NFC] Move Strategy enum out of the class\n147f476e851d [mlir][LLVM] Properly wrap code examples in markdown code blocks\na5488a398f3b [flang][hlfir] remove unnecessary header include\n1fae1464d7a7 [flang] Fix USE rename\n67223522355b [SimpleLoopUnswitch] Re-enable simple-loop-unswitch-inject-invariant-conditions\nc7ea20c8eed5 [SimpleLoopUnswitch] Ignore inner loops when injecting invariant conditions. PR60736\nf3c008ca776b DAG: Relax foldBitcastedFPLogic conditions\n3849dc1f8eeb [NFC] Move some asserts out of Expensive Checks\n94676cf8a13c [llvm][AArch64] Fix an interaction of SLS and BTI after a returns twice call\nebc21c7a2558 [Test] Add test for PR60736\ncfeb0bf83ec1 [SimpleLoopUnswitch] Temorarily switch off simple-loop-unswitch-inject-invariant-conditions. PR60736\n8c7cfa357280 [mlir] fix LLVM IR translation of vector<... x index>\n98ecc3ac77a9 [Flang] Fix for Any/All simplification to properly propogate the inital value\ne8d44841c5d5 [docs] Update the ACLE URL\n6240627cfda4 [docs] Fix bullet list formatting\n0b33f0d80b83 [mlir][linalg] expose convolution dimension classifier\n7fdc2ed09f44 [mlir] reallow null results in TransformEachOpTrait\n64dad4ba9af6 Use llvm::bit_cast (NFC)\n544831ab9f35 [mlir] Drop unused arith conversion class (NFC)\n504aa8ae941e [include-cleaner] Better support ambiguous std symbols\n1ba93c3c30dc [Modules] Don't re-generate template specialization in the importer\n46cdf7f09912 [Tooling][Stdlib][NFC] Reflow comments and strip clang-format pragmas\n697a162fa63d [AVR] Fix inaccurate offsets in PC relative branch instructions\n1e6921131aa4 Move global namespace cl::opt inside llvm::\n4f0eb57222de AMDGPU: Teach getNegatedExpression about rcp\nce4b719f33e5 AMDGPU: Add test for getNegatedExpression with rcp\n0a669bd894f3 AMDGPU: Add additional tests for combiner infinite loop\n463ab1e07a0a llvm-reduce: Run instruction reduction last\n04f69345894d [DAG] Handle build_vector with all undefs in reduceBuildVecTruncToBitCast\n2e9549db2686 [LangRef] Global variable declarations imply minimum size\naf838c1b1c20 [Coroutines] Don't run optimizations for optnone functions\nbfea83767603 [mlir][llvm] Reintroduce string based attribute setting.\ncb90bb986611 [PowerPC] Specify the dynamic loader prefix in ppc-float-abi-warning\ndf3e73dabb5b [LoopDeletion] Simplify. NFC\n9c4f0d83f64e [docs] Add document for clang-scan-deps -format=p1689\n8c74defcca50 [OpenMP] Fix extra parenthesis in kmp_os.h\n5e78b749eccf [ARM] Use llvm::rotl and llvm::rotr (NFC)\na411bc727426 [RISCV] Rename InstFormatCSZN->InstFormatCU to match latest Zcb spec. NFC\n639b7865a67f [RISCV] Use llvm::rotl (NFC)\nafad153a0890 Recommit: [NFC][IR] Make Module::getAliasList() private\ndf77dec93e17 [AArch64] Use llvm::rotl and llvm::rotr (NFC)\n9700eb4fbfdc [bazel] build fix\n48f04ffa9f36 [mlir][affine] Normalize constant valued bound loop\n6d4a674acbc5 Revert \"[NFC][IR] Make Module::getAliasList() private\"\n7c6b46e87eaf Revert \"[DAGCombiner] handle more store value forwarding\"\nac6219d0aeb7 Revert \"[DAGCombiner] fix comments for D138899; NFC\"\nb64f7d028bdc [NFC][IR] Make Module::getAliasList() private\n6ee2f770efb6 [PowerPC][GISel] add support for fpconstant\n5561e174117f Revert \"[mlir] Make the vast majority of integration and runner tests work on Windows\"\n663725947bae [flang] Disable libc++ assertions in the runtime library\ncff7fad1544a [flang] Catch repeated BIND(C) attribute specifications for a symbol\n235e90c1d760 [Clang][RISCV] Guard vector float16 type correctly with semantic analysis\n4b815d8443db [mlir][NFC] Remove unused variable 'indexType' in GPUTransformOps.cpp\n288ae0b92f57 [mlir][gpu] NFC change to pass threadID ops to rewriteOneForeachThreadToGpuThreads\n69373a5d3f45 [flang] Check for invalid BIND(C) names\n4148f2768b87 [flang] Check for non-interoperable intrinsic types in BIND(C) derived types\n855b67799b7c [libc++][NFC] Remove duplicated line from `Cxx20Issues.csv`\n30d932305567 [flang] Pointers returned from functions are not definable as pointers\n632fd9fb861c [flang] Respect inaccessibility of type-bound ASSIGNMENT(=)\n5402110e0123 Revert \"[lldb] Use portable format string PRIx64\"\n7bc9dc26bc9b [Fuchsia] Add FUCHSIA_ENABLE_LLDB option.\n860ed6c078b4 [flang] Warn about dangerous TRANSFER()\n776b7499ea81 [TLS] Added a LangRef entry wrt the module flag MaxTLSAlign.\nb57bc158ea46 [flang] Catch obscure structure constructor error\nee88f1177003 Find SDK path more lazily in Apple Simulator platforms\nf7016f8a8ea2 [scudo] Call getStats when the region is exhausted\n70758b801df9 [scudo] Calling getStats requires holding lock\nf28c1a9df2e3 [flang] Conform with standard (mostly) for character length mismatches on arguments\ne800c664f0e9 [mlir][sparse] Extend readCOOIndices to support overhead types beyond index_type.\n8151d6f80458 [flang] Diagnose REPEAT with negative NCOPIES=\nce9ce66b8def [mlir][sparse] fix a memory leakage when converting from a tensor slice\n5fde2d99513f [libc] Write stub files to a new directory to avoid conflicts\n4f1037f86a62 [flang][build] Fix build issue reported on recent commit\n620b3d9ba334 Revert \"[LLDB] Enable 64 bit debug/type offset\"\neb0ea28b6a1b [OpenMP] Add check for target allocator regardless of the availability of libmemkind\n81566001e0c8 [mlir][tosa] Enable `apply_scale` unrolling\nb673135bb833 [Release] Produce bolt tarball\nbe7d7ca11018 [lldb] Use portable format string PRIx64\n17b097b8df69 [runtimes] Set LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default to ON for OS390\nf11ab8353f97 libclc: remove sqrt/rsqrt from clspv SOURCES\n807d43239a5f [VPlan] Use properlyDominates predicate for ordering FOR users.\n161b9d741a3c [mlir] Make the vast majority of integration and runner tests work on Windows\n19b1e27fcd56 [mlir][SPIRVToLLVM] Add pass option to emit opaque-pointers\n009fc4ca3b44 [mlir][LLVM] Verify correct pointer casts with `llvm.bitcast`\n0aaf2e3bc057 [mlir][GPU] add required address space cast when lowering to LLVM\n9d0b596aada6 [mlir][tosa] Fix segmentation fault in case of folding unranked tensor\nf36fe009c0fc [LLDB] Enable 64 bit debug/type offset\n7156d3b1fe80 [libc][bazel] Update math function unit tests' dependency computation.\n2dab5bdf89f6 [flang] Warn on mismatched DATA substring sizes rather than crashing\n9369b7d307be [lld][WebAssembly] Limit size of shared 64-bit memories of 2^^34\n67d78e3c6fe5 [libc] Add a loader utility for AMDHSA architectures for testing\ne5d914672233 [extract_symbols.py] Be more permissive when examining nm output\n8f5d81585aa9 [Clang][LLVM] Enable __arithmetic_fence and fprotect-parens on AArch64\ne96f994f39ad Revert \"[Hexagon] Add release note for LLVM 16\"\n892bf09606b6 [mlir][arith] Allow to specify `constFoldBinaryOp` result type\ndc38cbcc8b89 [mlir][arith] Fold selection over constant vector conditions\nf841c4af5f5e [lldb] Fix image lookup crash\n51a07fc24cb9 [clang] Add test for CWG2396\n7638409d4363 [RISCV] Make vsetvli intrinsics default to MA.\n06d9bf5e64d4 [OpenMP] generate the Windows import library that imports by name rather than ordinal\n96267b6b8840 [mlir] Add Float8E5M2FNUZ and Float8E4M3FNUZ types to MLIR\n7c84f6a43ae3 [flang] Emit portability warning for extension\n8e628f72b00c [mlir] Avoid building some shared libraries when PIC is off\nbf7c42161700 Revert \"Reland \"[lldb][DWARFASTParserClang] Attach linkage name to ctors/dtors if missing\"\"\n8a57748804bd Revert \"[lldb][Test][NFC] TestExternalCtorDtorLookup: add more instantiations to test linkage name is correct\"\n9dd1168fe115 [docs] Speculative link syntax fix\nf1f62ed0c834 [ADT] Add llvm::rotl and llvm::rotr to bit.h\n31c42f8f3588 [libc++][doc] Updates format status page.\n756395f61b90 [clang] fix DR status in cxx_status.html\ndf5beebc98bb [Driver] Add --vfsoverlay flag\n176ee268f8df [flang] Allow for user-defined intrinsic operators (regression)\n39eb1c6145eb [CSSPGO][Preinliner] Set default value of sample-profile-inline-limit-max to 50000.\nb6259eca16f6 [Clang] Export CanPassInRegisters as a type trait\n0c412fed360f [RISCV][docs] Describe status of zicsr and zifencei\nd4021ed3d79d [Tooling/Inclusion] Add symbol mappings for `std::experimental::filesystem`\n6e10e6cb8fab Reland \"[lldb][DWARFASTParserClang] Correctly resolve imported namespaces during expression evaluation\"\n1232b9d47209 [RISCV] Fix -Wbraced-scalar-init warning. NFC\n171ffd499e16 [ORC] StaticLibraryDefinitionGenerator -- support in-memory universal binaries.\n201b2b5674e1 [libc++] Reorganize exception_guard\n1c9e6238fe2f [AMDGPU] Allow architected SGPRs for workgroup IDs\nb35d0a6834f8 [AMDGPU] Add switch to enable architected SGPRs.\n1edb04bc70f3 [extract_symbols.py] Adjust usage of nm again\n4198ff0cb999 [AArch64] Add NZCV Def for TLSDESC_CALLSEQ\nd44b31eca27c [DAGCombine] Allow DAGCombine to remove dead masked stores.\n58d246a27b8c [mlir][spirv] Drop outdated TODO comment\nfc02eeb24fc0 [RISCV] Add vendor-defined XTheadBb (basic bit-manipulation) extension\nb8c2ba138ef6 [NFC] Fix using-declspec.cpp test with non-C++17 compilers\n00a5ae12448e [mlir][bufferization] Better propagation of bufferizesToMemoryWrite through regions\n95526930da6c [flang] Fix new assertion failure\nbbff77a14ef2 Revert \"[libc++] Remove _LIBCPP_CONSTEVAL\"\n04a2baf58f23 [RISCV] Add vendor-defined XTHeadBs (single-bit) extension\n676bca0b6f0d [libc][NFC] Fix typo in header guards\n5a5f3de6ee62 [RISCV] edit document of Zcb to match the Implementation\n2e47aafb02f3 [PowerPC] Fix float materialization patterns.\n6a6c527ee287 [X86][FP16] Combine two steps conversions into direct conversion\n388d679c1dfa Recommit [YAML IO] Check that mapping doesn't contain duplicating keys\nd904ee3d479a [flang] Handle correctly optional intrinsic scalar to unlimited polymorphic optional\n877859a09bda [clang] Handle __declspec() attributes in using\na01edb169bb0 [flang] Fix output type when emboxing intrinsic type to unlimited polymorphic box\ncc4fb5837647 [mlir] support complex type in DenseElementsAttr::get.\ne9eaee9da196 [AArch64] Reassociate sub(x, add(m1, m2)) to sub(sub(x, m1), m2)\naf3c25dc3d87 [VPlan] Fix iterator invalidation in adjustFixedOrderRecurrences.\n580109025801 [libc++] Fix bug in allocate_shared_for_overwrite\n7eec2f2f218c [flang] Avoid infinite recursion in common block check\n87cc95a904e0 [libc++] Implement P2136R3 std::invoke_r\nafe9b0ba87b7 [Test][lldb] Fix YAML mapping keys duplication. NFC.\nd3b0fba6084d Revert rG0b0a38a7a229b70d7261771ba0e702843bd34e97 : \"[X86] combineX86ShufflesRecursively - don't widen shuffle subvector inputs\"\nb838b6287617 [mlir][MemRef][Transform] Don't apply multibuffer on \"useless\" allocs\n5d3c58829d28 [gn] port c4f7cc867299 (CoroTests)\n9f650ae779b4 [Libomptarget] Remove dependency on the DeviceRTL from the GPU plugins\n3c160d3051dc [lldb][Test][NFC] TestExternalCtorDtorLookup: add more instantiations to test linkage name is correct\n9e3010ad992d [AArch64] Fix LSE2/LSE128/RCPC3 precedence\ne698c5950430 [libc++] Granularize <type_traits> includes in <algorithm>\ne3515ba3816b Reapply \"[AMDGPU] Modify adjustInliningThreshold to also consider the cost of passing function arguments through the stack\"\n8b28500f60b7 [mlir][MemRef][TransformOps] Fix error reporting for multibuffer\n4c273cd07115 [DWARFLinker] Refactor cloneAddressAttribute().\n30f515a9101d [libc] Fix LIBC_LOOP_NOUNROLL being a noop\nc4f7cc867299 [Coroutines] Modify CoroFrame materializable into a callback\n3e51af9b5b3a [Coroutines] Improve rematerialization stage\n35106ad1009f [Coroutines] Presubmit test for more coro remats\n8f104a3f9ae2 [ARM] O3-pipeline fix\n5922b886350c [flang] RFC: -fstack-arrays\n2feafd059e9f [flang][hlfir] lower hlfir.sum into fir runtime call\n9facbb694250 [flang] lower sum intrinsic to hlfir.sum operation\n3ad26060e4bc [flang] add hlfir.sum operation\n7c4e45ec7d6d [mlir][SCFToOpenMP] Add pass option to emit LLVM opaque pointers\n4a2d4588a041 [mlir][Vector] add pass option to `convert-vector-to-llvm` to emit opaque pointers\nd5ea1b22cba3 [flang] use mlir::LoopLikeOpInterface::blockIsInLoop\ne6ec76c647aa [LLDB] Apply FixCodeAddress to all forms of address arguments\na9329a96ada3 Adjust #pragma warning so GCC is not unhappy\n5a028cc8ffa5 [mlir][LinAlgTransformOps][NFC] Use emitSilenceableError\n2a58be423963 [HardwareLoops] NewPM support.\nc5e1000b2915 Add build for Windows on Arm in packaging script\nfdd18e866b05 [llvm][TableGen][Jupyter] Show llvm-tblgen not found error in notebook\n24ecd9984235 [NFC] Set C++20 Named Modules for CodeGen in ASTContext in the early place\n19659b5f0dd1 [clangd] Drop includes from disabled PP regions in preamble patch\nfae01d175a29 [clangd] Fix bugs in main-file include patching for stale preambles\nf79a5fb9df42 [Test][SCEV] Add a test where the trip count can't be calculated\n7f249e45eca4 [milr][llvm] Add remaining loop metadata support\nfff762d674c3 Revert \"[CMake] Remove custom ccache CMake logic\"\n240c6f264399 [mlir][llvm] Improve LoadOp and StoreOp import.\n0fad18c44a14 [CMake] Remove custom ccache CMake logic\nae55f1cf9c10 [gn build] Port b7b28c6cfe04\nb7b28c6cfe04 [clang-tidy][libc] Add an inline function checker for the libc project.\n2bc095037eb6 [AMDGPU] Use llvm::bit_cast (NFC)\n92716a42a6aa [llvm-debuginfo-analyzer] LLVM 16.0.0-rc1 Failing test on osx-64.\nb49b429fde3a [llvm] Deprecate PowerOf2Floor and ByteSwap_{16,32,64}\n9c401687eb46 [x86] Move combineAddOrSubToADCOrSBB within the source file (NFC)\ne0e329609858 [X86] Precommit tests for D143838\n64287d69827c Recommit [C++20] [Modules] [ClangScanDeps] Enable to print make-style dependency file within P1689 format (4/4)\n212d905643bd Recommit [C++20] [Modules] [ClangScanDeps] Allow clang-scan-deps to without specified compilation database in P1689 (3/4)\neb70b38f838f Recommit [C++20] [Modules] [ClangScanDeps] Add ClangScanDeps support for C++20 Named Modules in P1689 format (2/4)\n2e4499e749c0 [flang] Handle forward references to modules\nff5c00d4ffc8 [X86][FP16] Add tests to show suboptimal codegen, NFC\n9f8ee610beb1 [flang] Warn on overflow folding DIM()\naa128bb21ee3 [flang] Catch misuse of a procedure designator as an output item\n57751e60e34e [gn build] Port 2a06757a200c\n2a06757a200c [libc++][spaceship] Implement `lexicographical_compare_three_way`\n2e6430666caf [LV] Update recipe builder functions to pass VPlan directly (NFC).\naf03616f46a1 [Flang][OpenMP][NFC] Remove usage of else after return\n15cb5ebed7a4 [Support] Use llvm::popcount (NFC)\nbe2fc577c389 [ORC] Add MachOPlatform::Create overload -- Pass ORC runtime as def generator.\naca9016bcde0 [flang] Fix crash on SELECT RANK\nec116ea684b4 [llvm] Deprecate llvm::count{Leading,Trailing}{Zeros,Ones} and llvm::countPopulation\nbb00fb66ba11 [libc++][NFC] Fix formatting in ranges status page\n594700c12247 [flang] Warn about construct names that are not distinct in the inclusive scope\n129eb5bcab91 [lldb] Add the ability to provide a message to a progress event update\n19c1682b6a4c [X86] combineConcatVectorOps - concatenate 512-bit VPERMILPS nodes.\n6eb66890e473 [X86] Add some basic matrix multiplication test coverage\n10d8b3054a72 [Flang][OpenMP][NFC] Correct a few instances of variable naming\n9f2014269ad8 [AArch64] Regenerate and extend zip1 tests. NFC\nfaf5616e110c BlockFrequencyInfoImpl.cpp - add missing closing namespace comment. NFC\nd38fcb421657 BlockFrequencyInfoImpl.h - use auto* for pointer types. NFC.\n51007cfa456f BlockFrequency.h - add missing closing namespace comment. NFC\nfe655717bff1 [flang] Support polymorphic inputs for the TRANSPOSE intrinsic\n1bb95a3a99cb [X86] combinePredicateReduction - attempt to fold subvector all_of(icmp_eq()) / any_of(icmp_ne()) to integers\n8bb98b571547 [Clang] Add the list of approved (Issaquah) C++ papers to the status page\n738370ae0e7f DemandedBits.cpp - use auto* when initializing from cast<>. NFC.\n41328d7c0e6e RegisterPressure.h - consistently initialize all pointer fields. NFC.\n1300a4fdae35 Revert rG23cb32c6d5bda0919cc1ef129917ceb2dbf1b1b8 \"[X86] combineX86ShufflesRecursively - treat ISD::TRUNCATE as faux shuffle\"\n7717e1114ad3 Revert \"[AArch64] Reassociate sub(x, add(m1, m2)) to sub(sub(x, m1), m2)\"\nf48f17871792 [InstCombine] canonicalize cmp+select as smin/smax\n14411adc3dce [InstCombine] add tests for disguised smin/smax; NFC\nc697119dafce [bazel][libc] Add a few more missing dependency that show up when parsing headers\nbb5f79158b71 llvm-tblgen: Apply IWYU in some files\n2d570bab4f99 CodeGenTarget.cpp: Reformat.\n0e18b5feaaba LLVMFuzzerCLI: [CMake] Prune the last PARTIAL_SOURCES_INTENDED to cover all sources.\n36adb82c251d LLVMProcessSources.cmake: Improve PARTIAL_SOURCES_INTENDED.\n19128792e2aa Reland \"[lldb][DWARFASTParserClang] Attach linkage name to ctors/dtors if missing\"\nfebe740b2c8f [test] Remove occurences of br undef in Transform/Util tests [NFC]\n069dd8768a6a Revert \"[C++20] [Modules] [ClangScanDeps] Add ClangScanDeps support for C++20 Named Modules in P1689 format (2/4)\"\nf8b5003cb3f9 Revert \"[C++20] [Modules] [ClangScanDeps] Allow clang-scan-deps to without specified compilation database in P1689 (3/4)\"\n502e357dc77c Revert \"[ClangScanDeps] Add UNSUPPORTED: system-windows to test P1689.cppm\"\n08f31b8fa85c [docs] Make consistent between MLIR tutorial doc and example code\nc9a7b92a23bb [AArch64] Consider tiny code model in emitLoadFromConstantPool.\n6a75aec09098 [Clang][perf-training] Remove trailing whitespace in perf-helper\ndf3b703a4c17 [AArch64] Use llvm::countr_{zero,one} (NFC)\n6d90c590b7f5 [JITLink] Don't initialize local ArrayRefs with initializer lists.\nc8ad1de4f068 [RISCV] Remove dead code from RISCVDAGToDAGISel::selectVSETVLI. NFC\n4afb1ee7bc0e Specify target triple for bb-prefix-dump.ll\n86cbf3d5f8a2 [JITLink] Add explicit conversion to silence warnings / errors on bots.\n01d68b13f52d [libcxx][ranges] mark new join view tests unsupported without experimental flag\n7e772e12d10e [RISCV] Fix mistake in comment. NFC\n10b5fec25638 [JITLink][ORC] Add LinkGraph::allocateCString method.\na38a4654ce4b [libc++] fix `shared_ptr`'s incorrect constraints\n23cb32c6d5bd [X86] combineX86ShufflesRecursively - treat ISD::TRUNCATE as faux shuffle\nd05f889535ab [libc++] Enable radability-identifier-naming for local variables and fix any problems\ncc236b64d11d [gn build] Port 3d4e9d5eb0f7\n9eccc6cce07b [JITLink] Add a predicate to test for C-string blocks.\n3d4e9d5eb0f7 [ORC] Move ORC-specific object format details into OrcShared.\nf00d101b8e32 llvm/utils/TableGen/CodeGenIntrinsics.h: Fix a comment line (since 2006!)\nda876a157d79 [libc++][NFC] Reorganize the std::pair constructor tests to be more consistently named\n2e08e431cc18 LLVMTableGenGlobalISel: Provide `INTERFACE_INCLUDE_DIRECTORIES`\n4537bda929bd [libc++][NFC] Change some std::pair tests from .compile.fail.cpp to .verify.cpp\naaef3b82f4f0 [libc++] Remove _LIBCPP_CONSTEVAL\ne3eb61a8cd61 [libc++][NFC] Fix leftover #endif comments\nb48880f39f96 [libc++][NFC] Use using instead of typedef in pair.h\nab17e1b76cf7 [libc++][NFC] Always define __non_trivially_copyable_base in pair.h\na98936d5a698 [libc++][NFC] Use std:: instead of _VSTD:: in pair.h\n9994340a49ba [libc++][NFC] Use >= 23 instead of > 20 in pair.h\n1d6117c8c4d2 [libc++][NFC] Use std:: instead of _VSTD:: in construct_at.h\nf543614ce641 [libc] Update dependency for __support_fputil_nearest_integer in bazel overlay.\n4c2ad195f8c9 [libc++][ranges] move all range iterators back in class\n3b059cd25b8c [libcxx][ranges] revert join_view::iterator and sentinel to be in-class\nc586b81347cb [X86][Win64] Precommit test for D143812\na55b35dbee6d [X86] combineVectorInsert - pull out Vec/Scl/Idx operands. NFC.\n0b0a38a7a229 [X86] combineX86ShufflesRecursively - don't widen shuffle subvector inputs\n5dc34eb379f4 Reland \"[mlir][func] Use the generated pass options in func to llvm.\"\n5ba396011377 [MLGO] Disable BB Profile Dump Test on NVPTX\n09e0f48c0a40 [MLGO] Enable BB Profile Dump Test without TFLite\n39da46826da8 Revert \"[mlir][func] Use the generated pass options in func to llvm.\"\n771d9c05afc2 [mlir][func] Use the generated pass options in func to llvm.\n19c42f672f94 [DFAPacketizer] Move DefaultVLIWScheduler class declaration to header file\n5fc73b7502fb [clang] Add test for CWG1111\n22fb66eb94b6 [clang][NFC] Add another example to CWG952 test\n89ba737bcf34 [clang] Mark CWG2165 as N/A\n5eaaf8f18093 Revert \"[clang] Mark CWG2165 as N/A\"\nd0e24f0c97ec [clang] Mark CWG2165 as N/A\n4663d784ddee [libc] Update macros/optimization.h build dependency for CMake and Bazel.\na630b8eefb41 [libc][Obvious] Fix static method declarations for FEnv class on macOS.\ne9e43e31d3bd [libc] Fix the regex detecting architecture triplet for macOS.\nd8e9a1a12557 [CMake] Use `LLVM_ENABLE_ASSERTIONS` to enable assertions in `libc++`\n29fa21eb6129 [lldb] Fix passing None as an env variable in TestMultipleDebuggers\n294ca122956f Adapt TestCustomShell and TestMultipleDebuggers to run under ASAN\n0ac8dfd0587a [lldb] Add an SB API to get progress events as SBStructuredData\ndc6427d687c4 [mlir][sparse] implement lowering rules for sparse_tensor::unpack\n6dbca86d838c [mlir][sparse] introduce sparse_tensor::unpack operation\ne74bb3471fc4 [libc++] Remove unused std::function test\ne7ade78a8ceb [dfsan] Fix some build-libc-list.py lint issues\n9db037d542d9 [mlir][sparse] fixed pack op documentation and purity\ndac423bd5718 [SanitizerBinaryMetadata] Fix ignorelist test with -Assert\ne8a79dc3d8eb [flang] Do not print backtrace for most TODOs.\nd2cc2c5610ff Revert \"[lldb][DWARFASTParserClang] Attach linkage name to ctors/dtors if missing\"\nc46e15e1dec9 Revert \"[lldb][Test] TestExternalCtorDtorLookup.py: skip on Windows and dwo\"\n2979070f1b3a [libc++] Simplify non_default_alloc\n043550e33509 [Driver] Stop stack use after free\n9e57a5739d8b [bazel] Fix {clang,llvm}/unittests\n0751fc68b976 [libunwind] On Darwin, add a callback-based lookup scheme for JIT'd unwind info.\n89197b59f597 [openmp] Fix building z_Linux_asm.S for armv5t\n3de0bc4c3d02 [MLIR] Reintroduce shared attribute names in the LLVM dialect\ndb89896bbbd2 [InstCombine] Add tests for D143766. NFC\n811d11b064f7 [AMDGPU] Add GFX11 HW_REG_PERF_SNAPSHOT_*\na2dcd994a7f8 [mlir][tosa] Add TOSA f64 type support for cast op\ncd4ca2d7f991 [mlir] Port Conversion Passes to LLVM to use TableGen generated constructors and options\n3e57aa304f15 [llvm-driver] Reinvoke clang as described by llvm driver extra args\n1f173a0653e7 [llvm-driver] Pass extra arguments to tools\n34653a0a8a40 [Propeller] Change SHT_LLVM_BB_ADDR_MAP version to 2.\n8e13ec9eca1f [libc++] In tests, use `abort` to terminate upon an error.\n7ca3444fba73 AMDGPU: Use module flag to get code object version at IR level folow-up\n70acb3aab3a1 A slightly more concise AST dump :)\n83e84cdbe4bc [InstCombine] precommit tests for D143593\n81d0d2b2a068 [mlir][sparse] Sparse reduction in lex order no longer produces dense output\nae2d8b49713d [libc][math] Update exceptional cases for logf, log10f, log2f, log1pf.\n35188e02d1f2 [dfsan] Fix build-libc-list.py for Python 3 after D143701\na543d840ee0a Fix handling of -> calls for modernize-use-emplace\nf889d6f9d05b [lldb][Test] TestExternalCtorDtorLookup.py: skip on Windows and dwo\nc8b8d6baddf9 [Passes] Remove some legacy passes\n3a66446a9a0d [libc] add standalone strtoint/float fuzzers\n79a3803bb2cc [ClangScanDeps] Add UNSUPPORTED: system-windows to test P1689.cppm\ne7e577f68421 [clang-tidy] Clarify documention of `bugprone-unchecked-optional-access`.\n295f5fafcb55 [Assignment Tracking] Fix migrateDebuginfo in SROA\nc52255d26a23 [AArch64] Reassociate sub(x, add(m1, m2)) to sub(sub(x, m1), m2)\nd37a31cf237c [X86] Attempt to fix ubsan failure.\n185dbf9d6f00 [bazel] Port 81a79ee446\n1763c632544d [Attributor][NFCI] Use a set to track dependences\n86cce90e21c5 [Attributor][NFCI] Avoid AAIntraFnReachability updates if possible\na9557aacd1a9 [Attributor][NFCI] Use queries without exclusion set whenever possible\n294db31be748 [Attributor][FIX] Ensure we use the right set comparison\n76a19190269b [Attributor][NFC] Avoid unnecessary string operations\nbf9964fb138f [Attributor][NFCI] Create a AAIsDead for the function eagerly\n8bc0bee2f8ca [Attributor][NFCI] Avoid a temporary vector and exit early\n91e38bc76010 [libc++][NFC] Reorganize hash.h\nb296ddd91cb8 [lldb][DWARFASTParserClang] Attach linkage name to ctors/dtors if missing\nb8ef007fca1d Reland \"[llvm][dsymutil] Add DW_TAG_imported_declaration to accelerator table\"\n9497680067cc [ConstraintElim] Update getLastConstraint to return to last row. (NFC)\nff8742df9e65 [flang] Fixed selective TargetRewrite.\n81767f52f493 [mlir][OpenMP] Add support for using Opaque Pointers in the OpenMP Dialect\n2ca46421f85a [mlir][Async] Add option to LLVM lowering to use opaque pointers\n7da2d644e039 [clang] [extract-api] Don't crash for category in libclang APIs\n57606bb35619 [ConstraintElim] Improve debug test to show removed constraints (NFC).\n81a79ee446fe [mlir] Add function for checking if a block is inside a loop\naf39acda8873 [VectorCombine] fix insertion point of shuffles\n78f13ea093af [extract_symbols.py] Adjust how the output of nm is interpreted\na00f17d81efb [clang][dataflow] Convert nonnull pointer parameter to a reference.\nb87e53ee2ad1 Revert \"[mlgo] Fix test after D143624\"\n737e1cd161f3 [libc] Move likely/unlikely to the optimization header\n78056e2f2d95 [InstCombine] propagate FMF in exp2->ldexp fold\n3abea2b5447c [InstCombine] copy tail markings in exp2->ldexp fold\ne89180801cd2 [InstCombine] add 'tail' to exp2 call in test; NFC\n86bfeb906e3a Revert \"Inlining: Run the legacy AlwaysInliner before the regular inliner.\"\nc4a250ecea14 [AMDGPU][MC] Generate relative relocations for allocatable (more particularly, eh_frame) sections\nf1837c707478 [DebugInfo] Handle missed DW_FORM_addrx3 and DW_FORM_strx3 cases\n04f4c4cc59db [clangd] Move function body to out-of-line: unnamed class method incorrect moving\nfef08da4b75f [mlir][llvm] Store memory op metadata using op attributes.\n067a5c68845c [amdgpu-arch] Fix build of amdgpu-arch with CLANG_LINK_CLANG_DYLIB\nb252824e6e6e [clangd] fix wrong CalleeArgInfo in the hover\n08061a5f1db6 [gn build] Port 6470706bc0ed\na3060f0f37e3 [X86] combineConcatVectorOps - concatenate AVX512 vselect nodes. NFC.\n4a96893fc5ca [libc] Fix exp2f and prevent misuse of likely/unlikely\n065a8cf00812 [gn] port 6470706bc0e\n25d0f3c4d0d9 [Assignment Tracking] Fix fragment index error in getDerefOffsetInBytes\n4d7c879d33a2 [mlir][llvm] Adapt loop metadata to match llvm\n8470430107d0 [NFC][compiler-rt] Shorten comment\n1e658ad1728e [Workflow] Add Release Repo sync script\n8ccde9368f94 [CMake][compiler-rt] Support clang-cl in CompilerRTMockLLVMCMakeConfig\nb3477f579c86 [RISCV] Add tests for .attribute stack_align\n9dcd7195a21c [InstCombine] avoid crashing in pow->ldexp\n5cec69bb43bc [clang] Update Clang version from 16 to 17 in scan-build.1.\n62a0a1b9eea7 [InstCombine] avoid crashing in exp2->ldexp\nc2b7085d5c86 [InstCombine] add test for exp2->ldexp; NFC\n55c0719557a9 [InstCombine] auto-generate check lines in test file; NFC\nc4ce967e3437 ARM: skip debug instructions when matching jump-table patterns.\ndc700f1e4daf [mlir][bufferization] Restrict function boundary buffer. to func.call.\n1842b5885baa [bazel] Fix build and make all target respect layering_check\nd624b9217d35 [RISCV] Add precommit tests for D143646\nf0f8ae7596c4 [AMDGPU][AsmParser] Fix matching immediate literals.\n68adc028b42d [InstCombine][NFC] regenerate tests for simple_phi_condition.ll\nce2514a6dea7 [Test] Add complementary tests for OR analogous for those for AND\n393675dad0c0 [Test] Add test showing an opportunity to transform checks and hoist invariants\nbb8bd8c232e8 [SanitizerBinaryMetadata] Fix ignorelist test under Windows\nbaca3c150733 Move SIMD alignment calculation to LLVM Frontend\nc77c186a647b [LVI] Don't traverse uses when calculating range at use\n0737770c3e1d [LVI][CVP] Add test for miscompilation by CVP due to incorrect range returned by LVI\nd768bf994f50 [NFC][TargetParser] Replace uses of llvm/Support/Host.h\n4ad8f7a18957 [Assignment Tracking][mem2reg] Remove overly defensive assert\nbb059e85d61b [Assignment Tracking][SROA] Delete dbg.assigns linked to rewritten stores\n65f9719913ec Revert \"[C++20] [Modules] [ClangScanDeps] Enable to print make-style dependency file within P1689 format (4/4)\"\na674a12dd57e [WebAssembly] Additional patterns for pmin/pax\n9ec06f40d66e [flang][NFC] Clean up polymorphic-temp.f90\n421215b919d0 [SanitizerBinaryMetadata] Support ignore list\nc340956e4efc [NFC][Assignment Tracking] Remove lifetime intrinsics from some tests\nfaf029d9728f [Test][SCEV] Add tests where multiple assumes can be used to improve trip multiple\n09c52a49402c [bazel] Add missing dependency after 687f78210d0\n57edc61093d9 [NFC] convert compiler-rt/lib/dfsan/scripts/build-libc-list.py to python3 syntax\nb67b26acc2ab [libc][Obvious] Include MPFRWrapper and testutils only if tests are enabled.\n6eb13809fb6f [bazel] fix build for 6470706bc0ed\n14dedd9cf596 [Reland][LSR] Hoist IVInc to loop header if its all uses are in the loop header\nd9283e79d826 [libc] Run libc tests unconditionally, even if there are no source changes.\n2441c0730603 [mlir][bufferization] Support multiple leaves in EmptyTensorElimination\nf4ef08433fe7 [OPENMP][NFC] added loop bind to the support page\n79d2c26f89e1 [SimplifyIndVar][NFC] Refactor Binary Operator's flag strengthening\n288f688e294a [NFC] Add test to show that preprocess an import decl won't require to load it actually\n687f78210d07 [MLIR] Fold away divs and mods in affine ops with operand info\ndd380f9243de [NFC] Remove the unused parameter introduced in e135476\n92e904b9ce2d [flang][hlfir] Ramp-up support of implicit interface mismatches\nfc2c791e89cd [mlir][llvm] Fix TBAA verfication crash\n70924673af68 [RFC][GISel] Add a way to ignore COPY instructions in InstructionSelector\nd9a6fc82f56f [AMDGPU] Run unmerge …",
        "tree": {
          "url": "https://api.github.com/repos/mocusez/mlir-learn/git/trees/6673480f178c18dcc743b1f61183a8eead4724a8",
          "sha": "6673480f178c18dcc743b1f61183a8eead4724a8"
        },
        "comment_count": 0
      },
      "author": {
        "login": "Lewuathe",
        "id": 1713047,
        "node_id": "MDQ6VXNlcjE3MTMwNDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1713047?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lewuathe",
        "html_url": "https://github.com/Lewuathe",
        "followers_url": "https://api.github.com/users/Lewuathe/followers",
        "following_url": "https://api.github.com/users/Lewuathe/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lewuathe/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lewuathe/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lewuathe/subscriptions",
        "organizations_url": "https://api.github.com/users/Lewuathe/orgs",
        "repos_url": "https://api.github.com/users/Lewuathe/repos",
        "events_url": "https://api.github.com/users/Lewuathe/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lewuathe/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "Lewuathe",
        "id": 1713047,
        "node_id": "MDQ6VXNlcjE3MTMwNDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1713047?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lewuathe",
        "html_url": "https://github.com/Lewuathe",
        "followers_url": "https://api.github.com/users/Lewuathe/followers",
        "following_url": "https://api.github.com/users/Lewuathe/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lewuathe/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lewuathe/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lewuathe/subscriptions",
        "organizations_url": "https://api.github.com/users/Lewuathe/orgs",
        "repos_url": "https://api.github.com/users/Lewuathe/repos",
        "events_url": "https://api.github.com/users/Lewuathe/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lewuathe/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/mocusez/mlir-learn/commits/59575d47b7b987c0f248b164547278a82ed0b456",
          "html_url": "https://github.com/mocusez/mlir-learn/commit/59575d47b7b987c0f248b164547278a82ed0b456",
          "sha": "59575d47b7b987c0f248b164547278a82ed0b456"
        }
      ],
      "repository": {
        "id": 911442056,
        "node_id": "R_kgDONlOAiA",
        "name": "mlir-learn",
        "full_name": "mocusez/mlir-learn",
        "private": false,
        "owner": {
          "login": "mocusez",
          "id": 57286919,
          "node_id": "MDQ6VXNlcjU3Mjg2OTE5",
          "avatar_url": "https://avatars.githubusercontent.com/u/57286919?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mocusez",
          "html_url": "https://github.com/mocusez",
          "followers_url": "https://api.github.com/users/mocusez/followers",
          "following_url": "https://api.github.com/users/mocusez/following{/other_user}",
          "gists_url": "https://api.github.com/users/mocusez/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/mocusez/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/mocusez/subscriptions",
          "organizations_url": "https://api.github.com/users/mocusez/orgs",
          "repos_url": "https://api.github.com/users/mocusez/repos",
          "events_url": "https://api.github.com/users/mocusez/events{/privacy}",
          "received_events_url": "https://api.github.com/users/mocusez/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/mocusez/mlir-learn",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/mocusez/mlir-learn",
        "forks_url": "https://api.github.com/repos/mocusez/mlir-learn/forks",
        "keys_url": "https://api.github.com/repos/mocusez/mlir-learn/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/mocusez/mlir-learn/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/mocusez/mlir-learn/teams",
        "hooks_url": "https://api.github.com/repos/mocusez/mlir-learn/hooks",
        "issue_events_url": "https://api.github.com/repos/mocusez/mlir-learn/issues/events{/number}",
        "events_url": "https://api.github.com/repos/mocusez/mlir-learn/events",
        "assignees_url": "https://api.github.com/repos/mocusez/mlir-learn/assignees{/user}",
        "branches_url": "https://api.github.com/repos/mocusez/mlir-learn/branches{/branch}",
        "tags_url": "https://api.github.com/repos/mocusez/mlir-learn/tags",
        "blobs_url": "https://api.github.com/repos/mocusez/mlir-learn/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/mocusez/mlir-learn/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/mocusez/mlir-learn/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/mocusez/mlir-learn/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/mocusez/mlir-learn/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/mocusez/mlir-learn/languages",
        "stargazers_url": "https://api.github.com/repos/mocusez/mlir-learn/stargazers",
        "contributors_url": "https://api.github.com/repos/mocusez/mlir-learn/contributors",
        "subscribers_url": "https://api.github.com/repos/mocusez/mlir-learn/subscribers",
        "subscription_url": "https://api.github.com/repos/mocusez/mlir-learn/subscription",
        "commits_url": "https://api.github.com/repos/mocusez/mlir-learn/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/mocusez/mlir-learn/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/mocusez/mlir-learn/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/mocusez/mlir-learn/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/mocusez/mlir-learn/contents/{+path}",
        "compare_url": "https://api.github.com/repos/mocusez/mlir-learn/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/mocusez/mlir-learn/merges",
        "archive_url": "https://api.github.com/repos/mocusez/mlir-learn/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/mocusez/mlir-learn/downloads",
        "issues_url": "https://api.github.com/repos/mocusez/mlir-learn/issues{/number}",
        "pulls_url": "https://api.github.com/repos/mocusez/mlir-learn/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/mocusez/mlir-learn/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/mocusez/mlir-learn/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/mocusez/mlir-learn/labels{/name}",
        "releases_url": "https://api.github.com/repos/mocusez/mlir-learn/releases{/id}",
        "deployments_url": "https://api.github.com/repos/mocusez/mlir-learn/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/Jahnav4977/mlir-mx/commits/5f63028555f11989b78d61371cb851f56e9779f3",
      "sha": "5f63028555f11989b78d61371cb851f56e9779f3",
      "node_id": "MDY6Q29tbWl0ODMzNDM1NzM2OjVmNjMwMjg1NTVmMTE5ODliNzhkNjEzNzFjYjg1MWY1NmU5Nzc5ZjM=",
      "html_url": "https://github.com/Jahnav4977/mlir-mx/commit/5f63028555f11989b78d61371cb851f56e9779f3",
      "comments_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/commits/5f63028555f11989b78d61371cb851f56e9779f3/comments",
      "commit": {
        "url": "https://api.github.com/repos/Jahnav4977/mlir-mx/git/commits/5f63028555f11989b78d61371cb851f56e9779f3",
        "author": {
          "date": "2023-02-18T10:57:51.000+09:00",
          "name": "Kai Sasaki",
          "email": "lewuathe@gmail.com"
        },
        "committer": {
          "date": "2023-02-18T10:57:51.000+09:00",
          "name": "Kai Sasaki",
          "email": "lewuathe@gmail.com"
        },
        "message": "Squashed 'thirdparty/llvm-project/' changes from 23c1822d1a74..63c77bf71d80\n\n63c77bf71d80 [lldb] Make persisting result variables configurable\n920b46e108b2 [lldb] Add expression command options in dwim-print\ne49b93ef29a6 [gn build] Port 07e3ca238e68\n07e3ca238e68 Revert \"[TextAPI] Implement TBDv5 Reader\"\n4be17641b05d [TextAPI] wrap returned Errors in std::move\n347954314c97 [gn build] Port b861b1225380\nb861b1225380 [TextAPI] Implement TBDv5 Reader\nb309bc04eebc [GlobalISel] Combine out-of-range shifts to undef.\nd6d59e660bc7 [Clang] Fix __VA_OPT__ implementation so that it treats the concatenation of a non-placemaker token and placemaker token as a non-placemaker token\n34aff47521c3 [RISCV] Use MCSubtargetInfo::hasFeature where possible. NFC\nd9e4c1044072 [AArch64] Simplify with MCSubtargetInfo::hasFeature. NFC\nc0f3ac1d0015 Revert \"[Fuchsia] Enable llvm-driver build\"\nb1e09b5fa679 [libc++][NFC] Remove TODOs that are already done\n8007bcc13f8f [llvm-cov] Create syntax to pass source w/o binary.\n4eadd19cc423 [Fuchsia] Enable llvm-driver build\nef3a3b0726f4 [libc++][NFC] Replace _VSTD and _LIBCPP_INLINE_VISIBILITY in <__atomic/*>\n10b7cd660c73 [RISCV] Select signed and unsigned bitfield extracts for XTHeadBb\n2f88c07cf820 [lldb] StructuredData should not truncate uint64_t values\n8caa8d95afe4 [libc++][format] Addresses LWG3810.\n01afb3fb9902 [NVPTX] Use by default 'sm_60' architecture when expanding %ptxas-verify macro.\nf50cad2c55df [libc++] Mark a test relying on `typeid` as unsupported without RTTI.\nf6b724f1f9c8 [libc] Add basic fuzz target for the printf parser\n47fb6d1c65ec [libc] add mock arg list\n5fa9933c13e7 [mlir][tensor] Do not use affine ops on non-perfect-tiling unpack cases.\n2b2b8409e684 [RISCV] For rv32, accept constants like 0xfffff800 as a valid simm12.\nefe7c4b77bed Revert \"[RISCV] Add performMULcombine to perform strength-reduction\"\n16a66af0a0fe Revert \"[RISCV] Add vendor-defined XTheadMemPair (two-GPR Memory Operations) extension\"\n6774ba841145 [RISCV] xtheadmac: fix commutativity issue for the in/out register\n20cc23c708f0 [RISCV] Add performMULcombine to perform strength-reduction\nd2918544a7fc [RISCV] Add vendor-defined XTheadMemPair (two-GPR Memory Operations) extension\n21a543656cf4 [libc++] Add missing include in <__atomic/cxx_atomic_impl.h>\ndf56b55e1288 [RISCV][CodeGen] Add codegen patterns for experimental zfa extension (try 2)\n04d59f2ab3a8 [IR] Fix a warning\nf25cfd339a80 [mlir] Reintroduce API for creating operations with a DictionaryAttr\nbe83a4b257c8 [ADT] Fix tests for `StringMap::at` and `DenseMap::at`\n42944abf8583 [RISCV] Improve isInterleaveShuffle to handle interleaving the high half and low half of the same source.\nbc6e10c9efca [ELF][llvm-objcopy] Reject duplicate SHT_SYMTAB sections\n998ad085e865 Reland [gn build] Support linux/win compiler-rt cross compilation\n7a035de2d6c4 Revert \"[gn build] Support linux/win compiler-rt cross compilation\"\n2d85683f987a [lib++][format] Uses the new exception test macros.\nc0947dc44109 [RISCV][MC] Add support for experimental zfa extension (FLI instruction not included) (try 3)\nd73eb92cc673 [gn build] Support linux/win compiler-rt cross compilation\ncf86855c4453 [M68k] fix test regression introduced by D140180\n261d21f8c375 [libc++] Fixes a flaky test.\nc8399811e7b1 [gn build] Support building x86/64 Android libraries\n1ceb79e2e075 Port PlaceSafepoints pass to the new pass manager\n4180b29d206f [flang][runtime] Support DT edit descriptor in result of READ(SIZE=)\n7067aee367d4 [libc++][CI] Switches to clang-format-16.\nf7f86451ecd7 [libc++] Improve the format ignorelist generation.\n22b564c64b73 [RISCV] Add preferred function and loop alignment RISCVSubtarget. NFC\nb22aa3d74f27 [libc++][NFC] Rename _LIBCPP_NO_EXCEPTIONS to _LIBCPP_HAS_NO_EXCEPTIONS\n132003603ae3 [ADT] Add `at` method (assertive lookup) to DenseMap and StringMap\n2b51c8cd2ac6 [clang-tidy] Clarify bugprone-branch-clone diagnostic message\ndf82394e7a2d [libc][bazel] Export .bzl files for libc/test and libc/test/src/math.\n3476b56f0c78 [libc++][test] Adds more generic test macros.\n783cbf70abca [gn build] Port bf0f94a5cf82\nddeb55ab3359 [mlir] add option to multi-buffering\n4ecc6af813e2 [InstCombine] create a pass options container and add \"use-loop-info\" argument\ne03d254bbd54 [SLP]Do not reduce repeated values, use scalar red ops instead.\nbf0f94a5cf82 New SetOperations and unittesting for all SetOperations\n17a90f1196c1 Tighten up a modules test\n87a0479538fe [mlir][llvm] Fuse access_group & loop export (NFC)\ncf4df6168838 [SVE] Add intrinsics for floating-point operations that explicitly undefine the result for inactive lanes.\n83e9ef7e519a [mlir][standalone] Extend sample with custom type\naf6c0b6d8c9d [clang][CodeGen] Use base subobject type layout for potentially-overlapping fields\n4bf6cc63aa77 GH60642: Fix ICE when checking a lambda defined in a concept definition\n06621ecdaf41 [Clang] Convert some tests to opaque pointers (NFC)\nf098fb69f164 [Clang] Convert some tests to opaque pointers (NFC)\n4901245481b6 Fix Clang sphinx build\n6f3a756998b3 [RISCV][NFC] Add missing immediate operand types.\ne133cb9c6daf [mlir][llvm] Add DINamespace attribute\n276358fd3af5 [mlir][llvm] Make DI param optional to match LLVM\n76c638d1ddec [gn build] Port 46db8d822ecd\n46db8d822ecd [libc++] Granularize <atomic>\n62e4f81c6793 [AMDGPU] Simplify widenScalar condition for BigTy for G_(UN)MERGE_VALUES\nf3fa1086c7f8 [Clang] Convert some tests to opaque pointers (NFC)\nafcf70aa6de7 [analyzer] Remove unjustified assert from EquivalenceClass::simplify\n40a20ae6ab80 [libc++] Granularize <bit> includes\n2693efa8a5bc [MachineCombiner] Support local strategy for traces\ne6e0ba8d20b4 [Clang] Convert some tests to opaque pointers (NFC)\ncdf8f064694c [mlir] Add a folder for lbs, ubs, steps of scf.forall.\neb14186771e7 Revert \"[LLD] [COFF] Don't try to detect MSVC installations in mingw mode\"\nbf91cd6ea9d6 [mlir][llvm] Verify LLVM module before import\nda3623de2411 [JT] Always create BPI/BFI when running in legacy PM\n159073bc0a87 [clang-repl] Support compound statement as a top-level statement.\neb2f946e780c [mlir][scf] Rename ForeachThreadOp->ForallOp, PerformConcurrentlyOp->InParallelOp.\n65898e526060 [ConstantRange] Handle `Intrinsic::ctlz`\na1e80c69223a [Support] [Windows] Don't check file access time in equivalent(file_status, file_status)\n389bfbd66d6f [LLD] [COFF] Don't try to detect MSVC installations in mingw mode\n3d84f4268dd9 [Clang] Convert some tests to opaque pointers (NFC)\n6f4af64b7422 [mlir][llvm] Add atomic support to the LoadOp.\n55a18bfe9b65 [Clang] Convert some tests to opaque pointers (NFC)\n58dada5f0aad [AMDGPU] Add cross-project-tests for WMMA builtins\na048d7394be5 [MLIR][LLVM] Only disallow inlining for selected function attributes.\n57c81917d3a5 [Clang] Convert update_cc_test_checks tests to opaque pointers (NFC)\na96cbeb45062 [DAGCombiner] Teach MatchContextClass classes to use TargetLowering::isOperationLegalOrCustom().\n310deca248c8 [mlir] Add loop bounds to scf.foreach_thread.\n6d5ea6b12342 Revert \"[Coroutines] Stop supportting std::experimental::coroutine_traits\"\nc4e6e771f255 [Coroutines] Stop supportting std::experimental::coroutine_traits\nf2404a58b0b4 [NDF] Revert earlier nfc commit to test commit access\n511d55060454 [NFC] Testing new commit access by adding newline\ne0528382b570 [lldb] Add missing decorators import in TestPoPersistentResult.py\n5552c4ddd76d [lldb] Limit TestPoPersistentResult to darwin\n3328ee550c86 [lldb] Suppress persistent result when running po\nb3215c810617 [lldb] Rename SetResultIsInternal to SetSuppressPersistentResult (NFC)\n39811e2e537d [llvm][test] enable/disable -verify-machineinstrs where possible for callbr\nb05dc1b8766a [clang-format] Add a space between an overloaded operator and '>'\n7c9df7743521 [ADT] Provide C++20-style bit functions\n93de5f13b9dd [CodeGen] Fix warnings\n0eabb884abeb [mlir][gpu] NFC let user pick the threadID values when distributing foreach_thread\ne3a88a41af83 Revert \"[mlir][vector] Prevent duplicating operations during vector distribute\"\ncda4a0e918b5 [Sema] Relax a failing assertion in TransformBlockExpr\n25a461046ec2 OpenMP: Regenerate test checks\n77af16bcb78a Recommit \"Remove incorrect comment around `truncateAVX512SetCCNoBWI`; NFC\" (2nd Try)\n9e9444ca7d4b Recommit \"Transform vector SET{LE/ULT/ULE} -> SETLT and SET{GE/UGT/UGE} -> SETGT if possible\" (2nd Try)\nffe982f96bff [lldb] Stop generating swig bindings for SBLaunchInfo copy constructor\n8045ba89488c [ThinLTO/WPD] Handle function alias in vtable correctly\n54186d33c3a0 [clang] add __has_extension(gnu_asm_goto_with_outputs_full)\naf6656338db3 [clang] fix -Wuninitialized for asm goto outputs on indirect edges.\n329ef60f3e21 [Clang] support for outputs along indirect edges of asm goto\nb1bc723dfe97 [Clang] refactor CodeGenFunction::EmitAsmStmt NFC\na3a84c9e2511 [llvm] add CallBrPrepare pass to pipelines\n5cc1016a57b3 [llvm][SelectionDAGBuilder] codegen callbr.landingpad intrinsic\n28d45c843cd0 [llvm][CallBrPrepare] use SSAUpdater to use intrinsic value\n094190c2f529 [llvm][CallBrPrepare] add llvm.callbr.landingpad intrinsic\n0a39af0eb72d [llvm][CallBrPrepare] split critical edges\nfb471158aa0d [llvm] boilerplate for new callbrprepare codegen IR pass\n45a291b5f609 [Dominators] check indirect branches of callbr\ndf277ec67efd [X86][MC] Fix the bug of -output-asm-variant=1 for intel syntax\n7495a2e51bff [Attributor][FIX] Ensure we adjust types properly\n58bedaed0fea [LLDB] Remove unused variable 'lang_rt' in ClangExpressionParser.cpp (NFC)\n2738dc0bd3b7 [ComplexLogicCombine] Precommit tests for complex logic combine init patch; NFC\n8116fc592c5e Revert \"[LLDB] Enable 64 bit debug/type offset\"\nf253bb640d97 [WebAssembly] Fix simd bit shift intrinsics codegen\ne073de833671 [WebAssembly] Update wasm.c with update_cc_test_checks.py. NFC\ne6758c81f867 [mlir][sparse] comment out test cases in sparse_conversion with similiar behavior.\n65277494f04d [flang][runtime] Allow record advancement in child I/O via '/' control edit descriptor\n52a774fd4c18 [PowerPC] remove XXSWAPD after load from CP which is a splat value\nfb7c38073e80 [AArch64][ISel] Always use pre-inc/post-inc addressing mode for auto-indexed load/store with constant offset.\n0af5f84a13be [mlir][sparse] split reshape.mlir into expand/collapse_shape.mlir.\n22cdeb54a123 [MLIR][OpenMP] Add Conversion for Atomic Update Op\nb374423304a8 [Pipeline] Move ControlHeightReduction to module optimization pipeline\n9e8d9316ceaf [mlir][sparse] allow foreach operation to generate out-of-order loop on non-annotated tensor.\n2062e90aa531 [LLDB] Enable 64 bit debug/type offset\nb66fdbad44b3 [gn build] Manually port D143983\n956c7dca29c7 [Object][NFC] Remove unneeded llvm_unreachable\n56e41fcf5028 [PowerPC] Bail out of FISel when lowering long calls\nc2e248c6aea6 [mlir][sparse] Remove the expansion of symmetric MTX in the sparse tensor storage.\n5172877bbddc [Libomptarget] Check errors when synchronizing the async queue\n48c8e1602048 Revert \"[Libomptarget] Check errors when synchronizing the async queue\"\n53862b5658dd RenderScript still exists as a clang language, so handle as invalid\nf83e6c6d7a8d [Bazel][mlir] Fix build errors\nf5cca3c5ce7a [flang] Handle expression in SELECT TYPE selector\nb8d3d02d7c8c Remove now unused enum.\n5f5cf6029852 [Pipeline] Remove -enable-npm-O3-nontrivial-unswitch flag\n4d16ebd6c971 [Pipeline] Remove -enable-no-rerun-simplification-pipeline flag\ndccd1d736c25 [libc][bazel] add string to float targets\n662548c82683 [lldb] Replace SB swig interfaces with API headers\n23d43e697757 [libc++] Add regression test for std::hash implementation in ABI v1\nc6c41c31f1e5 [mlir][linalg][tensor] Delete duplicate tests and fix typo in filename\n17e2497593d6 Remove Renderscript LLDB\n22e199e6afb1 [RISCV] Accept zicsr and zifencei command line options\n372820bf571c [libunwind][PowerPC] Fix saving/restoring VSX registers on LE systems\nfbe210dc7a6a [libc] Implement htonl and htons\n35742743d273 [Hexagon] Fix number of arguments in call to DAG.getNode for VINSERTW0\nf842b7a6b8f4 [HLSL] add log library functions\n891b0910b3c4 Revert \"[RISCV][MC] Add support for experimental zfa extension (FLI instruction not included)\"\n8a17cd9905c2 AMDGPU: Add a regression test case for D143963\n8e5a41e8271f Revert \"AMDGPU: Override getNegatedExpression constant handling\"\nbbef38352fba Revert \"[LowerTypeTests] Support generating Armv6-M jump tables.\"\n9305b63d6951 [AMDGPU] Add another G_UNMERGE_VALUES legalization test case\nd9a04d1d5453 [libc] Support running tests for Pigweed\n2ac85cd56381 [AMDGPU] Regenerate check lines to enable updating for D144050.\n0871337d97f7 [XCore] Adapt Clang tests to opaque pointers.\n7ed26ad10cef [flang] Always incorporate parent types' special generic bindings\n1538761303ce [LSR] Add test case which shows additional LSR with D144050.\n861709107b43 [Libomptarget] Check errors when synchronizing the async queue\nf6fa5a66d8a8 [RISCV][MC] Add support for experimental zfa extension (FLI instruction not included)\neb3dfa0a2487 [Clang] Convert some tests to opaque pointers (NFC)\n081815b4e32c [Clang] Regenerate check lines (NFC)\n2d6713b5b7a2 Revert \"[RISCV][MC] Add support for experimental zfa extension(FLI instruction not included)\"\n80334ca1e285 Revert \"Update: [RISCV][MC] Add support for experimental zfa extension(FLI instruction not included)\"\n80abf86d506b Revert \"[RISCV][CodeGen] Add codegen pattern for experimental zfa extension (FLI and FCVTMOD not included)\"\n7abe3497e72a [LSR] Improve filtered uses in NarrowSearchSpaceByPickingWinnerRegs\na768112e0641 [Clang] Convert some tests to opaque pointers (NFC)\nf6ddf7781471 [LowerTypeTests] Support generating Armv6-M jump tables.\nafde3f549d7a llvm-tblgen: Apply IWYU partially\n3a6f3b44e434 [flang] lower hlfir.matmul into fir runtime call\n91cbc3f2d83d [flang] lower matmul intrinsic to hlfir.matmul operation\n09472ba31504 [flang] add hlfir.matmul operation\nec640382fc93 [mlir][MemRef] NFC - Add debug information to MultiBuffer.cpp\ne44f405bb41b [mlir][bufferization] Fix bug in findValueInReverseUseDefChain\n4565bc00de6e [DataLayout] Use separate vectors to store alignment (NFC)\nace6072bca65 [mlir] PromoteBuffersToStackPass - Copy attributes of original AllocOp\n28542e99bb82 [mlir][llvm] Use before def debug intrinsic import\n8421307b6b16 [Clang] Convert some tests to opaque pointers (NFC)\nb32b7068ef8e [ConstraintSystem] Use sparse representation for constraints. (NFC)\n66749ce92707 [ARM] Add Thumb LSR codegen tests. NFC\na9e4bb387b21 [flang][hlfir] Array constructor lowering [part 2/4]\nffde9f17300b [flang][hlfir] Array constructor lowering [part 1/4]\n849c4402261a [Flang][OpenMP] Added parser support for device_type clause\n5c988cba4a66 [flang] Use derivedType from toAddedum to get updated components\n96179dff46a9 [mlir][Linalg] Add a transform dialect op to rewrite ops to destination passing style.\nb58daf91d677 Add a lowering for memref.dealloc with unranked memrefs.\nba23bca0a83d [SME2][AArch64] Add multi-single multiply-add long long intrinsics\ne97fc5007e72 [flang] Add TODO instead of crashing on assert\n83014d877017 [libc++] LWG 3857: allow `string_view` conversion when only traits vary\n574e417460cd [clang] Fix a bug that allowed some overflowing octal escape sequences\n5bdd0beeee56 [MachineCombiner][NFC] Rename `MinInstr` to `TraceEnsemble`\na3d1de3e2908 [LV] Move invalid cost remark code to separate function (NFC).\n873ea45115a8 [mlir][llvm] Rename void debug type to null\nc76acb9dffec [UniformityAnalysis] Fix some file headers and pass names\n130d2953d878 [Flang][OpenMP] Fix a corner case where target region is empty\n4bc2357c3de2 [mlir][MemRef|Tensor] Fix the handling of DimOp\n7fbcc24409ef [llvm-debuginfo-analyzer] (08a/09) - Memory Management\n2002c82278f6 AArch64: count callee stack we use when estimating scavenging requirements.\n819dfc338bdd [AMDGPU] Autogenerate checks for several tests. NFCI\n0e1fb48bb95a [lld-macho] Use uint64_t instead of size_t to fix 32 bit test failures\neeb125659c17 [InstSimplify] Slightly optimize simplifyLoad() (NFC)\n37b7a60cd74b [NFC] Add a test for C++20 Modules\na1b78fb929fc [JT][CT] Preserve exisiting BPI/BFI during JumpThreading\nf8d5f0e53b04 [NFC] Add two tests for C++ modules\n4469ec1d196f [mlir][llvm] Import alias scope metadata from LLVM IR.\nc9fad20f6a66 [InstCombine] Call simplifyInsertValueInst()\n6bec2c30777f [InstCombine] Add additional aggregate reconstruction test (NFC)\n9ca2c309ab06 [InstSimplify] Fix poison safety in insertvalue fold\nb0de87268a60 [flang] Retrieve the correct scope when lowering SELECT TYPE\n86c8ea9ac922 [mlir] Add check for value that might be null.\nf62b084e92e0 [LoopDeletion] Remove legacy pass\n999ead9dc908 [Modules] Code cleanup after removing ModulesTS\n612f3ac26f8c [Modules] Remove -fmodules-ts\n96df79af029b [X86] Support load/store for bf16 in avx\n7e6e636fb683 Use llvm::has_single_bit<uint32_t> (NFC)\n68e81d7e45c7 [ADT] Use llvm::rotr (NFC)\nd54888a3ebb1 [Modules] Refactor modules-ts tests to use standard c++ modules\nfc6d517e2f33 [RISCV][CodeGen] Add codegen pattern for experimental zfa extension (FLI and FCVTMOD not included)\n5e815372480d [Clang][RISCV] Sort test cases into its mnemonics\na1aad28d297a [mlir][vector] NFC: Improve vector type accessor methods\n5382d28815d8 [mlir] Use std::optional instead of llvm::Optional (NFC)\n43059255ce53 [RISCV] Make a const member function static. NFC\n321cd52ba264 Update: [RISCV][MC] Add support for experimental zfa extension(FLI instruction not included)\n54c136e6c630 [RISCV][MC] Add support for experimental zfa extension(FLI instruction not included)\n7081e59dd12a [MC] Remove an unneeded comparison on cast result. NFC\n9a2cb3a6925f Fix bazel build\nf30ca850ef8b [mlir][sparse] reduce the input size in stress_test.py to make it finish in time.\ndcf18e4757b2 [debugserver] Initialize logging earlier in the startup sequence\nc738b430c46a [mlir][sparse] introduce operations to query sparse tensor slice offset/strides at the given dimenion\na851d46e07c1 [Clang][Driver] Fix integer normalization with KCFI\n4eee77873bca [LoopReroll] Remove legacy pass (unused in the pipeline)\ne2e83f4c8f1d [mlir][sparse] support coiteration over sparse tensor slices\n22b7685401e8 Reland \"[hwasan] Add definitions for missing operator delete functions\"\na9269773eb94 [scudo] Improve the uses of roundUpTo/roundDownTo/isAligned\n94a391b94972 [scudo] Calling iterateOverChunks requires holding lock\nae1bd3adf02f [scudo] Add thread-safety annotations on TSD data members\ne7d3f43eafdd [LoopFlatten] Inline an external linkage function not in llvm::. NFC\n48bfed77cf86 [LoopFlatten] Remove legacy pass (unused in the pipeline)\nf1ddfa6d8a72 [lldb] Remove pydoc import during script interpreter init\n7d62bc9cd380 [mlir][sparse] disable sparse convolution test cases.\n21ccddd2cee1 [LoopInterchange] Remove legacy pass (unused in the pipeline)\n66b3f4a40731 [libc][bazel] Add missing dependency for stdlib tests.\n9ed587ea9bec [mlir][sparse] split sparse concatenate test cases smaller ones.\nae7942e2960e [mlir][sparse] adding `SparseTensorType::get{Pointer,Index}Type` methods\n8bd0e9481cfc Revert \"Transform vector SET{LE/ULT/ULE} -> SETLT and SET{GE/UGT/UGE} -> SETGT if possible\"\n7adf26e7683d Revert \"Remove incorrect comment around `truncateAVX512SetCCNoBWI`; NFC\"\nc38c8d674383 [PseudoProbe] Refactoring a test\n7058f083020d [gn build] Port 6f3e6a765a9e\nf5aa8d191a5b [Clang][docs] Update the release notes page to the new skeleton\n6313ece5ce94 Revert \"[hwasan] Add definitions for missing operator delete functions\"\n052ae28ac77f [RISCV] Use !cond instead of multiple !if in RISCVInstrInfoVPseudos.td. NFC\nd464edde9571 [X86][Win64] Avoid statepoints prior to SEH epilogue\nd950bdc73eb2 [mlir][sparse] misc code cleanup\n74a5d7471fbd [flang][runtime] MayAlias() must be false for unallocated descriptors\n08ecef8e338f [RISCV] Add CLB/CLH/SLB/SLH formats for Zcb instructions.\n792a724f894a [RISCV] Remove some vestiges of Zbp and Zbt extensions. NFC\n8c1f77af7fd1 [clang-format] Fix windows build.\ne6fbfb1ff1d3 [NFC] Make Module::getIFuncList() private\nbb4fc6b6d6b4 [mlir][sparse] Adding `SparseTensorType::{operator==, hasSameDimToLvlMap}`\nee437afa912b [flang] Don't add a source range to a type instantiation's scope\n6f3e6a765a9e Revert D129735 \"[RISCV] Add new pass to transform undef to pseudo for vector values.\"\na9797d7d2d78 [C2x] Implement the `unreachable` macro for WG14 N2826\nd6ff0808618c [hwasan] Add definitions for missing operator delete functions\n565048543b35 [NFC][SVE] Refactor isel for floating multiply-add operations to use PatFrags.\n72584d91990b [scudo] Fix inconsistent signed/unsigned comparison\ndf2ea2fc2839 [ConstriantElimination] Add NODEBUG condition around `dump`\n8a7b5e0e50de [AArch64] Guard extra uses in mls combine.\nc3ca29080c17 [mlir] bazel fix\nbe75cf931f3f [mlir][tensor] Fix a bug in tiling unpack op.\na41e1ea2a746 [libc++][CI] Starts using Clang 17.\neddec9de44cd [Pseudo probe] Duplicate probes in vectorized loop body.\n57865bc5ad27 [CodeGen] Add a flag to `Address` and `Lvalue` that is used to keep track of whether the pointer is known not to be null\n9048ea28da95 Reland \"[mlir] Make the vast majority of intgration and runner tests work on Windows\"\n114ce273d86a [flang][runtime] Fix typo in assign.cpp\n78e172fc92e7 [mlir][spirv] Support i32 memref.atomic_rmw conversion\n7889f424966e [flang][NFC] Remove unwanted tab\n97ba3c2bec48 [Clang][AMDGPU] Set LTO CG opt level based on Clang option\n45ee0a9afc62 [LLD] Add --lto-CGO[0-3] option\n3cf7f2249825 [mlir][vectorToGPU] Fix type used when folding transpose into read op\na225d897c151 [DebugInfo][Docs] Fix broken link in instruction referencing doc\n82ae83a8487d [mlir] Silence a few -Wunused-but-set-parameter warnings\n22f0c7a45149 [mlir][AMDGPU] 8-bit float usage in the AMDGPU dialect\n50ef8673a378 [InstCombine] remove stale test comment; NFC\n07f93d8c2cc4 Recommit \"[ConstraintElimination] Change debug output to display variable names.\"\nb413b84a704e [libc++abi][AIX] Skip non-C++ EH aware frames when retrieving exception object\nb0bfbad19b06 [AArch64] Always lower fp16 zero to FMOVH0\nef15617f124c [flang][runtime] Return the right mutable modes from INQUIRE in child I/O\n6dd9d18204d2 [mlir][linalg] Fix insertion point bug in D144022\n4f15267d3dd7 [libc++][NFC] Replace _LIBCPP_STD_VER > x with _LIBCPP_STD_VER >= x\n6b991ba486b6 [clang][dataflow] Change `transfer` API to take a reference.\n02ae7e72b3f0 Revert \"Recommit \"[ConstraintElimination] Change debug output to display variable names.\"\"\n22882c39df71 [InstSimplify] Add additional insertvalue into undef tests (NFC)\n93164dba086d [llvm][AArch64] Fix BTI after returns_twice when call has no attributes\n2a2a6bfcfe8e Recommit \"[ConstraintElimination] Change debug output to display variable names.\"\n62d0e1a8541f Revert \"[ConstraintElimination] Change debug output to display variable names.\"\n869c87ad10e8 [ConstraintElimination] Change debug output to display variable names.\nb67ee5d50562 [reland][libc] Separate memcpy implementations per arch\nc645eb0d03bd [mlir][memref] Bufferize memref.tensor_store op\n01581e28ad92 [mlir][linalg] Add bufferize_to_allocation transform op\n07916cea2e7e [ConstantFold] Check for constant global earlier (NFC)\n8b5004864aab [lld][RISCV][test] Expand testing in riscv-attributes.s\n4c3408697b73 [LangRef] improve documentation of SNaN in the default FP environment\n7a282bd2aaa5 [bazel] Fix missing dependency in clang-tools-extra/clang-tidy:llvmlibc\n861764b1c5f7 [NVPTX] Fix NVPTX output name in the driver with `-save-temps`\n15b90805bcb8 Revert \"[libc] Separate memcpy implementations per arch\"\n97e441dc6cfa [libc] Separate memcpy implementations per arch\n3ef062a4bd86 [mlir][transform] Add transform.get_result op\n1f818f63b829 [clang-format] assert(false) -> llvm_unreachable\nf70282237166 [bazel] create a clang-tidy binary target\n980aa8d740da [MachineTraceMetrics] Add local strategy\nb0e7ca79ab0c [X86] Remove abs(sub_nsw()) -> abds fold from adbu test file\na8483b9b3038 [lldb] Fix a log format warning on Windows, don't assume uint64_t is a long type\n1995d4424505 [clang-format] Enable FormatTokenSource to insert tokens.\n9ccc58893be8 AMDGPU: Fix not adding to depth in getNegatedExpression\n7cbbbc0a045b clang: Rename misleading test name\n674f094d852b [lld][ARM][NFCI][1/3]Big Endian support - Removing assumptions\n5bb8ead4e9dc [AArch64][NFC] Rename  AEK_SMEF64 and AEK_SMEI64 feature flags\n3600b384462b [SimpleLoopUnswitch] Canonicalize conditions for injection of invariant condition\n0992e6ee115e [Test][NFC] Rename one of test parameters to avoid confusing associations\ne117fd28d525 [Symbolize][MinGW] Support demangling i386 call-conv-decorated C++ names\n14fcdd7f9d7b [CVP] Add additional ctlz tests (NFC)\n4c8eda9337d4 [XCore] Adapt threads.ll to opaque pointers.\nbc173f526c57 [SimpleLoopUnswitch] Fix overflowing frequencies case\n45ddc157ca7c [clang-tidy][NFC] Remove ModernizeTidyModule::getModuleOptions\nc7f9344d0f8f [DAGCombine] Fold redundant select\nc3228714cc0e [libc][NFC] Make tuning macros start with LIBC_COPT_\nd64d5772b1ea Add InstSimplify tests for comparisons between known constants\n59b8db1db8ec [JITLink] Drop const qualifier from argument to ELFLinkGraphBuilder's ctors (NFC)\n1c42f8e69d8f [JITLink] Fix whitespace in debug dumps (NFC)\n7d9cf97f80f0 [bazel][mlir][examples] Add missing dependency for 72429a42ac33564fa82449d99dc234da32a05498\n458ad6900e66 Revert \"InstCombine: Fold is.fpclass(x, fcZero) to fcmp oeq 0\"\ne1d95e99bc31 [flang] Update intrinsic types to unlimited polymorphic form\n11c3cead2378 AMDGPU: Override getNegatedExpression constant handling\na4e8347b3661 AMDGPU: Refactor isConstantCostlierToNegate\ndf78976d023a InstCombine: Fold is.fpclass(x, fcZero) to fcmp oeq 0\n8f7e7400b74b [mlir][bufferization] Add restrict and writable attrs to to_tensor\n462227f1150f [SROA] NFC: Look at TypeStoreSize scalable property, rather than at type directly.\n35276f16e5a2 [llvm-c] Add C API methods to match 64bit ArrayType C++ API signatures\n71712440bbb2 [mlir] Add vectorize_nd_extract attribute to the masked_vectorize Op\n86a63b2ae147 [Metarenamer] Use 'inst' as default name for instructions\nddc5d40dd285 [clang][analyzer] Make messages of StdCLibraryFunctionsChecker user-friendly\nc1eb3db780b7 [LoopFuse] Remove legacy pass\n30d542f9b2ad [MLIR][Tensor] Introduce a pattern to propagate through `tensor.pad`\n2872987e5e91 [InstCombine] Fix InstCombinerImpl::foldICmpMulConstant for nsw and nuw mul with unsigned compare.\n41628d050a17 [mlir][Bazel] Add missing dependencies for 72429a42ac33564fa82449d99dc234da32a05498\n4bba8bd33efd [mlir] Add RewriterBase::replaceAllUsesWith for Blocks.\n72429a42ac33 Add a pass that builds a debug info scope for LLVMFuncOp (adding a DISubprogramAttr)\nd7ca25342ff6 [mlir][Bazel] Add dependency needed for e9b82a5c\n1427277eed80 [mlir][Vector] Enable masking for static shapes\n1ac874c9aa18 [mlir][Vector] Add support for masked vector gather ops\n9452356ddcf4 [mlir][Vector] Add support for masked vector.contract\ne9b82a5c4fb6 [mlir][Vector] Add LLVM lowering for masked reductions\na409f3c06914 [LoopVersioningLICM] Remove legacy pass\n0dc18b6222f4 [mlir] Use std::optional instead of llvm::Optional (NFC)\n05423905d064 [mlir] Use std::optional instead of llvm::Optional (NFC)\n4dfd5a3eb6c3 [llvm] Use std::optional instead of llvm::Optional (NFC)\n71251e8d4f3f [mlir] Fix -Wsign-compare in SparseTensorRewriting.cpp and Sparsification.cpp (NFC)\n9e6e96f3e4c3 [gn build] Port f1c4241fb6e5\nf1c4241fb6e5 [RISCV] Add new pass to transform undef to pseudo for vector values.\na17bfbad6387 [RISCV] precommit test for D129735\n54cf24dc6e63 [NFC] Refactor ModuleDeclStateTest to make it not dependent on Frontend\nef6d474aa7ac [ORC] Add ELFNixPlatform::Create overload -- Pass ORC runtime as def generator.\nf708a549b87e [mlir][sparse] Factoring out SparseTensorType class\n8d995b26c755 [C++20] [Modules] [ClangScanDeps] Ensure that we can mix the use of and clang modules\naef76fe554ee [clang-format][NFC] Reformat clang/tools/clang-format/fuzzer/\n81cb70e46ea1 [mlir][sparse] fix a bug in UnpackOp converter.\ndd31a3b3a526 [InstCombine] fold icmp of the sum of ext bool based on limited range\n06f06644efb0 [SeparateConstOffsetFromGEP] Fix: `b - a` matched `a - b` during reuniteExts\nf93da3962eed [Instcombine] Precommit tests for icmp range; NFC\na52432f63312 [NFC][SeparateConstOffsetFromGEP] Added flag `lower-gep`\na211d79cac12 [bazel] Port 26662ac010ef50e65e2774eab84f325aa09360fe\n6e794ba0b238 [Clang][RISCV] Guard vector int64, float32, float64 with semantic analysis\nc0f504df4857 [mlir] Fix two build warnings in VectorToGPU (NFC)\nbb692d44c43f [gn build] Add missing count dependency for check-asan\ndfacba5af0fb [scudo] Update ring buffer test to make it accept zero size\n766065aa6553 [LoopUnrollAndJam] Remove legacy pass\n6a4c39596d68 [scudo] Add the thread-safety annotations\n2b8cb7d87fcb [LoongArch] Make use of addu16i.d for adds with suitable immediates\ndcf9c60a538c [LoongArch] Add baseline tests for `addu16i.d` codegen. NFC\n82c6e90d6a3d [Clang][Test] Add llvm-lto, llvm-lto2 and llvm-profdata to the tool substitutions list\n6adf92026ee5 Remove trailing whitespace in `X86InstrAVX512.td`; NFC\nf895d55f149b Remove incorrect comment around `truncateAVX512SetCCNoBWI`; NFC\n42e11a6ea321 Add transform (and/or (icmp eq/ne (A, C)), (icmp eq/ne (A, -C))) -> (icmp eq/ne (ABS A), ABS(C))\nabf6692f9513 Tests for (and/or (icmp eq/ne A, C), (icmp eq/ne A, -C)) <--> (icmp eq/ne (ABS A), ABS(C)); NFC\n8b5c3902475b Transform `(icmp eq/ne Abs(A), Pow2)` -> `(and/or (icmp eq/ne A,Pow2), (icmp eq/ne A,-Pow2))`\n54a9e992c84c Add Transform for `(and/or (eq/ne A,Pow2),(eq/ne A,-Pow2))`->`(eq/ne (and (and A,Pow2),~(Pow2*2)), 0)`\ne29c4393236f Add tests for folding `(and/or (icmp eq/ne A, Pow2), (icmp eq/ne A, -Pow2))`; NFC\nf3732c2b18df Transform vector SET{LE/ULT/ULE} -> SETLT and SET{GE/UGT/UGE} -> SETGT if possible\n3e0866bf616b [mlir][Vector] NFC - Fail gracefully on size mismatch instead of assert\n5ef7ceae5769 [mlir][Vector] Significantly improve VectorToGPU.cpp\n26662ac010ef [Support/BLAKE3] Rename blake3_* -> llvm_blake3_* to avoid symbol collisions\n10eea3fe1536 [LoopVersioning] Remove legacy pass\n74a2dd1356bf [InstSimplify] fix/improve folding with an SNaN vector element operand\nac2f13f673b8 [InstSimplify] add tests for vectors with SNaN constants; NFC\nae0c203e676e [LoopLoadElimination] Remove legacy pass\n87046744e6a8 [Driver] Allow test to use lld-link.exe not just lld-link\neb5530e621aa [LoopDistribute] Remove legacy pass\n823186b14dc9 Recommit: [NFC][IR] Make Module::getGlobalList() private\n0a0d58f5465a [libc++] `<algorithm>`: `ranges::minmax` should dereference iterators only once\n83ba349ae0a8 [InstSimplify] fix/improve folding with an SNaN operand\n4a4e44e378ca [InstCombine] add test for loop-invariant fdiv; NFC\n1ce1e4a4d59d [mlir][spirv] Validate float type bitwidths\n96fcaf0cc06a [openmp] Fix building for mingw targets after import library changes\ncb5f239363a3 Revert \"[NFC][IR] Make Module::getGlobalList() private\"\ncafb1c1cb241 [runtimes] Remove duplicate imports of libcxx.test.config\nb4243bb611a3 [clang-format] Don't rewrite the input file if already formatted\ned3e3ee9e30d [NFC][IR] Make Module::getGlobalList() private\n33d0d1e36ffa [runtimes] Rename newconfig.py to config.py -- it's not new anymore\n9f3a3e1f3f97 [lldb] Disable macro redefinition warnings in expression wrapper\n20cdf7c70667 [InstCombine] Increase limit for max copied from constant fold\n0d4e55ba69c1 [OpenMP] Recover non-blocking target nowait disabled by D141232\n9093f3c39b8f Report a useful error when someone passes an incorrect python class name.\n853a46cfb1ca Revert \"llvm-reduce: Run instruction reduction last\"\n9e9293ee6aaf [llvm][test] convert one test to use opaque ptrs (NFC)\nac835ecb5fea [Fuchsia] Set /winsysroot in Windows runtimes linker flags\nc062e97acfba [llvm][test] restrict 2 GVN tests to just test GVN (NFC)\nc510c387631e [libc++][NFC] update Range Status for the completion of C++20 ranges\nb677d0753c0a [IPSCCP] Remove legacy pass\n36606cf07080 [NFC] Replace -1U{LL} expressions with appropriate *_MAX macros in Support library.\n31c35285d27e [mlir][spirv] Fix crash when decorating physical storage buffer pointers\n913b4aa60830 Reland \"[compiler-rt][hwasan] Add unused attribute to GetRegisters\"\nddb704247b16 [clang][test][RISCV] Introduce separate RUN lines for __risv_i test in riscv-target-features.c\naecb36c8489a [GlobalOpt] Remove legacy pass\nb40bfc1b9e38 Reland \"[gn] port f29cfab55d1f\"\n5b455a8efbf5 [InlineAdvisor] Restructure advisor plugin unittest cmake\n08533f8b8660 Revert \"[CGP] Add generic TargetLowering::shouldAlignPointerArgs() implementation\"\n12b4f9e2af95 [AMDGPU] Do not apply schedule metric for regions with spilling\n5c1b8de77d1c [libc++][doc] Sets the proper plenary date.\n8cf1524cbc7f [loop unroll] Fix `branch-weights` for unrolled loop.\nfb717fe06dd0 [NFC][IR] Make Module::getNamedMDList() private\neaeb8ddd4a9d [LLDB] add arch-specific watchpoint behavior defaults to lldb\n8198f30f7e75 [lld-macho] Account for alignment in thunk insertion algorithm\n055cd78eef15 [RISCV] Untabify THMulAccumulate_rr. NFC.\nd4012bc43f9a [RISCV] Add vendor-defined XTheadMAC (multiply-accumulate) extension\n179db7efe567 [MLIR][OpenMP] Add support for depend clause\n361d5a7a9f14 [gn] port 4e3dac6f0a4c (ScudoHooksUnitTest)\n7301a7ce196e [mlir][linalg] Make Linalg vectorizer lower affine.apply\n4e3dac6f0a4c [scudo] Call __scudo_deallocate_hook on reallocations.\n6c7894a8e652 [libc][doc] Move docs/math.rst to docs/math/index.rst\nddde06906be1 [OpenMP]Fix PR55970: Miscompile of collapse(3) with non-rectangular loop nest.\n5dc400ea2f06 [gn build] Port 7f5d130a428f\n1da2085a5133 libclc: add clspv to targets exempt from alwaysinline\n290308a99e6b libclc: add generated convert.cl to clspv/clspv64 targets\n9c8f3409494f [libc++][format] Fixes test failures.\n7f5d130a428f [libc++][chrono] Add hh_mm_ss formatter.\n5205c7126b2f [mlir][gpu] Add support for unsigned integer extend in vector to gpu.subgroup_mma lowering\nf6cd46e07fcc libclc: add more generic implementations to clspv SOURCES\nf8877d86a867 [libc++][doc] Adds Issaquah papers and issues.\n5a81d0eea40a [AArch64] Remove dead isReflexive methods. NFC\na9f384994b9d [libc++] Counter<T>'s assignment operator shouldn't ++gConstructed\n755535b5eb5f [flang][runtime] Handle aliasing in Assign()\n0f52c1f86c62 [llvm] Deprecate {Bits,Float,Double}To{Bits,Float,Double} (NFC)\nd180443570d7 [NFC][IR] Make Module::getIFuncList() private.\n016d5a0a0a15 [flang] Strengthen conformance requirements for allocatable/pointer dummy arguments\nd05e1e99b1d6 [clang][test][RISCV] Check for __riscv_i in riscv-target-features.c\n574d0c2ec107 [clang][test][RISCV] Fix precision of CHECK-NOT lines in riscv-target-features.c\nf4d8b8781de9 [AMDGPU ASAN] Remove reference to asan bitcode library\nc5085c91cc8e [CodeGen] Trivial simplification of some getRegisterType calls. NFC.\n800fec13a81f [libc++] Enforce formatting for already formatted and new files and ignore the formatting of tests\nacbb15ed705f Revert \"[extract_symbols.py] Adjust how the output of nm is interpreted\"\n9a8d64a66a15 Revert \"[libc] Separate memcpy implementations per arch\"\nbf987e108fcc [AArch64][SME]: Custom lower select and fp_extend for streaming SVE\n26541d417634 [libc] Separate memcpy implementations per arch\n8981f20ae9c3 [libc] refactor logic around embedded memcpy\n3af88305e443 [flang] Associate entities are variables\nfefe729f0f4a [AArch64][SME]: Custom-lower SIGN_EXTEND_INREG for streaming SVE\n057cae64ebc4 [MLIR][Presburger] Matrix: hide expensive consistency check behind EXPENSIVE_CHECKS macro\nf04421739232 [ConstraintElim] Add reproducer remarks.\n9c14132d7b6c [AArch64][SME]: Add missing Ops that need custom-lowering in streaming mode.\nbfbfbd8b65de [LVI] Fix and re-enable at-use reasoning (PR60629)\n0fa5df1959fa [LV] Synthesize all true masks for masked vector function variants\n09dd4d870e19 DAG: Remove hasBitPreservingFPLogic\nd94399c64151 [mlir][llvm] Make LoopAnnotations non-discardable\n463fa25c34d6 [clang][NFC] Adjust tests to not un/define predefined macros\n7a49d50f22ad [flang] support fir.unreachable in stack arrays pass\neb436da6b826 [flang] automatically load FIR dialect with hlfir\nddfabefe1be1 [libc] Conform memcpy tuning macro to the new naming scheme\n77bd15ae2fa3 [MachineTraceMetrics][NFC] Move Strategy enum out of the class\n147f476e851d [mlir][LLVM] Properly wrap code examples in markdown code blocks\na5488a398f3b [flang][hlfir] remove unnecessary header include\n1fae1464d7a7 [flang] Fix USE rename\n67223522355b [SimpleLoopUnswitch] Re-enable simple-loop-unswitch-inject-invariant-conditions\nc7ea20c8eed5 [SimpleLoopUnswitch] Ignore inner loops when injecting invariant conditions. PR60736\nf3c008ca776b DAG: Relax foldBitcastedFPLogic conditions\n3849dc1f8eeb [NFC] Move some asserts out of Expensive Checks\n94676cf8a13c [llvm][AArch64] Fix an interaction of SLS and BTI after a returns twice call\nebc21c7a2558 [Test] Add test for PR60736\ncfeb0bf83ec1 [SimpleLoopUnswitch] Temorarily switch off simple-loop-unswitch-inject-invariant-conditions. PR60736\n8c7cfa357280 [mlir] fix LLVM IR translation of vector<... x index>\n98ecc3ac77a9 [Flang] Fix for Any/All simplification to properly propogate the inital value\ne8d44841c5d5 [docs] Update the ACLE URL\n6240627cfda4 [docs] Fix bullet list formatting\n0b33f0d80b83 [mlir][linalg] expose convolution dimension classifier\n7fdc2ed09f44 [mlir] reallow null results in TransformEachOpTrait\n64dad4ba9af6 Use llvm::bit_cast (NFC)\n544831ab9f35 [mlir] Drop unused arith conversion class (NFC)\n504aa8ae941e [include-cleaner] Better support ambiguous std symbols\n1ba93c3c30dc [Modules] Don't re-generate template specialization in the importer\n46cdf7f09912 [Tooling][Stdlib][NFC] Reflow comments and strip clang-format pragmas\n697a162fa63d [AVR] Fix inaccurate offsets in PC relative branch instructions\n1e6921131aa4 Move global namespace cl::opt inside llvm::\n4f0eb57222de AMDGPU: Teach getNegatedExpression about rcp\nce4b719f33e5 AMDGPU: Add test for getNegatedExpression with rcp\n0a669bd894f3 AMDGPU: Add additional tests for combiner infinite loop\n463ab1e07a0a llvm-reduce: Run instruction reduction last\n04f69345894d [DAG] Handle build_vector with all undefs in reduceBuildVecTruncToBitCast\n2e9549db2686 [LangRef] Global variable declarations imply minimum size\naf838c1b1c20 [Coroutines] Don't run optimizations for optnone functions\nbfea83767603 [mlir][llvm] Reintroduce string based attribute setting.\ncb90bb986611 [PowerPC] Specify the dynamic loader prefix in ppc-float-abi-warning\ndf3e73dabb5b [LoopDeletion] Simplify. NFC\n9c4f0d83f64e [docs] Add document for clang-scan-deps -format=p1689\n8c74defcca50 [OpenMP] Fix extra parenthesis in kmp_os.h\n5e78b749eccf [ARM] Use llvm::rotl and llvm::rotr (NFC)\na411bc727426 [RISCV] Rename InstFormatCSZN->InstFormatCU to match latest Zcb spec. NFC\n639b7865a67f [RISCV] Use llvm::rotl (NFC)\nafad153a0890 Recommit: [NFC][IR] Make Module::getAliasList() private\ndf77dec93e17 [AArch64] Use llvm::rotl and llvm::rotr (NFC)\n9700eb4fbfdc [bazel] build fix\n48f04ffa9f36 [mlir][affine] Normalize constant valued bound loop\n6d4a674acbc5 Revert \"[NFC][IR] Make Module::getAliasList() private\"\n7c6b46e87eaf Revert \"[DAGCombiner] handle more store value forwarding\"\nac6219d0aeb7 Revert \"[DAGCombiner] fix comments for D138899; NFC\"\nb64f7d028bdc [NFC][IR] Make Module::getAliasList() private\n6ee2f770efb6 [PowerPC][GISel] add support for fpconstant\n5561e174117f Revert \"[mlir] Make the vast majority of integration and runner tests work on Windows\"\n663725947bae [flang] Disable libc++ assertions in the runtime library\ncff7fad1544a [flang] Catch repeated BIND(C) attribute specifications for a symbol\n235e90c1d760 [Clang][RISCV] Guard vector float16 type correctly with semantic analysis\n4b815d8443db [mlir][NFC] Remove unused variable 'indexType' in GPUTransformOps.cpp\n288ae0b92f57 [mlir][gpu] NFC change to pass threadID ops to rewriteOneForeachThreadToGpuThreads\n69373a5d3f45 [flang] Check for invalid BIND(C) names\n4148f2768b87 [flang] Check for non-interoperable intrinsic types in BIND(C) derived types\n855b67799b7c [libc++][NFC] Remove duplicated line from `Cxx20Issues.csv`\n30d932305567 [flang] Pointers returned from functions are not definable as pointers\n632fd9fb861c [flang] Respect inaccessibility of type-bound ASSIGNMENT(=)\n5402110e0123 Revert \"[lldb] Use portable format string PRIx64\"\n7bc9dc26bc9b [Fuchsia] Add FUCHSIA_ENABLE_LLDB option.\n860ed6c078b4 [flang] Warn about dangerous TRANSFER()\n776b7499ea81 [TLS] Added a LangRef entry wrt the module flag MaxTLSAlign.\nb57bc158ea46 [flang] Catch obscure structure constructor error\nee88f1177003 Find SDK path more lazily in Apple Simulator platforms\nf7016f8a8ea2 [scudo] Call getStats when the region is exhausted\n70758b801df9 [scudo] Calling getStats requires holding lock\nf28c1a9df2e3 [flang] Conform with standard (mostly) for character length mismatches on arguments\ne800c664f0e9 [mlir][sparse] Extend readCOOIndices to support overhead types beyond index_type.\n8151d6f80458 [flang] Diagnose REPEAT with negative NCOPIES=\nce9ce66b8def [mlir][sparse] fix a memory leakage when converting from a tensor slice\n5fde2d99513f [libc] Write stub files to a new directory to avoid conflicts\n4f1037f86a62 [flang][build] Fix build issue reported on recent commit\n620b3d9ba334 Revert \"[LLDB] Enable 64 bit debug/type offset\"\neb0ea28b6a1b [OpenMP] Add check for target allocator regardless of the availability of libmemkind\n81566001e0c8 [mlir][tosa] Enable `apply_scale` unrolling\nb673135bb833 [Release] Produce bolt tarball\nbe7d7ca11018 [lldb] Use portable format string PRIx64\n17b097b8df69 [runtimes] Set LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default to ON for OS390\nf11ab8353f97 libclc: remove sqrt/rsqrt from clspv SOURCES\n807d43239a5f [VPlan] Use properlyDominates predicate for ordering FOR users.\n161b9d741a3c [mlir] Make the vast majority of integration and runner tests work on Windows\n19b1e27fcd56 [mlir][SPIRVToLLVM] Add pass option to emit opaque-pointers\n009fc4ca3b44 [mlir][LLVM] Verify correct pointer casts with `llvm.bitcast`\n0aaf2e3bc057 [mlir][GPU] add required address space cast when lowering to LLVM\n9d0b596aada6 [mlir][tosa] Fix segmentation fault in case of folding unranked tensor\nf36fe009c0fc [LLDB] Enable 64 bit debug/type offset\n7156d3b1fe80 [libc][bazel] Update math function unit tests' dependency computation.\n2dab5bdf89f6 [flang] Warn on mismatched DATA substring sizes rather than crashing\n9369b7d307be [lld][WebAssembly] Limit size of shared 64-bit memories of 2^^34\n67d78e3c6fe5 [libc] Add a loader utility for AMDHSA architectures for testing\ne5d914672233 [extract_symbols.py] Be more permissive when examining nm output\n8f5d81585aa9 [Clang][LLVM] Enable __arithmetic_fence and fprotect-parens on AArch64\ne96f994f39ad Revert \"[Hexagon] Add release note for LLVM 16\"\n892bf09606b6 [mlir][arith] Allow to specify `constFoldBinaryOp` result type\ndc38cbcc8b89 [mlir][arith] Fold selection over constant vector conditions\nf841c4af5f5e [lldb] Fix image lookup crash\n51a07fc24cb9 [clang] Add test for CWG2396\n7638409d4363 [RISCV] Make vsetvli intrinsics default to MA.\n06d9bf5e64d4 [OpenMP] generate the Windows import library that imports by name rather than ordinal\n96267b6b8840 [mlir] Add Float8E5M2FNUZ and Float8E4M3FNUZ types to MLIR\n7c84f6a43ae3 [flang] Emit portability warning for extension\n8e628f72b00c [mlir] Avoid building some shared libraries when PIC is off\nbf7c42161700 Revert \"Reland \"[lldb][DWARFASTParserClang] Attach linkage name to ctors/dtors if missing\"\"\n8a57748804bd Revert \"[lldb][Test][NFC] TestExternalCtorDtorLookup: add more instantiations to test linkage name is correct\"\n9dd1168fe115 [docs] Speculative link syntax fix\nf1f62ed0c834 [ADT] Add llvm::rotl and llvm::rotr to bit.h\n31c42f8f3588 [libc++][doc] Updates format status page.\n756395f61b90 [clang] fix DR status in cxx_status.html\ndf5beebc98bb [Driver] Add --vfsoverlay flag\n176ee268f8df [flang] Allow for user-defined intrinsic operators (regression)\n39eb1c6145eb [CSSPGO][Preinliner] Set default value of sample-profile-inline-limit-max to 50000.\nb6259eca16f6 [Clang] Export CanPassInRegisters as a type trait\n0c412fed360f [RISCV][docs] Describe status of zicsr and zifencei\nd4021ed3d79d [Tooling/Inclusion] Add symbol mappings for `std::experimental::filesystem`\n6e10e6cb8fab Reland \"[lldb][DWARFASTParserClang] Correctly resolve imported namespaces during expression evaluation\"\n1232b9d47209 [RISCV] Fix -Wbraced-scalar-init warning. NFC\n171ffd499e16 [ORC] StaticLibraryDefinitionGenerator -- support in-memory universal binaries.\n201b2b5674e1 [libc++] Reorganize exception_guard\n1c9e6238fe2f [AMDGPU] Allow architected SGPRs for workgroup IDs\nb35d0a6834f8 [AMDGPU] Add switch to enable architected SGPRs.\n1edb04bc70f3 [extract_symbols.py] Adjust usage of nm again\n4198ff0cb999 [AArch64] Add NZCV Def for TLSDESC_CALLSEQ\nd44b31eca27c [DAGCombine] Allow DAGCombine to remove dead masked stores.\n58d246a27b8c [mlir][spirv] Drop outdated TODO comment\nfc02eeb24fc0 [RISCV] Add vendor-defined XTheadBb (basic bit-manipulation) extension\nb8c2ba138ef6 [NFC] Fix using-declspec.cpp test with non-C++17 compilers\n00a5ae12448e [mlir][bufferization] Better propagation of bufferizesToMemoryWrite through regions\n95526930da6c [flang] Fix new assertion failure\nbbff77a14ef2 Revert \"[libc++] Remove _LIBCPP_CONSTEVAL\"\n04a2baf58f23 [RISCV] Add vendor-defined XTHeadBs (single-bit) extension\n676bca0b6f0d [libc][NFC] Fix typo in header guards\n5a5f3de6ee62 [RISCV] edit document of Zcb to match the Implementation\n2e47aafb02f3 [PowerPC] Fix float materialization patterns.\n6a6c527ee287 [X86][FP16] Combine two steps conversions into direct conversion\n388d679c1dfa Recommit [YAML IO] Check that mapping doesn't contain duplicating keys\nd904ee3d479a [flang] Handle correctly optional intrinsic scalar to unlimited polymorphic optional\n877859a09bda [clang] Handle __declspec() attributes in using\na01edb169bb0 [flang] Fix output type when emboxing intrinsic type to unlimited polymorphic box\ncc4fb5837647 [mlir] support complex type in DenseElementsAttr::get.\ne9eaee9da196 [AArch64] Reassociate sub(x, add(m1, m2)) to sub(sub(x, m1), m2)\naf3c25dc3d87 [VPlan] Fix iterator invalidation in adjustFixedOrderRecurrences.\n580109025801 [libc++] Fix bug in allocate_shared_for_overwrite\n7eec2f2f218c [flang] Avoid infinite recursion in common block check\n87cc95a904e0 [libc++] Implement P2136R3 std::invoke_r\nafe9b0ba87b7 [Test][lldb] Fix YAML mapping keys duplication. NFC.\nd3b0fba6084d Revert rG0b0a38a7a229b70d7261771ba0e702843bd34e97 : \"[X86] combineX86ShufflesRecursively - don't widen shuffle subvector inputs\"\nb838b6287617 [mlir][MemRef][Transform] Don't apply multibuffer on \"useless\" allocs\n5d3c58829d28 [gn] port c4f7cc867299 (CoroTests)\n9f650ae779b4 [Libomptarget] Remove dependency on the DeviceRTL from the GPU plugins\n3c160d3051dc [lldb][Test][NFC] TestExternalCtorDtorLookup: add more instantiations to test linkage name is correct\n9e3010ad992d [AArch64] Fix LSE2/LSE128/RCPC3 precedence\ne698c5950430 [libc++] Granularize <type_traits> includes in <algorithm>\ne3515ba3816b Reapply \"[AMDGPU] Modify adjustInliningThreshold to also consider the cost of passing function arguments through the stack\"\n8b28500f60b7 [mlir][MemRef][TransformOps] Fix error reporting for multibuffer\n4c273cd07115 [DWARFLinker] Refactor cloneAddressAttribute().\n30f515a9101d [libc] Fix LIBC_LOOP_NOUNROLL being a noop\nc4f7cc867299 [Coroutines] Modify CoroFrame materializable into a callback\n3e51af9b5b3a [Coroutines] Improve rematerialization stage\n35106ad1009f [Coroutines] Presubmit test for more coro remats\n8f104a3f9ae2 [ARM] O3-pipeline fix\n5922b886350c [flang] RFC: -fstack-arrays\n2feafd059e9f [flang][hlfir] lower hlfir.sum into fir runtime call\n9facbb694250 [flang] lower sum intrinsic to hlfir.sum operation\n3ad26060e4bc [flang] add hlfir.sum operation\n7c4e45ec7d6d [mlir][SCFToOpenMP] Add pass option to emit LLVM opaque pointers\n4a2d4588a041 [mlir][Vector] add pass option to `convert-vector-to-llvm` to emit opaque pointers\nd5ea1b22cba3 [flang] use mlir::LoopLikeOpInterface::blockIsInLoop\ne6ec76c647aa [LLDB] Apply FixCodeAddress to all forms of address arguments\na9329a96ada3 Adjust #pragma warning so GCC is not unhappy\n5a028cc8ffa5 [mlir][LinAlgTransformOps][NFC] Use emitSilenceableError\n2a58be423963 [HardwareLoops] NewPM support.\nc5e1000b2915 Add build for Windows on Arm in packaging script\nfdd18e866b05 [llvm][TableGen][Jupyter] Show llvm-tblgen not found error in notebook\n24ecd9984235 [NFC] Set C++20 Named Modules for CodeGen in ASTContext in the early place\n19659b5f0dd1 [clangd] Drop includes from disabled PP regions in preamble patch\nfae01d175a29 [clangd] Fix bugs in main-file include patching for stale preambles\nf79a5fb9df42 [Test][SCEV] Add a test where the trip count can't be calculated\n7f249e45eca4 [milr][llvm] Add remaining loop metadata support\nfff762d674c3 Revert \"[CMake] Remove custom ccache CMake logic\"\n240c6f264399 [mlir][llvm] Improve LoadOp and StoreOp import.\n0fad18c44a14 [CMake] Remove custom ccache CMake logic\nae55f1cf9c10 [gn build] Port b7b28c6cfe04\nb7b28c6cfe04 [clang-tidy][libc] Add an inline function checker for the libc project.\n2bc095037eb6 [AMDGPU] Use llvm::bit_cast (NFC)\n92716a42a6aa [llvm-debuginfo-analyzer] LLVM 16.0.0-rc1 Failing test on osx-64.\nb49b429fde3a [llvm] Deprecate PowerOf2Floor and ByteSwap_{16,32,64}\n9c401687eb46 [x86] Move combineAddOrSubToADCOrSBB within the source file (NFC)\ne0e329609858 [X86] Precommit tests for D143838\n64287d69827c Recommit [C++20] [Modules] [ClangScanDeps] Enable to print make-style dependency file within P1689 format (4/4)\n212d905643bd Recommit [C++20] [Modules] [ClangScanDeps] Allow clang-scan-deps to without specified compilation database in P1689 (3/4)\neb70b38f838f Recommit [C++20] [Modules] [ClangScanDeps] Add ClangScanDeps support for C++20 Named Modules in P1689 format (2/4)\n2e4499e749c0 [flang] Handle forward references to modules\nff5c00d4ffc8 [X86][FP16] Add tests to show suboptimal codegen, NFC\n9f8ee610beb1 [flang] Warn on overflow folding DIM()\naa128bb21ee3 [flang] Catch misuse of a procedure designator as an output item\n57751e60e34e [gn build] Port 2a06757a200c\n2a06757a200c [libc++][spaceship] Implement `lexicographical_compare_three_way`\n2e6430666caf [LV] Update recipe builder functions to pass VPlan directly (NFC).\naf03616f46a1 [Flang][OpenMP][NFC] Remove usage of else after return\n15cb5ebed7a4 [Support] Use llvm::popcount (NFC)\nbe2fc577c389 [ORC] Add MachOPlatform::Create overload -- Pass ORC runtime as def generator.\naca9016bcde0 [flang] Fix crash on SELECT RANK\nec116ea684b4 [llvm] Deprecate llvm::count{Leading,Trailing}{Zeros,Ones} and llvm::countPopulation\nbb00fb66ba11 [libc++][NFC] Fix formatting in ranges status page\n594700c12247 [flang] Warn about construct names that are not distinct in the inclusive scope\n129eb5bcab91 [lldb] Add the ability to provide a message to a progress event update\n19c1682b6a4c [X86] combineConcatVectorOps - concatenate 512-bit VPERMILPS nodes.\n6eb66890e473 [X86] Add some basic matrix multiplication test coverage\n10d8b3054a72 [Flang][OpenMP][NFC] Correct a few instances of variable naming\n9f2014269ad8 [AArch64] Regenerate and extend zip1 tests. NFC\nfaf5616e110c BlockFrequencyInfoImpl.cpp - add missing closing namespace comment. NFC\nd38fcb421657 BlockFrequencyInfoImpl.h - use auto* for pointer types. NFC.\n51007cfa456f BlockFrequency.h - add missing closing namespace comment. NFC\nfe655717bff1 [flang] Support polymorphic inputs for the TRANSPOSE intrinsic\n1bb95a3a99cb [X86] combinePredicateReduction - attempt to fold subvector all_of(icmp_eq()) / any_of(icmp_ne()) to integers\n8bb98b571547 [Clang] Add the list of approved (Issaquah) C++ papers to the status page\n738370ae0e7f DemandedBits.cpp - use auto* when initializing from cast<>. NFC.\n41328d7c0e6e RegisterPressure.h - consistently initialize all pointer fields. NFC.\n1300a4fdae35 Revert rG23cb32c6d5bda0919cc1ef129917ceb2dbf1b1b8 \"[X86] combineX86ShufflesRecursively - treat ISD::TRUNCATE as faux shuffle\"\n7717e1114ad3 Revert \"[AArch64] Reassociate sub(x, add(m1, m2)) to sub(sub(x, m1), m2)\"\nf48f17871792 [InstCombine] canonicalize cmp+select as smin/smax\n14411adc3dce [InstCombine] add tests for disguised smin/smax; NFC\nc697119dafce [bazel][libc] Add a few more missing dependency that show up when parsing headers\nbb5f79158b71 llvm-tblgen: Apply IWYU in some files\n2d570bab4f99 CodeGenTarget.cpp: Reformat.\n0e18b5feaaba LLVMFuzzerCLI: [CMake] Prune the last PARTIAL_SOURCES_INTENDED to cover all sources.\n36adb82c251d LLVMProcessSources.cmake: Improve PARTIAL_SOURCES_INTENDED.\n19128792e2aa Reland \"[lldb][DWARFASTParserClang] Attach linkage name to ctors/dtors if missing\"\nfebe740b2c8f [test] Remove occurences of br undef in Transform/Util tests [NFC]\n069dd8768a6a Revert \"[C++20] [Modules] [ClangScanDeps] Add ClangScanDeps support for C++20 Named Modules in P1689 format (2/4)\"\nf8b5003cb3f9 Revert \"[C++20] [Modules] [ClangScanDeps] Allow clang-scan-deps to without specified compilation database in P1689 (3/4)\"\n502e357dc77c Revert \"[ClangScanDeps] Add UNSUPPORTED: system-windows to test P1689.cppm\"\n08f31b8fa85c [docs] Make consistent between MLIR tutorial doc and example code\nc9a7b92a23bb [AArch64] Consider tiny code model in emitLoadFromConstantPool.\n6a75aec09098 [Clang][perf-training] Remove trailing whitespace in perf-helper\ndf3b703a4c17 [AArch64] Use llvm::countr_{zero,one} (NFC)\n6d90c590b7f5 [JITLink] Don't initialize local ArrayRefs with initializer lists.\nc8ad1de4f068 [RISCV] Remove dead code from RISCVDAGToDAGISel::selectVSETVLI. NFC\n4afb1ee7bc0e Specify target triple for bb-prefix-dump.ll\n86cbf3d5f8a2 [JITLink] Add explicit conversion to silence warnings / errors on bots.\n01d68b13f52d [libcxx][ranges] mark new join view tests unsupported without experimental flag\n7e772e12d10e [RISCV] Fix mistake in comment. NFC\n10b5fec25638 [JITLink][ORC] Add LinkGraph::allocateCString method.\na38a4654ce4b [libc++] fix `shared_ptr`'s incorrect constraints\n23cb32c6d5bd [X86] combineX86ShufflesRecursively - treat ISD::TRUNCATE as faux shuffle\nd05f889535ab [libc++] Enable radability-identifier-naming for local variables and fix any problems\ncc236b64d11d [gn build] Port 3d4e9d5eb0f7\n9eccc6cce07b [JITLink] Add a predicate to test for C-string blocks.\n3d4e9d5eb0f7 [ORC] Move ORC-specific object format details into OrcShared.\nf00d101b8e32 llvm/utils/TableGen/CodeGenIntrinsics.h: Fix a comment line (since 2006!)\nda876a157d79 [libc++][NFC] Reorganize the std::pair constructor tests to be more consistently named\n2e08e431cc18 LLVMTableGenGlobalISel: Provide `INTERFACE_INCLUDE_DIRECTORIES`\n4537bda929bd [libc++][NFC] Change some std::pair tests from .compile.fail.cpp to .verify.cpp\naaef3b82f4f0 [libc++] Remove _LIBCPP_CONSTEVAL\ne3eb61a8cd61 [libc++][NFC] Fix leftover #endif comments\nb48880f39f96 [libc++][NFC] Use using instead of typedef in pair.h\nab17e1b76cf7 [libc++][NFC] Always define __non_trivially_copyable_base in pair.h\na98936d5a698 [libc++][NFC] Use std:: instead of _VSTD:: in pair.h\n9994340a49ba [libc++][NFC] Use >= 23 instead of > 20 in pair.h\n1d6117c8c4d2 [libc++][NFC] Use std:: instead of _VSTD:: in construct_at.h\nf543614ce641 [libc] Update dependency for __support_fputil_nearest_integer in bazel overlay.\n4c2ad195f8c9 [libc++][ranges] move all range iterators back in class\n3b059cd25b8c [libcxx][ranges] revert join_view::iterator and sentinel to be in-class\nc586b81347cb [X86][Win64] Precommit test for D143812\na55b35dbee6d [X86] combineVectorInsert - pull out Vec/Scl/Idx operands. NFC.\n0b0a38a7a229 [X86] combineX86ShufflesRecursively - don't widen shuffle subvector inputs\n5dc34eb379f4 Reland \"[mlir][func] Use the generated pass options in func to llvm.\"\n5ba396011377 [MLGO] Disable BB Profile Dump Test on NVPTX\n09e0f48c0a40 [MLGO] Enable BB Profile Dump Test without TFLite\n39da46826da8 Revert \"[mlir][func] Use the generated pass options in func to llvm.\"\n771d9c05afc2 [mlir][func] Use the generated pass options in func to llvm.\n19c42f672f94 [DFAPacketizer] Move DefaultVLIWScheduler class declaration to header file\n5fc73b7502fb [clang] Add test for CWG1111\n22fb66eb94b6 [clang][NFC] Add another example to CWG952 test\n89ba737bcf34 [clang] Mark CWG2165 as N/A\n5eaaf8f18093 Revert \"[clang] Mark CWG2165 as N/A\"\nd0e24f0c97ec [clang] Mark CWG2165 as N/A\n4663d784ddee [libc] Update macros/optimization.h build dependency for CMake and Bazel.\na630b8eefb41 [libc][Obvious] Fix static method declarations for FEnv class on macOS.\ne9e43e31d3bd [libc] Fix the regex detecting architecture triplet for macOS.\nd8e9a1a12557 [CMake] Use `LLVM_ENABLE_ASSERTIONS` to enable assertions in `libc++`\n29fa21eb6129 [lldb] Fix passing None as an env variable in TestMultipleDebuggers\n294ca122956f Adapt TestCustomShell and TestMultipleDebuggers to run under ASAN\n0ac8dfd0587a [lldb] Add an SB API to get progress events as SBStructuredData\ndc6427d687c4 [mlir][sparse] implement lowering rules for sparse_tensor::unpack\n6dbca86d838c [mlir][sparse] introduce sparse_tensor::unpack operation\ne74bb3471fc4 [libc++] Remove unused std::function test\ne7ade78a8ceb [dfsan] Fix some build-libc-list.py lint issues\n9db037d542d9 [mlir][sparse] fixed pack op documentation and purity\ndac423bd5718 [SanitizerBinaryMetadata] Fix ignorelist test with -Assert\ne8a79dc3d8eb [flang] Do not print backtrace for most TODOs.\nd2cc2c5610ff Revert \"[lldb][DWARFASTParserClang] Attach linkage name to ctors/dtors if missing\"\nc46e15e1dec9 Revert \"[lldb][Test] TestExternalCtorDtorLookup.py: skip on Windows and dwo\"\n2979070f1b3a [libc++] Simplify non_default_alloc\n043550e33509 [Driver] Stop stack use after free\n9e57a5739d8b [bazel] Fix {clang,llvm}/unittests\n0751fc68b976 [libunwind] On Darwin, add a callback-based lookup scheme for JIT'd unwind info.\n89197b59f597 [openmp] Fix building z_Linux_asm.S for armv5t\n3de0bc4c3d02 [MLIR] Reintroduce shared attribute names in the LLVM dialect\ndb89896bbbd2 [InstCombine] Add tests for D143766. NFC\n811d11b064f7 [AMDGPU] Add GFX11 HW_REG_PERF_SNAPSHOT_*\na2dcd994a7f8 [mlir][tosa] Add TOSA f64 type support for cast op\ncd4ca2d7f991 [mlir] Port Conversion Passes to LLVM to use TableGen generated constructors and options\n3e57aa304f15 [llvm-driver] Reinvoke clang as described by llvm driver extra args\n1f173a0653e7 [llvm-driver] Pass extra arguments to tools\n34653a0a8a40 [Propeller] Change SHT_LLVM_BB_ADDR_MAP version to 2.\n8e13ec9eca1f [libc++] In tests, use `abort` to terminate upon an error.\n7ca3444fba73 AMDGPU: Use module flag to get code object version at IR level folow-up\n70acb3aab3a1 A slightly more concise AST dump :)\n83e84cdbe4bc [InstCombine] precommit tests for D143593\n81d0d2b2a068 [mlir][sparse] Sparse reduction in lex order no longer produces dense output\nae2d8b49713d [libc][math] Update exceptional cases for logf, log10f, log2f, log1pf.\n35188e02d1f2 [dfsan] Fix build-libc-list.py for Python 3 after D143701\na543d840ee0a Fix handling of -> calls for modernize-use-emplace\nf889d6f9d05b [lldb][Test] TestExternalCtorDtorLookup.py: skip on Windows and dwo\nc8b8d6baddf9 [Passes] Remove some legacy passes\n3a66446a9a0d [libc] add standalone strtoint/float fuzzers\n79a3803bb2cc [ClangScanDeps] Add UNSUPPORTED: system-windows to test P1689.cppm\ne7e577f68421 [clang-tidy] Clarify documention of `bugprone-unchecked-optional-access`.\n295f5fafcb55 [Assignment Tracking] Fix migrateDebuginfo in SROA\nc52255d26a23 [AArch64] Reassociate sub(x, add(m1, m2)) to sub(sub(x, m1), m2)\nd37a31cf237c [X86] Attempt to fix ubsan failure.\n185dbf9d6f00 [bazel] Port 81a79ee446\n1763c632544d [Attributor][NFCI] Use a set to track dependences\n86cce90e21c5 [Attributor][NFCI] Avoid AAIntraFnReachability updates if possible\na9557aacd1a9 [Attributor][NFCI] Use queries without exclusion set whenever possible\n294db31be748 [Attributor][FIX] Ensure we use the right set comparison\n76a19190269b [Attributor][NFC] Avoid unnecessary string operations\nbf9964fb138f [Attributor][NFCI] Create a AAIsDead for the function eagerly\n8bc0bee2f8ca [Attributor][NFCI] Avoid a temporary vector and exit early\n91e38bc76010 [libc++][NFC] Reorganize hash.h\nb296ddd91cb8 [lldb][DWARFASTParserClang] Attach linkage name to ctors/dtors if missing\nb8ef007fca1d Reland \"[llvm][dsymutil] Add DW_TAG_imported_declaration to accelerator table\"\n9497680067cc [ConstraintElim] Update getLastConstraint to return to last row. (NFC)\nff8742df9e65 [flang] Fixed selective TargetRewrite.\n81767f52f493 [mlir][OpenMP] Add support for using Opaque Pointers in the OpenMP Dialect\n2ca46421f85a [mlir][Async] Add option to LLVM lowering to use opaque pointers\n7da2d644e039 [clang] [extract-api] Don't crash for category in libclang APIs\n57606bb35619 [ConstraintElim] Improve debug test to show removed constraints (NFC).\n81a79ee446fe [mlir] Add function for checking if a block is inside a loop\naf39acda8873 [VectorCombine] fix insertion point of shuffles\n78f13ea093af [extract_symbols.py] Adjust how the output of nm is interpreted\na00f17d81efb [clang][dataflow] Convert nonnull pointer parameter to a reference.\nb87e53ee2ad1 Revert \"[mlgo] Fix test after D143624\"\n737e1cd161f3 [libc] Move likely/unlikely to the optimization header\n78056e2f2d95 [InstCombine] propagate FMF in exp2->ldexp fold\n3abea2b5447c [InstCombine] copy tail markings in exp2->ldexp fold\ne89180801cd2 [InstCombine] add 'tail' to exp2 call in test; NFC\n86bfeb906e3a Revert \"Inlining: Run the legacy AlwaysInliner before the regular inliner.\"\nc4a250ecea14 [AMDGPU][MC] Generate relative relocations for allocatable (more particularly, eh_frame) sections\nf1837c707478 [DebugInfo] Handle missed DW_FORM_addrx3 and DW_FORM_strx3 cases\n04f4c4cc59db [clangd] Move function body to out-of-line: unnamed class method incorrect moving\nfef08da4b75f [mlir][llvm] Store memory op metadata using op attributes.\n067a5c68845c [amdgpu-arch] Fix build of amdgpu-arch with CLANG_LINK_CLANG_DYLIB\nb252824e6e6e [clangd] fix wrong CalleeArgInfo in the hover\n08061a5f1db6 [gn build] Port 6470706bc0ed\na3060f0f37e3 [X86] combineConcatVectorOps - concatenate AVX512 vselect nodes. NFC.\n4a96893fc5ca [libc] Fix exp2f and prevent misuse of likely/unlikely\n065a8cf00812 [gn] port 6470706bc0e\n25d0f3c4d0d9 [Assignment Tracking] Fix fragment index error in getDerefOffsetInBytes\n4d7c879d33a2 [mlir][llvm] Adapt loop metadata to match llvm\n8470430107d0 [NFC][compiler-rt] Shorten comment\n1e658ad1728e [Workflow] Add Release Repo sync script\n8ccde9368f94 [CMake][compiler-rt] Support clang-cl in CompilerRTMockLLVMCMakeConfig\nb3477f579c86 [RISCV] Add tests for .attribute stack_align\n9dcd7195a21c [InstCombine] avoid crashing in pow->ldexp\n5cec69bb43bc [clang] Update Clang version from 16 to 17 in scan-build.1.\n62a0a1b9eea7 [InstCombine] avoid crashing in exp2->ldexp\nc2b7085d5c86 [InstCombine] add test for exp2->ldexp; NFC\n55c0719557a9 [InstCombine] auto-generate check lines in test file; NFC\nc4ce967e3437 ARM: skip debug instructions when matching jump-table patterns.\ndc700f1e4daf [mlir][bufferization] Restrict function boundary buffer. to func.call.\n1842b5885baa [bazel] Fix build and make all target respect layering_check\nd624b9217d35 [RISCV] Add precommit tests for D143646\nf0f8ae7596c4 [AMDGPU][AsmParser] Fix matching immediate literals.\n68adc028b42d [InstCombine][NFC] regenerate tests for simple_phi_condition.ll\nce2514a6dea7 [Test] Add complementary tests for OR analogous for those for AND\n393675dad0c0 [Test] Add test showing an opportunity to transform checks and hoist invariants\nbb8bd8c232e8 [SanitizerBinaryMetadata] Fix ignorelist test under Windows\nbaca3c150733 Move SIMD alignment calculation to LLVM Frontend\nc77c186a647b [LVI] Don't traverse uses when calculating range at use\n0737770c3e1d [LVI][CVP] Add test for miscompilation by CVP due to incorrect range returned by LVI\nd768bf994f50 [NFC][TargetParser] Replace uses of llvm/Support/Host.h\n4ad8f7a18957 [Assignment Tracking][mem2reg] Remove overly defensive assert\nbb059e85d61b [Assignment Tracking][SROA] Delete dbg.assigns linked to rewritten stores\n65f9719913ec Revert \"[C++20] [Modules] [ClangScanDeps] Enable to print make-style dependency file within P1689 format (4/4)\"\na674a12dd57e [WebAssembly] Additional patterns for pmin/pax\n9ec06f40d66e [flang][NFC] Clean up polymorphic-temp.f90\n421215b919d0 [SanitizerBinaryMetadata] Support ignore list\nc340956e4efc [NFC][Assignment Tracking] Remove lifetime intrinsics from some tests\nfaf029d9728f [Test][SCEV] Add tests where multiple assumes can be used to improve trip multiple\n09c52a49402c [bazel] Add missing dependency after 687f78210d0\n57edc61093d9 [NFC] convert compiler-rt/lib/dfsan/scripts/build-libc-list.py to python3 syntax\nb67b26acc2ab [libc][Obvious] Include MPFRWrapper and testutils only if tests are enabled.\n6eb13809fb6f [bazel] fix build for 6470706bc0ed\n14dedd9cf596 [Reland][LSR] Hoist IVInc to loop header if its all uses are in the loop header\nd9283e79d826 [libc] Run libc tests unconditionally, even if there are no source changes.\n2441c0730603 [mlir][bufferization] Support multiple leaves in EmptyTensorElimination\nf4ef08433fe7 [OPENMP][NFC] added loop bind to the support page\n79d2c26f89e1 [SimplifyIndVar][NFC] Refactor Binary Operator's flag strengthening\n288f688e294a [NFC] Add test to show that preprocess an import decl won't require to load it actually\n687f78210d07 [MLIR] Fold away divs and mods in affine ops with operand info\ndd380f9243de [NFC] Remove the unused parameter introduced in e135476\n92e904b9ce2d [flang][hlfir] Ramp-up support of implicit interface mismatches\nfc2c791e89cd [mlir][llvm] Fix TBAA verfication crash\n70924673af68 [RFC][GISel] Add a way to ignore COPY instructions in InstructionSelector\nd9a6fc82f56f [AMDGPU] Run unmerge …",
        "tree": {
          "url": "https://api.github.com/repos/Jahnav4977/mlir-mx/git/trees/6673480f178c18dcc743b1f61183a8eead4724a8",
          "sha": "6673480f178c18dcc743b1f61183a8eead4724a8"
        },
        "comment_count": 0
      },
      "author": {
        "login": "Lewuathe",
        "id": 1713047,
        "node_id": "MDQ6VXNlcjE3MTMwNDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1713047?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lewuathe",
        "html_url": "https://github.com/Lewuathe",
        "followers_url": "https://api.github.com/users/Lewuathe/followers",
        "following_url": "https://api.github.com/users/Lewuathe/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lewuathe/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lewuathe/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lewuathe/subscriptions",
        "organizations_url": "https://api.github.com/users/Lewuathe/orgs",
        "repos_url": "https://api.github.com/users/Lewuathe/repos",
        "events_url": "https://api.github.com/users/Lewuathe/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lewuathe/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "Lewuathe",
        "id": 1713047,
        "node_id": "MDQ6VXNlcjE3MTMwNDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1713047?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Lewuathe",
        "html_url": "https://github.com/Lewuathe",
        "followers_url": "https://api.github.com/users/Lewuathe/followers",
        "following_url": "https://api.github.com/users/Lewuathe/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lewuathe/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Lewuathe/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lewuathe/subscriptions",
        "organizations_url": "https://api.github.com/users/Lewuathe/orgs",
        "repos_url": "https://api.github.com/users/Lewuathe/repos",
        "events_url": "https://api.github.com/users/Lewuathe/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Lewuathe/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/Jahnav4977/mlir-mx/commits/59575d47b7b987c0f248b164547278a82ed0b456",
          "html_url": "https://github.com/Jahnav4977/mlir-mx/commit/59575d47b7b987c0f248b164547278a82ed0b456",
          "sha": "59575d47b7b987c0f248b164547278a82ed0b456"
        }
      ],
      "repository": {
        "id": 833435736,
        "node_id": "R_kgDOMa04WA",
        "name": "mlir-mx",
        "full_name": "Jahnav4977/mlir-mx",
        "private": false,
        "owner": {
          "login": "Jahnav4977",
          "id": 176465661,
          "node_id": "U_kgDOCoSm_Q",
          "avatar_url": "https://avatars.githubusercontent.com/u/176465661?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Jahnav4977",
          "html_url": "https://github.com/Jahnav4977",
          "followers_url": "https://api.github.com/users/Jahnav4977/followers",
          "following_url": "https://api.github.com/users/Jahnav4977/following{/other_user}",
          "gists_url": "https://api.github.com/users/Jahnav4977/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Jahnav4977/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Jahnav4977/subscriptions",
          "organizations_url": "https://api.github.com/users/Jahnav4977/orgs",
          "repos_url": "https://api.github.com/users/Jahnav4977/repos",
          "events_url": "https://api.github.com/users/Jahnav4977/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Jahnav4977/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/Jahnav4977/mlir-mx",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/Jahnav4977/mlir-mx",
        "forks_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/forks",
        "keys_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/teams",
        "hooks_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/hooks",
        "issue_events_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/issues/events{/number}",
        "events_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/events",
        "assignees_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/assignees{/user}",
        "branches_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/branches{/branch}",
        "tags_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/tags",
        "blobs_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/languages",
        "stargazers_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/stargazers",
        "contributors_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/contributors",
        "subscribers_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/subscribers",
        "subscription_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/subscription",
        "commits_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/contents/{+path}",
        "compare_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/merges",
        "archive_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/downloads",
        "issues_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/issues{/number}",
        "pulls_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/labels{/name}",
        "releases_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/releases{/id}",
        "deployments_url": "https://api.github.com/repos/Jahnav4977/mlir-mx/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/commits/bcb0ca86313fcab9b26a2c155a73fcb0044ea9c4",
      "sha": "bcb0ca86313fcab9b26a2c155a73fcb0044ea9c4",
      "node_id": "MDY6Q29tbWl0OTc2MjIzNjc6YmNiMGNhODYzMTNmY2FiOWIyNmEyYzE1NWE3M2ZjYjAwNDRlYTljNA==",
      "html_url": "https://github.com/freedomofpress/securedrop-workstation/commit/bcb0ca86313fcab9b26a2c155a73fcb0044ea9c4",
      "comments_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/commits/bcb0ca86313fcab9b26a2c155a73fcb0044ea9c4/comments",
      "commit": {
        "url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/git/commits/bcb0ca86313fcab9b26a2c155a73fcb0044ea9c4",
        "author": {
          "date": "2020-09-10T17:00:20.000-07:00",
          "name": "Conor Schaefer",
          "email": "conor@freedom.press"
        },
        "committer": {
          "date": "2020-10-27T12:42:23.000-07:00",
          "name": "Conor Schaefer",
          "email": "conor@freedom.press"
        },
        "message": "Uses \"large\" & \"small\" templates for appropriate VMs\n\nWith this change, all SDW VMs are using the new consolidated small/large\ntemplates.\n\nReuses salt state files in top file\n\nThe new small & large templates don't need to be configured in their own\nstate files, we can just add references to the top file to assign the\nold states per vm and consolidate them.\n\nRemoves unconsolidated templates from config\nDon't bother to create them if we're not planning on using them.\nUpdates make-dev target to use new consolidated templates\n\nsd-gpg: wait for consolidated templates\n\nThe consolidated templates spike was handled in a different SLS file,\nwhich sd-gpg wasn't depending on it. That makes for a race, so let's\nupdate the dependency list to ensure proper ordering.\n\nRemoved old templates and updated tests.\n\nRemoved definitions for sd-{app,log,proxy}-buster-template VMs.\nAdded back dom0/mimeapps.list, as it's used by config tests.\nUpdated tests to refer to new templates.\nUpdated logging setup to ensure correct config present on non sd-log VMs\n\nConsolidates templates via handle-upgrade script\n\nThe \"securedrop-handle-upgrade\" script was added in order to migrate\nfrom Stretch-based to Buster-based templates. With some small changes to\nthe expected template pattern, we can leverage the same script to handle\nconsolidating the templates.\n\nThis only handles *creation* of the VMs, it doesn't sort out the apt\npackages and config logic specific to each Template/App combination.\nAdditional logic will need to be added to the updater to support\nhands-off consolidation.\n\nUses new pkg securedrop-workstation-viewer\n\nSupersedes the securedrop-workstation-sd-svs-disp package, to make the\ntransition to consolidated templates a bit easier, by avoiding dpkg\nconflicts altogether.\n\nTests for securedrop-workstation-svs-disp absence\n\nThe package \"securedrop-workstation-svs-disp\" has been superseded by\n\"securedrop-workstation-viewer\", so in testing for presence of one,\nensure the absence of the other.\n\nUpdates the config tests to permit testing package absence; before it\nwas showing a confusing stack trace if package was missing (so error\nrather than failure).\n\nForces template setting on sd-log\n\nUsing \"prefs\" rather than \"present\" so that the value is updated, not\nmerely set at VM creation time.\n\nSets default mimetype handler for sd-proxy\n\nUses the new sd-mime-handling state and applies it to sd-proxy, so that\nsymlinks for mimetypes are handled appropriately post-template-\nconsolidation. Requires packaging changes that are for now only in a\nfeature branch on the dev packages repo, served via apt-test.\n\nIncludes a small fix to ensure that the files in private volume are\nowned by normal user, not root.\n\nRemoves unused sd-proxy files\n\nThe do-not-open here files are left over from a prototype of the\nworkstation, no longer required.\n\nTests sd-proxy: use open-in-dvm for mimetypes\n\nWe've ditched the do-not-open-here logic, so sd-proxy should now default\nto using open-in-dvm for all filetypes. The config tests now reflect\nthis. Copy/pasted from the sd-app tests, didn't bother to refactor to\nmake it DRY.\n\nFix mimetype private volume perms\n\nUsing \"mode\" and \"makedirs\" together for a symlink led to a broken\nconfig: Salt was creating the parent directories with mode 644, so they\nweren't traversable, so the mimeapps.list file couldn't be read by\nnormal user. Fixed.\n\nHandle upgrade script: remove old templates\n\nLeverages the \"remove\" subcommand for the securedrop-handle-upgrade\nscript to purge the old, non-consolidated TemplateVMs after migrating.\n\nMoves sd-proxy config to private volume\n\nRequires package update to securedrop-proxy, so that the RPC config at\n/etc/qubes-rpc/securedrop.Proxy references the new filepath.\nIncludes a new test for that file, since we weren't explicitly examining\nits contents before.\n\nRemoves legacy sd-proxy config file\n\nIt shouldn't ever be present post-consolidated, given that the newly\ncreated VM never had the /etc/ path configured, but adding anyway as a\ndefensive measure, and also to get the tests passing sooner.\n\nMoves consolidated templates into single state\n\nWe originally had the consolidated templates in their own salt state\nfile, to aid in development, so we could target just that one component.\nFolding into the pre-existing state file for the base template now, and\ncleaning up the extra references, mostly to minimize the diff and aid in\nreview.",
        "tree": {
          "url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/git/trees/f5f29b60515b3cdc9ee07c84859fa7e76a1d9b96",
          "sha": "f5f29b60515b3cdc9ee07c84859fa7e76a1d9b96"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/commits/9f8cf7ce49348cf2cc5b815a953fe9c35b136c29",
          "html_url": "https://github.com/freedomofpress/securedrop-workstation/commit/9f8cf7ce49348cf2cc5b815a953fe9c35b136c29",
          "sha": "9f8cf7ce49348cf2cc5b815a953fe9c35b136c29"
        }
      ],
      "repository": {
        "id": 97622367,
        "node_id": "MDEwOlJlcG9zaXRvcnk5NzYyMjM2Nw==",
        "name": "securedrop-workstation",
        "full_name": "freedomofpress/securedrop-workstation",
        "private": false,
        "owner": {
          "login": "freedomofpress",
          "id": 5388147,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUzODgxNDc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5388147?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/freedomofpress",
          "html_url": "https://github.com/freedomofpress",
          "followers_url": "https://api.github.com/users/freedomofpress/followers",
          "following_url": "https://api.github.com/users/freedomofpress/following{/other_user}",
          "gists_url": "https://api.github.com/users/freedomofpress/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/freedomofpress/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/freedomofpress/subscriptions",
          "organizations_url": "https://api.github.com/users/freedomofpress/orgs",
          "repos_url": "https://api.github.com/users/freedomofpress/repos",
          "events_url": "https://api.github.com/users/freedomofpress/events{/privacy}",
          "received_events_url": "https://api.github.com/users/freedomofpress/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/freedomofpress/securedrop-workstation",
        "description": "Qubes-based SecureDrop Journalist Workstation environment for submission handling",
        "fork": false,
        "url": "https://api.github.com/repos/freedomofpress/securedrop-workstation",
        "forks_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/forks",
        "keys_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/teams",
        "hooks_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/hooks",
        "issue_events_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/issues/events{/number}",
        "events_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/events",
        "assignees_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/assignees{/user}",
        "branches_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/branches{/branch}",
        "tags_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/tags",
        "blobs_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/languages",
        "stargazers_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/stargazers",
        "contributors_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/contributors",
        "subscribers_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/subscribers",
        "subscription_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/subscription",
        "commits_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/contents/{+path}",
        "compare_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/merges",
        "archive_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/downloads",
        "issues_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/issues{/number}",
        "pulls_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/labels{/name}",
        "releases_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/releases{/id}",
        "deployments_url": "https://api.github.com/repos/freedomofpress/securedrop-workstation/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0OTA3NzQxNDA4Ojc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 907741408,
        "node_id": "R_kgDONhsI4A",
        "name": "realme_GT6-AndroidV-kernel-source-",
        "full_name": "realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-",
        "private": false,
        "owner": {
          "login": "realme-kernel-opensource",
          "id": 48056874,
          "node_id": "MDQ6VXNlcjQ4MDU2ODc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/48056874?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/realme-kernel-opensource",
          "html_url": "https://github.com/realme-kernel-opensource",
          "followers_url": "https://api.github.com/users/realme-kernel-opensource/followers",
          "following_url": "https://api.github.com/users/realme-kernel-opensource/following{/other_user}",
          "gists_url": "https://api.github.com/users/realme-kernel-opensource/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/realme-kernel-opensource/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/realme-kernel-opensource/subscriptions",
          "organizations_url": "https://api.github.com/users/realme-kernel-opensource/orgs",
          "repos_url": "https://api.github.com/users/realme-kernel-opensource/repos",
          "events_url": "https://api.github.com/users/realme-kernel-opensource/events{/privacy}",
          "received_events_url": "https://api.github.com/users/realme-kernel-opensource/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-",
        "forks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/forks",
        "keys_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/teams",
        "hooks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/hooks",
        "issue_events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/issues/events{/number}",
        "events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/events",
        "assignees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/assignees{/user}",
        "branches_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/branches{/branch}",
        "tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/tags",
        "blobs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/languages",
        "stargazers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/stargazers",
        "contributors_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/contributors",
        "subscribers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/subscribers",
        "subscription_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/subscription",
        "commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/contents/{+path}",
        "compare_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/merges",
        "archive_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/downloads",
        "issues_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/issues{/number}",
        "pulls_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/labels{/name}",
        "releases_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/releases{/id}",
        "deployments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/lqSky7/kernel_peridot/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0ODExOTI0ODg1Ojc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/lqSky7/kernel_peridot/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/lqSky7/kernel_peridot/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/lqSky7/kernel_peridot/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/lqSky7/kernel_peridot/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/lqSky7/kernel_peridot/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/lqSky7/kernel_peridot/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/lqSky7/kernel_peridot/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/lqSky7/kernel_peridot/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 811924885,
        "node_id": "R_kgDOMGT9lQ",
        "name": "kernel_peridot",
        "full_name": "lqSky7/kernel_peridot",
        "private": false,
        "owner": {
          "login": "lqSky7",
          "id": 74096181,
          "node_id": "MDQ6VXNlcjc0MDk2MTgx",
          "avatar_url": "https://avatars.githubusercontent.com/u/74096181?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/lqSky7",
          "html_url": "https://github.com/lqSky7",
          "followers_url": "https://api.github.com/users/lqSky7/followers",
          "following_url": "https://api.github.com/users/lqSky7/following{/other_user}",
          "gists_url": "https://api.github.com/users/lqSky7/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/lqSky7/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/lqSky7/subscriptions",
          "organizations_url": "https://api.github.com/users/lqSky7/orgs",
          "repos_url": "https://api.github.com/users/lqSky7/repos",
          "events_url": "https://api.github.com/users/lqSky7/events{/privacy}",
          "received_events_url": "https://api.github.com/users/lqSky7/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/lqSky7/kernel_peridot",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/lqSky7/kernel_peridot",
        "forks_url": "https://api.github.com/repos/lqSky7/kernel_peridot/forks",
        "keys_url": "https://api.github.com/repos/lqSky7/kernel_peridot/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/lqSky7/kernel_peridot/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/lqSky7/kernel_peridot/teams",
        "hooks_url": "https://api.github.com/repos/lqSky7/kernel_peridot/hooks",
        "issue_events_url": "https://api.github.com/repos/lqSky7/kernel_peridot/issues/events{/number}",
        "events_url": "https://api.github.com/repos/lqSky7/kernel_peridot/events",
        "assignees_url": "https://api.github.com/repos/lqSky7/kernel_peridot/assignees{/user}",
        "branches_url": "https://api.github.com/repos/lqSky7/kernel_peridot/branches{/branch}",
        "tags_url": "https://api.github.com/repos/lqSky7/kernel_peridot/tags",
        "blobs_url": "https://api.github.com/repos/lqSky7/kernel_peridot/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/lqSky7/kernel_peridot/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/lqSky7/kernel_peridot/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/lqSky7/kernel_peridot/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/lqSky7/kernel_peridot/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/lqSky7/kernel_peridot/languages",
        "stargazers_url": "https://api.github.com/repos/lqSky7/kernel_peridot/stargazers",
        "contributors_url": "https://api.github.com/repos/lqSky7/kernel_peridot/contributors",
        "subscribers_url": "https://api.github.com/repos/lqSky7/kernel_peridot/subscribers",
        "subscription_url": "https://api.github.com/repos/lqSky7/kernel_peridot/subscription",
        "commits_url": "https://api.github.com/repos/lqSky7/kernel_peridot/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/lqSky7/kernel_peridot/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/lqSky7/kernel_peridot/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/lqSky7/kernel_peridot/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/lqSky7/kernel_peridot/contents/{+path}",
        "compare_url": "https://api.github.com/repos/lqSky7/kernel_peridot/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/lqSky7/kernel_peridot/merges",
        "archive_url": "https://api.github.com/repos/lqSky7/kernel_peridot/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/lqSky7/kernel_peridot/downloads",
        "issues_url": "https://api.github.com/repos/lqSky7/kernel_peridot/issues{/number}",
        "pulls_url": "https://api.github.com/repos/lqSky7/kernel_peridot/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/lqSky7/kernel_peridot/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/lqSky7/kernel_peridot/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/lqSky7/kernel_peridot/labels{/name}",
        "releases_url": "https://api.github.com/repos/lqSky7/kernel_peridot/releases{/id}",
        "deployments_url": "https://api.github.com/repos/lqSky7/kernel_peridot/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0ODA2MjA4MzM1Ojc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/shekhawat2/android_kernel_xiaomi_peridot/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/shekhawat2/android_kernel_xiaomi_peridot/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/shekhawat2/android_kernel_xiaomi_peridot/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 806208335,
        "node_id": "R_kgDOMA3DTw",
        "name": "android_kernel_xiaomi_peridot",
        "full_name": "shekhawat2/android_kernel_xiaomi_peridot",
        "private": false,
        "owner": {
          "login": "shekhawat2",
          "id": 20217523,
          "node_id": "MDQ6VXNlcjIwMjE3NTIz",
          "avatar_url": "https://avatars.githubusercontent.com/u/20217523?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shekhawat2",
          "html_url": "https://github.com/shekhawat2",
          "followers_url": "https://api.github.com/users/shekhawat2/followers",
          "following_url": "https://api.github.com/users/shekhawat2/following{/other_user}",
          "gists_url": "https://api.github.com/users/shekhawat2/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shekhawat2/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shekhawat2/subscriptions",
          "organizations_url": "https://api.github.com/users/shekhawat2/orgs",
          "repos_url": "https://api.github.com/users/shekhawat2/repos",
          "events_url": "https://api.github.com/users/shekhawat2/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shekhawat2/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/shekhawat2/android_kernel_xiaomi_peridot",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot",
        "forks_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/forks",
        "keys_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/teams",
        "hooks_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/hooks",
        "issue_events_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/issues/events{/number}",
        "events_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/events",
        "assignees_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/assignees{/user}",
        "branches_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/branches{/branch}",
        "tags_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/tags",
        "blobs_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/languages",
        "stargazers_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/stargazers",
        "contributors_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/contributors",
        "subscribers_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/subscribers",
        "subscription_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/subscription",
        "commits_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/contents/{+path}",
        "compare_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/merges",
        "archive_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/downloads",
        "issues_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/issues{/number}",
        "pulls_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/labels{/name}",
        "releases_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/releases{/id}",
        "deployments_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0ODg3NjE5NTcwOjc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/OnePlusOSS/android_kernel_common_oneplus_sm8650/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/OnePlusOSS/android_kernel_common_oneplus_sm8650/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/OnePlusOSS/android_kernel_common_oneplus_sm8650/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 887619570,
        "node_id": "R_kgDONOf_8g",
        "name": "android_kernel_common_oneplus_sm8650",
        "full_name": "OnePlusOSS/android_kernel_common_oneplus_sm8650",
        "private": false,
        "owner": {
          "login": "OnePlusOSS",
          "id": 11922734,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjExOTIyNzM0",
          "avatar_url": "https://avatars.githubusercontent.com/u/11922734?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/OnePlusOSS",
          "html_url": "https://github.com/OnePlusOSS",
          "followers_url": "https://api.github.com/users/OnePlusOSS/followers",
          "following_url": "https://api.github.com/users/OnePlusOSS/following{/other_user}",
          "gists_url": "https://api.github.com/users/OnePlusOSS/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/OnePlusOSS/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/OnePlusOSS/subscriptions",
          "organizations_url": "https://api.github.com/users/OnePlusOSS/orgs",
          "repos_url": "https://api.github.com/users/OnePlusOSS/repos",
          "events_url": "https://api.github.com/users/OnePlusOSS/events{/privacy}",
          "received_events_url": "https://api.github.com/users/OnePlusOSS/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/OnePlusOSS/android_kernel_common_oneplus_sm8650",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650",
        "forks_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/forks",
        "keys_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/teams",
        "hooks_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/hooks",
        "issue_events_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/issues/events{/number}",
        "events_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/events",
        "assignees_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/assignees{/user}",
        "branches_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/branches{/branch}",
        "tags_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/tags",
        "blobs_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/languages",
        "stargazers_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/stargazers",
        "contributors_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/contributors",
        "subscribers_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/subscribers",
        "subscription_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/subscription",
        "commits_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/contents/{+path}",
        "compare_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/merges",
        "archive_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/downloads",
        "issues_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/issues{/number}",
        "pulls_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/labels{/name}",
        "releases_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/releases{/id}",
        "deployments_url": "https://api.github.com/repos/OnePlusOSS/android_kernel_common_oneplus_sm8650/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0OTIxNjMxNjQwOjc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 921631640,
        "node_id": "R_kgDONu77mA",
        "name": "realme_gt6-AndroidV-kernel-source",
        "full_name": "realme-kernel-opensource/realme_gt6-AndroidV-kernel-source",
        "private": false,
        "owner": {
          "login": "realme-kernel-opensource",
          "id": 48056874,
          "node_id": "MDQ6VXNlcjQ4MDU2ODc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/48056874?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/realme-kernel-opensource",
          "html_url": "https://github.com/realme-kernel-opensource",
          "followers_url": "https://api.github.com/users/realme-kernel-opensource/followers",
          "following_url": "https://api.github.com/users/realme-kernel-opensource/following{/other_user}",
          "gists_url": "https://api.github.com/users/realme-kernel-opensource/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/realme-kernel-opensource/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/realme-kernel-opensource/subscriptions",
          "organizations_url": "https://api.github.com/users/realme-kernel-opensource/orgs",
          "repos_url": "https://api.github.com/users/realme-kernel-opensource/repos",
          "events_url": "https://api.github.com/users/realme-kernel-opensource/events{/privacy}",
          "received_events_url": "https://api.github.com/users/realme-kernel-opensource/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source",
        "forks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/forks",
        "keys_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/teams",
        "hooks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/hooks",
        "issue_events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/issues/events{/number}",
        "events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/events",
        "assignees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/assignees{/user}",
        "branches_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/branches{/branch}",
        "tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/tags",
        "blobs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/languages",
        "stargazers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/stargazers",
        "contributors_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/contributors",
        "subscribers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/subscribers",
        "subscription_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/subscription",
        "commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/contents/{+path}",
        "compare_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/merges",
        "archive_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/downloads",
        "issues_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/issues{/number}",
        "pulls_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/labels{/name}",
        "releases_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/releases{/id}",
        "deployments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0NzY0OTU5Nzc3Ojc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 764959777,
        "node_id": "R_kgDOLZhcIQ",
        "name": "realme_GT5pro-AndroidU-kernel-source",
        "full_name": "realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source",
        "private": false,
        "owner": {
          "login": "realme-kernel-opensource",
          "id": 48056874,
          "node_id": "MDQ6VXNlcjQ4MDU2ODc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/48056874?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/realme-kernel-opensource",
          "html_url": "https://github.com/realme-kernel-opensource",
          "followers_url": "https://api.github.com/users/realme-kernel-opensource/followers",
          "following_url": "https://api.github.com/users/realme-kernel-opensource/following{/other_user}",
          "gists_url": "https://api.github.com/users/realme-kernel-opensource/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/realme-kernel-opensource/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/realme-kernel-opensource/subscriptions",
          "organizations_url": "https://api.github.com/users/realme-kernel-opensource/orgs",
          "repos_url": "https://api.github.com/users/realme-kernel-opensource/repos",
          "events_url": "https://api.github.com/users/realme-kernel-opensource/events{/privacy}",
          "received_events_url": "https://api.github.com/users/realme-kernel-opensource/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source",
        "forks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/forks",
        "keys_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/teams",
        "hooks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/hooks",
        "issue_events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/issues/events{/number}",
        "events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/events",
        "assignees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/assignees{/user}",
        "branches_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/branches{/branch}",
        "tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/tags",
        "blobs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/languages",
        "stargazers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/stargazers",
        "contributors_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/contributors",
        "subscribers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/subscribers",
        "subscription_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/subscription",
        "commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/contents/{+path}",
        "compare_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/merges",
        "archive_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/downloads",
        "issues_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/issues{/number}",
        "pulls_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/labels{/name}",
        "releases_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/releases{/id}",
        "deployments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0ODk5Mjk1MDI0Ojc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 899295024,
        "node_id": "R_kgDONZonMA",
        "name": "realme_GT5pro-AndroidV-kernel-source",
        "full_name": "realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source",
        "private": false,
        "owner": {
          "login": "realme-kernel-opensource",
          "id": 48056874,
          "node_id": "MDQ6VXNlcjQ4MDU2ODc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/48056874?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/realme-kernel-opensource",
          "html_url": "https://github.com/realme-kernel-opensource",
          "followers_url": "https://api.github.com/users/realme-kernel-opensource/followers",
          "following_url": "https://api.github.com/users/realme-kernel-opensource/following{/other_user}",
          "gists_url": "https://api.github.com/users/realme-kernel-opensource/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/realme-kernel-opensource/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/realme-kernel-opensource/subscriptions",
          "organizations_url": "https://api.github.com/users/realme-kernel-opensource/orgs",
          "repos_url": "https://api.github.com/users/realme-kernel-opensource/repos",
          "events_url": "https://api.github.com/users/realme-kernel-opensource/events{/privacy}",
          "received_events_url": "https://api.github.com/users/realme-kernel-opensource/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source",
        "forks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/forks",
        "keys_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/teams",
        "hooks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/hooks",
        "issue_events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/issues/events{/number}",
        "events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/events",
        "assignees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/assignees{/user}",
        "branches_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/branches{/branch}",
        "tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/tags",
        "blobs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/languages",
        "stargazers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/stargazers",
        "contributors_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/contributors",
        "subscribers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/subscribers",
        "subscription_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/subscription",
        "commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/contents/{+path}",
        "compare_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/merges",
        "archive_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/downloads",
        "issues_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/issues{/number}",
        "pulls_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/labels{/name}",
        "releases_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/releases{/id}",
        "deployments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0Nzc0MzIwNTcyOjc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/Mandi-Sa/micode-aurora-u-oss/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/Mandi-Sa/micode-aurora-u-oss/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/Mandi-Sa/micode-aurora-u-oss/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 774320572,
        "node_id": "R_kgDOLicxvA",
        "name": "micode-aurora-u-oss",
        "full_name": "Mandi-Sa/micode-aurora-u-oss",
        "private": false,
        "owner": {
          "login": "Mandi-Sa",
          "id": 22807524,
          "node_id": "MDQ6VXNlcjIyODA3NTI0",
          "avatar_url": "https://avatars.githubusercontent.com/u/22807524?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Mandi-Sa",
          "html_url": "https://github.com/Mandi-Sa",
          "followers_url": "https://api.github.com/users/Mandi-Sa/followers",
          "following_url": "https://api.github.com/users/Mandi-Sa/following{/other_user}",
          "gists_url": "https://api.github.com/users/Mandi-Sa/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Mandi-Sa/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Mandi-Sa/subscriptions",
          "organizations_url": "https://api.github.com/users/Mandi-Sa/orgs",
          "repos_url": "https://api.github.com/users/Mandi-Sa/repos",
          "events_url": "https://api.github.com/users/Mandi-Sa/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Mandi-Sa/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/Mandi-Sa/micode-aurora-u-oss",
        "description": "Xiaomi kernel source archive for Xiaomi 14 Ultra Android U (Has been removed by Xiaomi on March 19, 2024)",
        "fork": false,
        "url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss",
        "forks_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/forks",
        "keys_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/teams",
        "hooks_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/hooks",
        "issue_events_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/issues/events{/number}",
        "events_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/events",
        "assignees_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/assignees{/user}",
        "branches_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/branches{/branch}",
        "tags_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/tags",
        "blobs_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/languages",
        "stargazers_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/stargazers",
        "contributors_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/contributors",
        "subscribers_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/subscribers",
        "subscription_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/subscription",
        "commits_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/contents/{+path}",
        "compare_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/merges",
        "archive_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/downloads",
        "issues_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/issues{/number}",
        "pulls_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/labels{/name}",
        "releases_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/releases{/id}",
        "deployments_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0ODI4NTk5MDEwOjc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/raghavt20/android_kernel_xiaomi_sm8635/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/raghavt20/android_kernel_xiaomi_sm8635/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/raghavt20/android_kernel_xiaomi_sm8635/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 828599010,
        "node_id": "R_kgDOMWNq4g",
        "name": "android_kernel_xiaomi_sm8635",
        "full_name": "raghavt20/android_kernel_xiaomi_sm8635",
        "private": false,
        "owner": {
          "login": "raghavt20",
          "id": 63952537,
          "node_id": "MDQ6VXNlcjYzOTUyNTM3",
          "avatar_url": "https://avatars.githubusercontent.com/u/63952537?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/raghavt20",
          "html_url": "https://github.com/raghavt20",
          "followers_url": "https://api.github.com/users/raghavt20/followers",
          "following_url": "https://api.github.com/users/raghavt20/following{/other_user}",
          "gists_url": "https://api.github.com/users/raghavt20/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/raghavt20/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/raghavt20/subscriptions",
          "organizations_url": "https://api.github.com/users/raghavt20/orgs",
          "repos_url": "https://api.github.com/users/raghavt20/repos",
          "events_url": "https://api.github.com/users/raghavt20/events{/privacy}",
          "received_events_url": "https://api.github.com/users/raghavt20/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/raghavt20/android_kernel_xiaomi_sm8635",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635",
        "forks_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/forks",
        "keys_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/teams",
        "hooks_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/hooks",
        "issue_events_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/issues/events{/number}",
        "events_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/events",
        "assignees_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/assignees{/user}",
        "branches_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/branches{/branch}",
        "tags_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/tags",
        "blobs_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/languages",
        "stargazers_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/stargazers",
        "contributors_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/contributors",
        "subscribers_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/subscribers",
        "subscription_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/subscription",
        "commits_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/contents/{+path}",
        "compare_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/merges",
        "archive_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/downloads",
        "issues_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/issues{/number}",
        "pulls_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/labels{/name}",
        "releases_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/releases{/id}",
        "deployments_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0ODY1Mzg2NjE5Ojc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/grass2/Kernel_Realking_xiaomi_peridot/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/grass2/Kernel_Realking_xiaomi_peridot/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/grass2/Kernel_Realking_xiaomi_peridot/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 865386619,
        "node_id": "R_kgDOM5TAew",
        "name": "Kernel_Realking_xiaomi_peridot",
        "full_name": "grass2/Kernel_Realking_xiaomi_peridot",
        "private": false,
        "owner": {
          "login": "grass2",
          "id": 26361004,
          "node_id": "MDQ6VXNlcjI2MzYxMDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/26361004?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/grass2",
          "html_url": "https://github.com/grass2",
          "followers_url": "https://api.github.com/users/grass2/followers",
          "following_url": "https://api.github.com/users/grass2/following{/other_user}",
          "gists_url": "https://api.github.com/users/grass2/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/grass2/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/grass2/subscriptions",
          "organizations_url": "https://api.github.com/users/grass2/orgs",
          "repos_url": "https://api.github.com/users/grass2/repos",
          "events_url": "https://api.github.com/users/grass2/events{/privacy}",
          "received_events_url": "https://api.github.com/users/grass2/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/grass2/Kernel_Realking_xiaomi_peridot",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot",
        "forks_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/forks",
        "keys_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/teams",
        "hooks_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/hooks",
        "issue_events_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/issues/events{/number}",
        "events_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/events",
        "assignees_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/assignees{/user}",
        "branches_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/branches{/branch}",
        "tags_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/tags",
        "blobs_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/languages",
        "stargazers_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/stargazers",
        "contributors_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/contributors",
        "subscribers_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/subscribers",
        "subscription_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/subscription",
        "commits_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/contents/{+path}",
        "compare_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/merges",
        "archive_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/downloads",
        "issues_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/issues{/number}",
        "pulls_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/labels{/name}",
        "releases_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/releases{/id}",
        "deployments_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0NzY2OTA5MjY5Ojc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/oppo-source/android_kernel_oppo_sm8650/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/oppo-source/android_kernel_oppo_sm8650/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/oppo-source/android_kernel_oppo_sm8650/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 766909269,
        "node_id": "R_kgDOLbYbVQ",
        "name": "android_kernel_oppo_sm8650",
        "full_name": "oppo-source/android_kernel_oppo_sm8650",
        "private": false,
        "owner": {
          "login": "oppo-source",
          "id": 3840059,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM4NDAwNTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3840059?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/oppo-source",
          "html_url": "https://github.com/oppo-source",
          "followers_url": "https://api.github.com/users/oppo-source/followers",
          "following_url": "https://api.github.com/users/oppo-source/following{/other_user}",
          "gists_url": "https://api.github.com/users/oppo-source/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/oppo-source/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/oppo-source/subscriptions",
          "organizations_url": "https://api.github.com/users/oppo-source/orgs",
          "repos_url": "https://api.github.com/users/oppo-source/repos",
          "events_url": "https://api.github.com/users/oppo-source/events{/privacy}",
          "received_events_url": "https://api.github.com/users/oppo-source/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/oppo-source/android_kernel_oppo_sm8650",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650",
        "forks_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/forks",
        "keys_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/teams",
        "hooks_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/hooks",
        "issue_events_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/issues/events{/number}",
        "events_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/events",
        "assignees_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/assignees{/user}",
        "branches_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/branches{/branch}",
        "tags_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/tags",
        "blobs_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/languages",
        "stargazers_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/stargazers",
        "contributors_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/contributors",
        "subscribers_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/subscribers",
        "subscription_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/subscription",
        "commits_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/contents/{+path}",
        "compare_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/merges",
        "archive_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/downloads",
        "issues_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/issues{/number}",
        "pulls_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/labels{/name}",
        "releases_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/releases{/id}",
        "deployments_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0ODYwMzc4MDkwOjc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 860378090,
        "node_id": "R_kgDOM0hT6g",
        "name": "realmeGT6-AndroidU-kernel-source",
        "full_name": "realme-kernel-opensource/realmeGT6-AndroidU-kernel-source",
        "private": false,
        "owner": {
          "login": "realme-kernel-opensource",
          "id": 48056874,
          "node_id": "MDQ6VXNlcjQ4MDU2ODc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/48056874?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/realme-kernel-opensource",
          "html_url": "https://github.com/realme-kernel-opensource",
          "followers_url": "https://api.github.com/users/realme-kernel-opensource/followers",
          "following_url": "https://api.github.com/users/realme-kernel-opensource/following{/other_user}",
          "gists_url": "https://api.github.com/users/realme-kernel-opensource/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/realme-kernel-opensource/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/realme-kernel-opensource/subscriptions",
          "organizations_url": "https://api.github.com/users/realme-kernel-opensource/orgs",
          "repos_url": "https://api.github.com/users/realme-kernel-opensource/repos",
          "events_url": "https://api.github.com/users/realme-kernel-opensource/events{/privacy}",
          "received_events_url": "https://api.github.com/users/realme-kernel-opensource/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source",
        "forks_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/forks",
        "keys_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/teams",
        "hooks_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/hooks",
        "issue_events_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/issues/events{/number}",
        "events_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/events",
        "assignees_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/assignees{/user}",
        "branches_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/branches{/branch}",
        "tags_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/tags",
        "blobs_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/languages",
        "stargazers_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/stargazers",
        "contributors_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/contributors",
        "subscribers_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/subscribers",
        "subscription_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/subscription",
        "commits_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/contents/{+path}",
        "compare_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/merges",
        "archive_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/downloads",
        "issues_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/issues{/number}",
        "pulls_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/labels{/name}",
        "releases_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/releases{/id}",
        "deployments_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0ODkzOTM5ODIyOjc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/amackpro/android_kernel_xiaomi_sm8635/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/amackpro/android_kernel_xiaomi_sm8635/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/amackpro/android_kernel_xiaomi_sm8635/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 893939822,
        "node_id": "R_kgDONUhwbg",
        "name": "android_kernel_xiaomi_sm8635",
        "full_name": "amackpro/android_kernel_xiaomi_sm8635",
        "private": false,
        "owner": {
          "login": "amackpro",
          "id": 48667677,
          "node_id": "MDQ6VXNlcjQ4NjY3Njc3",
          "avatar_url": "https://avatars.githubusercontent.com/u/48667677?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/amackpro",
          "html_url": "https://github.com/amackpro",
          "followers_url": "https://api.github.com/users/amackpro/followers",
          "following_url": "https://api.github.com/users/amackpro/following{/other_user}",
          "gists_url": "https://api.github.com/users/amackpro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/amackpro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/amackpro/subscriptions",
          "organizations_url": "https://api.github.com/users/amackpro/orgs",
          "repos_url": "https://api.github.com/users/amackpro/repos",
          "events_url": "https://api.github.com/users/amackpro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/amackpro/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/amackpro/android_kernel_xiaomi_sm8635",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635",
        "forks_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/forks",
        "keys_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/teams",
        "hooks_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/hooks",
        "issue_events_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/issues/events{/number}",
        "events_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/events",
        "assignees_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/assignees{/user}",
        "branches_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/branches{/branch}",
        "tags_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/tags",
        "blobs_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/languages",
        "stargazers_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/stargazers",
        "contributors_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/contributors",
        "subscribers_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/subscribers",
        "subscription_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/subscription",
        "commits_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/contents/{+path}",
        "compare_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/merges",
        "archive_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/downloads",
        "issues_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/issues{/number}",
        "pulls_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/labels{/name}",
        "releases_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/releases{/id}",
        "deployments_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0Nzg2Mzc4NDk1Ojc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/OnePlus-12-Development/android_kernel_oneplus_sm8650/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/OnePlus-12-Development/android_kernel_oneplus_sm8650/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/OnePlus-12-Development/android_kernel_oneplus_sm8650/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 786378495,
        "node_id": "R_kgDOLt8u_w",
        "name": "android_kernel_oneplus_sm8650",
        "full_name": "OnePlus-12-Development/android_kernel_oneplus_sm8650",
        "private": false,
        "owner": {
          "login": "OnePlus-12-Development",
          "id": 154954123,
          "node_id": "O_kgDOCTxpiw",
          "avatar_url": "https://avatars.githubusercontent.com/u/154954123?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/OnePlus-12-Development",
          "html_url": "https://github.com/OnePlus-12-Development",
          "followers_url": "https://api.github.com/users/OnePlus-12-Development/followers",
          "following_url": "https://api.github.com/users/OnePlus-12-Development/following{/other_user}",
          "gists_url": "https://api.github.com/users/OnePlus-12-Development/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/OnePlus-12-Development/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/OnePlus-12-Development/subscriptions",
          "organizations_url": "https://api.github.com/users/OnePlus-12-Development/orgs",
          "repos_url": "https://api.github.com/users/OnePlus-12-Development/repos",
          "events_url": "https://api.github.com/users/OnePlus-12-Development/events{/privacy}",
          "received_events_url": "https://api.github.com/users/OnePlus-12-Development/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/OnePlus-12-Development/android_kernel_oneplus_sm8650",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650",
        "forks_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/forks",
        "keys_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/teams",
        "hooks_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/hooks",
        "issue_events_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/issues/events{/number}",
        "events_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/events",
        "assignees_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/assignees{/user}",
        "branches_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/branches{/branch}",
        "tags_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/tags",
        "blobs_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/languages",
        "stargazers_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/stargazers",
        "contributors_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/contributors",
        "subscribers_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/subscribers",
        "subscription_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/subscription",
        "commits_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/contents/{+path}",
        "compare_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/merges",
        "archive_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/downloads",
        "issues_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/issues{/number}",
        "pulls_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/labels{/name}",
        "releases_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/releases{/id}",
        "deployments_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0ODM4Mjg0NTAyOjc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 838284502,
        "node_id": "R_kgDOMfc01g",
        "name": "kernel_platform_qcom-kernel",
        "full_name": "aospa-nubia-sm8650/kernel_platform_qcom-kernel",
        "private": false,
        "owner": {
          "login": "aospa-nubia-sm8650",
          "id": 172066341,
          "node_id": "O_kgDOCkGGJQ",
          "avatar_url": "https://avatars.githubusercontent.com/u/172066341?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/aospa-nubia-sm8650",
          "html_url": "https://github.com/aospa-nubia-sm8650",
          "followers_url": "https://api.github.com/users/aospa-nubia-sm8650/followers",
          "following_url": "https://api.github.com/users/aospa-nubia-sm8650/following{/other_user}",
          "gists_url": "https://api.github.com/users/aospa-nubia-sm8650/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/aospa-nubia-sm8650/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/aospa-nubia-sm8650/subscriptions",
          "organizations_url": "https://api.github.com/users/aospa-nubia-sm8650/orgs",
          "repos_url": "https://api.github.com/users/aospa-nubia-sm8650/repos",
          "events_url": "https://api.github.com/users/aospa-nubia-sm8650/events{/privacy}",
          "received_events_url": "https://api.github.com/users/aospa-nubia-sm8650/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/aospa-nubia-sm8650/kernel_platform_qcom-kernel",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel",
        "forks_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/forks",
        "keys_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/teams",
        "hooks_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/hooks",
        "issue_events_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/issues/events{/number}",
        "events_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/events",
        "assignees_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/assignees{/user}",
        "branches_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/branches{/branch}",
        "tags_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/tags",
        "blobs_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/languages",
        "stargazers_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/stargazers",
        "contributors_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/contributors",
        "subscribers_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/subscribers",
        "subscription_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/subscription",
        "commits_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/contents/{+path}",
        "compare_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/merges",
        "archive_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/downloads",
        "issues_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/issues{/number}",
        "pulls_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/labels{/name}",
        "releases_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/releases{/id}",
        "deployments_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0ODE0MDI2Njk2Ojc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 814026696,
        "node_id": "R_kgDOMIUPyA",
        "name": "realme_GTneo6_GTneo6SE-AndroidU-kernel-source",
        "full_name": "realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source",
        "private": false,
        "owner": {
          "login": "realme-kernel-opensource",
          "id": 48056874,
          "node_id": "MDQ6VXNlcjQ4MDU2ODc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/48056874?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/realme-kernel-opensource",
          "html_url": "https://github.com/realme-kernel-opensource",
          "followers_url": "https://api.github.com/users/realme-kernel-opensource/followers",
          "following_url": "https://api.github.com/users/realme-kernel-opensource/following{/other_user}",
          "gists_url": "https://api.github.com/users/realme-kernel-opensource/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/realme-kernel-opensource/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/realme-kernel-opensource/subscriptions",
          "organizations_url": "https://api.github.com/users/realme-kernel-opensource/orgs",
          "repos_url": "https://api.github.com/users/realme-kernel-opensource/repos",
          "events_url": "https://api.github.com/users/realme-kernel-opensource/events{/privacy}",
          "received_events_url": "https://api.github.com/users/realme-kernel-opensource/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source",
        "forks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/forks",
        "keys_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/teams",
        "hooks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/hooks",
        "issue_events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/issues/events{/number}",
        "events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/events",
        "assignees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/assignees{/user}",
        "branches_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/branches{/branch}",
        "tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/tags",
        "blobs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/languages",
        "stargazers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/stargazers",
        "contributors_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/contributors",
        "subscribers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/subscribers",
        "subscription_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/subscription",
        "commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/contents/{+path}",
        "compare_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/merges",
        "archive_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/downloads",
        "issues_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/issues{/number}",
        "pulls_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/labels{/name}",
        "releases_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/releases{/id}",
        "deployments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GTneo6_GTneo6SE-AndroidU-kernel-source/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0Nzg5MjU4ODY0Ojc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/ElectroPerf/kernel_platform_msm-kernel/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/ElectroPerf/kernel_platform_msm-kernel/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/ElectroPerf/kernel_platform_msm-kernel/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 789258864,
        "node_id": "R_kgDOLwsicA",
        "name": "kernel_platform_msm-kernel",
        "full_name": "ElectroPerf/kernel_platform_msm-kernel",
        "private": false,
        "owner": {
          "login": "ElectroPerf",
          "id": 76483474,
          "node_id": "MDQ6VXNlcjc2NDgzNDc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/76483474?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ElectroPerf",
          "html_url": "https://github.com/ElectroPerf",
          "followers_url": "https://api.github.com/users/ElectroPerf/followers",
          "following_url": "https://api.github.com/users/ElectroPerf/following{/other_user}",
          "gists_url": "https://api.github.com/users/ElectroPerf/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ElectroPerf/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ElectroPerf/subscriptions",
          "organizations_url": "https://api.github.com/users/ElectroPerf/orgs",
          "repos_url": "https://api.github.com/users/ElectroPerf/repos",
          "events_url": "https://api.github.com/users/ElectroPerf/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ElectroPerf/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/ElectroPerf/kernel_platform_msm-kernel",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel",
        "forks_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/forks",
        "keys_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/teams",
        "hooks_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/hooks",
        "issue_events_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/issues/events{/number}",
        "events_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/events",
        "assignees_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/assignees{/user}",
        "branches_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/branches{/branch}",
        "tags_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/tags",
        "blobs_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/languages",
        "stargazers_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/stargazers",
        "contributors_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/contributors",
        "subscribers_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/subscribers",
        "subscription_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/subscription",
        "commits_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/contents/{+path}",
        "compare_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/merges",
        "archive_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/downloads",
        "issues_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/issues{/number}",
        "pulls_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/labels{/name}",
        "releases_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/releases{/id}",
        "deployments_url": "https://api.github.com/repos/ElectroPerf/kernel_platform_msm-kernel/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0ODE4NjMwNzg4Ojc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/Mandi-Sa/micode-bsp-chenfeng-u-oss/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/Mandi-Sa/micode-bsp-chenfeng-u-oss/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/Mandi-Sa/micode-bsp-chenfeng-u-oss/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 818630788,
        "node_id": "R_kgDOMMtQhA",
        "name": "micode-bsp-chenfeng-u-oss",
        "full_name": "Mandi-Sa/micode-bsp-chenfeng-u-oss",
        "private": false,
        "owner": {
          "login": "Mandi-Sa",
          "id": 22807524,
          "node_id": "MDQ6VXNlcjIyODA3NTI0",
          "avatar_url": "https://avatars.githubusercontent.com/u/22807524?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Mandi-Sa",
          "html_url": "https://github.com/Mandi-Sa",
          "followers_url": "https://api.github.com/users/Mandi-Sa/followers",
          "following_url": "https://api.github.com/users/Mandi-Sa/following{/other_user}",
          "gists_url": "https://api.github.com/users/Mandi-Sa/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Mandi-Sa/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Mandi-Sa/subscriptions",
          "organizations_url": "https://api.github.com/users/Mandi-Sa/orgs",
          "repos_url": "https://api.github.com/users/Mandi-Sa/repos",
          "events_url": "https://api.github.com/users/Mandi-Sa/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Mandi-Sa/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/Mandi-Sa/micode-bsp-chenfeng-u-oss",
        "description": "Xiaomi kernel source archive for Xiaomi Civi 4 Pro Android U (Has been removed by Xiaomi on May 9, 2024)",
        "fork": false,
        "url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss",
        "forks_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/forks",
        "keys_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/teams",
        "hooks_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/hooks",
        "issue_events_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/issues/events{/number}",
        "events_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/events",
        "assignees_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/assignees{/user}",
        "branches_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/branches{/branch}",
        "tags_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/tags",
        "blobs_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/languages",
        "stargazers_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/stargazers",
        "contributors_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/contributors",
        "subscribers_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/subscribers",
        "subscription_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/subscription",
        "commits_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/contents/{+path}",
        "compare_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/merges",
        "archive_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/downloads",
        "issues_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/issues{/number}",
        "pulls_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/labels{/name}",
        "releases_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/releases{/id}",
        "deployments_url": "https://api.github.com/repos/Mandi-Sa/micode-bsp-chenfeng-u-oss/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0OTIxNjMwMjgyOjc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 921630282,
        "node_id": "R_kgDONu72Sg",
        "name": "realme_gtneo6-AndroidV-kernel-source",
        "full_name": "realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source",
        "private": false,
        "owner": {
          "login": "realme-kernel-opensource",
          "id": 48056874,
          "node_id": "MDQ6VXNlcjQ4MDU2ODc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/48056874?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/realme-kernel-opensource",
          "html_url": "https://github.com/realme-kernel-opensource",
          "followers_url": "https://api.github.com/users/realme-kernel-opensource/followers",
          "following_url": "https://api.github.com/users/realme-kernel-opensource/following{/other_user}",
          "gists_url": "https://api.github.com/users/realme-kernel-opensource/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/realme-kernel-opensource/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/realme-kernel-opensource/subscriptions",
          "organizations_url": "https://api.github.com/users/realme-kernel-opensource/orgs",
          "repos_url": "https://api.github.com/users/realme-kernel-opensource/repos",
          "events_url": "https://api.github.com/users/realme-kernel-opensource/events{/privacy}",
          "received_events_url": "https://api.github.com/users/realme-kernel-opensource/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source",
        "forks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/forks",
        "keys_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/teams",
        "hooks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/hooks",
        "issue_events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/issues/events{/number}",
        "events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/events",
        "assignees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/assignees{/user}",
        "branches_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/branches{/branch}",
        "tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/tags",
        "blobs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/languages",
        "stargazers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/stargazers",
        "contributors_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/contributors",
        "subscribers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/subscribers",
        "subscription_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/subscription",
        "commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/contents/{+path}",
        "compare_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/merges",
        "archive_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/downloads",
        "issues_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/issues{/number}",
        "pulls_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/labels{/name}",
        "releases_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/releases{/id}",
        "deployments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0ODkxNDA1NzUwOjc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/DY3413/android_kernel_qcom_sm8650/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/DY3413/android_kernel_qcom_sm8650/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/DY3413/android_kernel_qcom_sm8650/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 891405750,
        "node_id": "R_kgDONSHFtg",
        "name": "android_kernel_qcom_sm8650",
        "full_name": "DY3413/android_kernel_qcom_sm8650",
        "private": false,
        "owner": {
          "login": "DY3413",
          "id": 32991223,
          "node_id": "MDQ6VXNlcjMyOTkxMjIz",
          "avatar_url": "https://avatars.githubusercontent.com/u/32991223?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/DY3413",
          "html_url": "https://github.com/DY3413",
          "followers_url": "https://api.github.com/users/DY3413/followers",
          "following_url": "https://api.github.com/users/DY3413/following{/other_user}",
          "gists_url": "https://api.github.com/users/DY3413/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/DY3413/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/DY3413/subscriptions",
          "organizations_url": "https://api.github.com/users/DY3413/orgs",
          "repos_url": "https://api.github.com/users/DY3413/repos",
          "events_url": "https://api.github.com/users/DY3413/events{/privacy}",
          "received_events_url": "https://api.github.com/users/DY3413/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/DY3413/android_kernel_qcom_sm8650",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650",
        "forks_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/forks",
        "keys_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/teams",
        "hooks_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/hooks",
        "issue_events_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/issues/events{/number}",
        "events_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/events",
        "assignees_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/assignees{/user}",
        "branches_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/branches{/branch}",
        "tags_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/tags",
        "blobs_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/languages",
        "stargazers_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/stargazers",
        "contributors_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/contributors",
        "subscribers_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/subscribers",
        "subscription_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/subscription",
        "commits_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/contents/{+path}",
        "compare_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/merges",
        "archive_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/downloads",
        "issues_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/issues{/number}",
        "pulls_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/labels{/name}",
        "releases_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/releases{/id}",
        "deployments_url": "https://api.github.com/repos/DY3413/android_kernel_qcom_sm8650/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0OTMwMDY2NzU5Ojc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 930066759,
        "node_id": "R_kgDON2-xRw",
        "name": "realme_GT7pro-AndroidV-kernel-source",
        "full_name": "realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source",
        "private": false,
        "owner": {
          "login": "realme-kernel-opensource",
          "id": 48056874,
          "node_id": "MDQ6VXNlcjQ4MDU2ODc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/48056874?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/realme-kernel-opensource",
          "html_url": "https://github.com/realme-kernel-opensource",
          "followers_url": "https://api.github.com/users/realme-kernel-opensource/followers",
          "following_url": "https://api.github.com/users/realme-kernel-opensource/following{/other_user}",
          "gists_url": "https://api.github.com/users/realme-kernel-opensource/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/realme-kernel-opensource/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/realme-kernel-opensource/subscriptions",
          "organizations_url": "https://api.github.com/users/realme-kernel-opensource/orgs",
          "repos_url": "https://api.github.com/users/realme-kernel-opensource/repos",
          "events_url": "https://api.github.com/users/realme-kernel-opensource/events{/privacy}",
          "received_events_url": "https://api.github.com/users/realme-kernel-opensource/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source",
        "forks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/forks",
        "keys_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/teams",
        "hooks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/hooks",
        "issue_events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/issues/events{/number}",
        "events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/events",
        "assignees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/assignees{/user}",
        "branches_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/branches{/branch}",
        "tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/tags",
        "blobs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/languages",
        "stargazers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/stargazers",
        "contributors_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/contributors",
        "subscribers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/subscribers",
        "subscription_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/subscription",
        "commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/contents/{+path}",
        "compare_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/merges",
        "archive_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/downloads",
        "issues_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/issues{/number}",
        "pulls_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/labels{/name}",
        "releases_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/releases{/id}",
        "deployments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT7pro-AndroidV-kernel-source/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0OTI4MTYyMDA0Ojc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/oppo-source/android_kernel_oppo_sm6450/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/oppo-source/android_kernel_oppo_sm6450/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/oppo-source/android_kernel_oppo_sm6450/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 928162004,
        "node_id": "R_kgDON1Kg1A",
        "name": "android_kernel_oppo_sm6450",
        "full_name": "oppo-source/android_kernel_oppo_sm6450",
        "private": false,
        "owner": {
          "login": "oppo-source",
          "id": 3840059,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM4NDAwNTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3840059?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/oppo-source",
          "html_url": "https://github.com/oppo-source",
          "followers_url": "https://api.github.com/users/oppo-source/followers",
          "following_url": "https://api.github.com/users/oppo-source/following{/other_user}",
          "gists_url": "https://api.github.com/users/oppo-source/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/oppo-source/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/oppo-source/subscriptions",
          "organizations_url": "https://api.github.com/users/oppo-source/orgs",
          "repos_url": "https://api.github.com/users/oppo-source/repos",
          "events_url": "https://api.github.com/users/oppo-source/events{/privacy}",
          "received_events_url": "https://api.github.com/users/oppo-source/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/oppo-source/android_kernel_oppo_sm6450",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450",
        "forks_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/forks",
        "keys_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/teams",
        "hooks_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/hooks",
        "issue_events_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/issues/events{/number}",
        "events_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/events",
        "assignees_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/assignees{/user}",
        "branches_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/branches{/branch}",
        "tags_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/tags",
        "blobs_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/languages",
        "stargazers_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/stargazers",
        "contributors_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/contributors",
        "subscribers_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/subscribers",
        "subscription_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/subscription",
        "commits_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/contents/{+path}",
        "compare_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/merges",
        "archive_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/downloads",
        "issues_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/issues{/number}",
        "pulls_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/labels{/name}",
        "releases_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/releases{/id}",
        "deployments_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm6450/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "sha": "b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "node_id": "MDY6Q29tbWl0OTA3NzQxNDA4OmI4OWM0YWIyZjVjOGVlMzY3MzA3ODU3MzIzMDllOGJmZDQzNTZhNDQ=",
      "html_url": "https://github.com/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commit/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44/comments",
      "commit": {
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/git/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
        "author": {
          "date": "2022-06-09T22:55:03.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "committer": {
          "date": "2022-06-10T04:40:18.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "message": "Merge keystone/android-mainline-keystone-qcom-release.5.18.0 (019bc1f) into msm-pineapple\n\n* refs/heads/tmp-019bc1f:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update TSC sync…",
        "tree": {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/git/trees/c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f",
          "sha": "c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commits/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commit/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "sha": "fccc41b1ec75a533f7690b2843fa6da47023fb55"
        },
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commits/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commit/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "sha": "019bc1f65e9130bcb6f02a3a70971d843fde705d"
        }
      ],
      "repository": {
        "id": 907741408,
        "node_id": "R_kgDONhsI4A",
        "name": "realme_GT6-AndroidV-kernel-source-",
        "full_name": "realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-",
        "private": false,
        "owner": {
          "login": "realme-kernel-opensource",
          "id": 48056874,
          "node_id": "MDQ6VXNlcjQ4MDU2ODc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/48056874?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/realme-kernel-opensource",
          "html_url": "https://github.com/realme-kernel-opensource",
          "followers_url": "https://api.github.com/users/realme-kernel-opensource/followers",
          "following_url": "https://api.github.com/users/realme-kernel-opensource/following{/other_user}",
          "gists_url": "https://api.github.com/users/realme-kernel-opensource/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/realme-kernel-opensource/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/realme-kernel-opensource/subscriptions",
          "organizations_url": "https://api.github.com/users/realme-kernel-opensource/orgs",
          "repos_url": "https://api.github.com/users/realme-kernel-opensource/repos",
          "events_url": "https://api.github.com/users/realme-kernel-opensource/events{/privacy}",
          "received_events_url": "https://api.github.com/users/realme-kernel-opensource/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-",
        "forks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/forks",
        "keys_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/teams",
        "hooks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/hooks",
        "issue_events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/issues/events{/number}",
        "events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/events",
        "assignees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/assignees{/user}",
        "branches_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/branches{/branch}",
        "tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/tags",
        "blobs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/languages",
        "stargazers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/stargazers",
        "contributors_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/contributors",
        "subscribers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/subscribers",
        "subscription_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/subscription",
        "commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/contents/{+path}",
        "compare_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/merges",
        "archive_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/downloads",
        "issues_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/issues{/number}",
        "pulls_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/labels{/name}",
        "releases_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/releases{/id}",
        "deployments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT6-AndroidV-kernel-source-/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/lqSky7/kernel_peridot/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "sha": "b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "node_id": "MDY6Q29tbWl0ODExOTI0ODg1OmI4OWM0YWIyZjVjOGVlMzY3MzA3ODU3MzIzMDllOGJmZDQzNTZhNDQ=",
      "html_url": "https://github.com/lqSky7/kernel_peridot/commit/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "comments_url": "https://api.github.com/repos/lqSky7/kernel_peridot/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44/comments",
      "commit": {
        "url": "https://api.github.com/repos/lqSky7/kernel_peridot/git/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
        "author": {
          "date": "2022-06-09T22:55:03.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "committer": {
          "date": "2022-06-10T04:40:18.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "message": "Merge keystone/android-mainline-keystone-qcom-release.5.18.0 (019bc1f) into msm-pineapple\n\n* refs/heads/tmp-019bc1f:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update TSC sync…",
        "tree": {
          "url": "https://api.github.com/repos/lqSky7/kernel_peridot/git/trees/c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f",
          "sha": "c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/lqSky7/kernel_peridot/commits/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "html_url": "https://github.com/lqSky7/kernel_peridot/commit/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "sha": "fccc41b1ec75a533f7690b2843fa6da47023fb55"
        },
        {
          "url": "https://api.github.com/repos/lqSky7/kernel_peridot/commits/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "html_url": "https://github.com/lqSky7/kernel_peridot/commit/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "sha": "019bc1f65e9130bcb6f02a3a70971d843fde705d"
        }
      ],
      "repository": {
        "id": 811924885,
        "node_id": "R_kgDOMGT9lQ",
        "name": "kernel_peridot",
        "full_name": "lqSky7/kernel_peridot",
        "private": false,
        "owner": {
          "login": "lqSky7",
          "id": 74096181,
          "node_id": "MDQ6VXNlcjc0MDk2MTgx",
          "avatar_url": "https://avatars.githubusercontent.com/u/74096181?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/lqSky7",
          "html_url": "https://github.com/lqSky7",
          "followers_url": "https://api.github.com/users/lqSky7/followers",
          "following_url": "https://api.github.com/users/lqSky7/following{/other_user}",
          "gists_url": "https://api.github.com/users/lqSky7/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/lqSky7/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/lqSky7/subscriptions",
          "organizations_url": "https://api.github.com/users/lqSky7/orgs",
          "repos_url": "https://api.github.com/users/lqSky7/repos",
          "events_url": "https://api.github.com/users/lqSky7/events{/privacy}",
          "received_events_url": "https://api.github.com/users/lqSky7/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/lqSky7/kernel_peridot",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/lqSky7/kernel_peridot",
        "forks_url": "https://api.github.com/repos/lqSky7/kernel_peridot/forks",
        "keys_url": "https://api.github.com/repos/lqSky7/kernel_peridot/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/lqSky7/kernel_peridot/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/lqSky7/kernel_peridot/teams",
        "hooks_url": "https://api.github.com/repos/lqSky7/kernel_peridot/hooks",
        "issue_events_url": "https://api.github.com/repos/lqSky7/kernel_peridot/issues/events{/number}",
        "events_url": "https://api.github.com/repos/lqSky7/kernel_peridot/events",
        "assignees_url": "https://api.github.com/repos/lqSky7/kernel_peridot/assignees{/user}",
        "branches_url": "https://api.github.com/repos/lqSky7/kernel_peridot/branches{/branch}",
        "tags_url": "https://api.github.com/repos/lqSky7/kernel_peridot/tags",
        "blobs_url": "https://api.github.com/repos/lqSky7/kernel_peridot/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/lqSky7/kernel_peridot/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/lqSky7/kernel_peridot/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/lqSky7/kernel_peridot/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/lqSky7/kernel_peridot/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/lqSky7/kernel_peridot/languages",
        "stargazers_url": "https://api.github.com/repos/lqSky7/kernel_peridot/stargazers",
        "contributors_url": "https://api.github.com/repos/lqSky7/kernel_peridot/contributors",
        "subscribers_url": "https://api.github.com/repos/lqSky7/kernel_peridot/subscribers",
        "subscription_url": "https://api.github.com/repos/lqSky7/kernel_peridot/subscription",
        "commits_url": "https://api.github.com/repos/lqSky7/kernel_peridot/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/lqSky7/kernel_peridot/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/lqSky7/kernel_peridot/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/lqSky7/kernel_peridot/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/lqSky7/kernel_peridot/contents/{+path}",
        "compare_url": "https://api.github.com/repos/lqSky7/kernel_peridot/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/lqSky7/kernel_peridot/merges",
        "archive_url": "https://api.github.com/repos/lqSky7/kernel_peridot/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/lqSky7/kernel_peridot/downloads",
        "issues_url": "https://api.github.com/repos/lqSky7/kernel_peridot/issues{/number}",
        "pulls_url": "https://api.github.com/repos/lqSky7/kernel_peridot/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/lqSky7/kernel_peridot/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/lqSky7/kernel_peridot/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/lqSky7/kernel_peridot/labels{/name}",
        "releases_url": "https://api.github.com/repos/lqSky7/kernel_peridot/releases{/id}",
        "deployments_url": "https://api.github.com/repos/lqSky7/kernel_peridot/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0OTE5MDY2NjE5Ojc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/diphons/kernel_xiaomi_sm8635/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/diphons/kernel_xiaomi_sm8635/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/diphons/kernel_xiaomi_sm8635/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 919066619,
        "node_id": "R_kgDONsfX-w",
        "name": "kernel_xiaomi_sm8635",
        "full_name": "diphons/kernel_xiaomi_sm8635",
        "private": false,
        "owner": {
          "login": "diphons",
          "id": 9562747,
          "node_id": "MDQ6VXNlcjk1NjI3NDc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/9562747?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/diphons",
          "html_url": "https://github.com/diphons",
          "followers_url": "https://api.github.com/users/diphons/followers",
          "following_url": "https://api.github.com/users/diphons/following{/other_user}",
          "gists_url": "https://api.github.com/users/diphons/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/diphons/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/diphons/subscriptions",
          "organizations_url": "https://api.github.com/users/diphons/orgs",
          "repos_url": "https://api.github.com/users/diphons/repos",
          "events_url": "https://api.github.com/users/diphons/events{/privacy}",
          "received_events_url": "https://api.github.com/users/diphons/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/diphons/kernel_xiaomi_sm8635",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635",
        "forks_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/forks",
        "keys_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/teams",
        "hooks_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/hooks",
        "issue_events_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/issues/events{/number}",
        "events_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/events",
        "assignees_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/assignees{/user}",
        "branches_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/branches{/branch}",
        "tags_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/tags",
        "blobs_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/languages",
        "stargazers_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/stargazers",
        "contributors_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/contributors",
        "subscribers_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/subscribers",
        "subscription_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/subscription",
        "commits_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/contents/{+path}",
        "compare_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/merges",
        "archive_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/downloads",
        "issues_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/issues{/number}",
        "pulls_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/labels{/name}",
        "releases_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/releases{/id}",
        "deployments_url": "https://api.github.com/repos/diphons/kernel_xiaomi_sm8635/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "sha": "b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "node_id": "MDY6Q29tbWl0ODA2MjA4MzM1OmI4OWM0YWIyZjVjOGVlMzY3MzA3ODU3MzIzMDllOGJmZDQzNTZhNDQ=",
      "html_url": "https://github.com/shekhawat2/android_kernel_xiaomi_peridot/commit/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "comments_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44/comments",
      "commit": {
        "url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/git/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
        "author": {
          "date": "2022-06-09T22:55:03.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "committer": {
          "date": "2022-06-10T04:40:18.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "message": "Merge keystone/android-mainline-keystone-qcom-release.5.18.0 (019bc1f) into msm-pineapple\n\n* refs/heads/tmp-019bc1f:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update TSC sync…",
        "tree": {
          "url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/git/trees/c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f",
          "sha": "c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/commits/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "html_url": "https://github.com/shekhawat2/android_kernel_xiaomi_peridot/commit/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "sha": "fccc41b1ec75a533f7690b2843fa6da47023fb55"
        },
        {
          "url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/commits/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "html_url": "https://github.com/shekhawat2/android_kernel_xiaomi_peridot/commit/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "sha": "019bc1f65e9130bcb6f02a3a70971d843fde705d"
        }
      ],
      "repository": {
        "id": 806208335,
        "node_id": "R_kgDOMA3DTw",
        "name": "android_kernel_xiaomi_peridot",
        "full_name": "shekhawat2/android_kernel_xiaomi_peridot",
        "private": false,
        "owner": {
          "login": "shekhawat2",
          "id": 20217523,
          "node_id": "MDQ6VXNlcjIwMjE3NTIz",
          "avatar_url": "https://avatars.githubusercontent.com/u/20217523?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/shekhawat2",
          "html_url": "https://github.com/shekhawat2",
          "followers_url": "https://api.github.com/users/shekhawat2/followers",
          "following_url": "https://api.github.com/users/shekhawat2/following{/other_user}",
          "gists_url": "https://api.github.com/users/shekhawat2/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/shekhawat2/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/shekhawat2/subscriptions",
          "organizations_url": "https://api.github.com/users/shekhawat2/orgs",
          "repos_url": "https://api.github.com/users/shekhawat2/repos",
          "events_url": "https://api.github.com/users/shekhawat2/events{/privacy}",
          "received_events_url": "https://api.github.com/users/shekhawat2/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/shekhawat2/android_kernel_xiaomi_peridot",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot",
        "forks_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/forks",
        "keys_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/teams",
        "hooks_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/hooks",
        "issue_events_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/issues/events{/number}",
        "events_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/events",
        "assignees_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/assignees{/user}",
        "branches_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/branches{/branch}",
        "tags_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/tags",
        "blobs_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/languages",
        "stargazers_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/stargazers",
        "contributors_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/contributors",
        "subscribers_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/subscribers",
        "subscription_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/subscription",
        "commits_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/contents/{+path}",
        "compare_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/merges",
        "archive_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/downloads",
        "issues_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/issues{/number}",
        "pulls_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/labels{/name}",
        "releases_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/releases{/id}",
        "deployments_url": "https://api.github.com/repos/shekhawat2/android_kernel_xiaomi_peridot/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "sha": "7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "node_id": "MDY6Q29tbWl0ODk4NzY3MzMwOjc5NDBmY2Y1OTc2NjA1YmI5ZjZjOGE5MDZhMjg2ZmZlMjg3YTkxNmY=",
      "html_url": "https://github.com/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/commit/7940fcf5976605bb9f6c8a906a286ffe287a916f",
      "comments_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f/comments",
      "commit": {
        "url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/git/commits/7940fcf5976605bb9f6c8a906a286ffe287a916f",
        "author": {
          "date": "2022-06-07T07:34:12.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "committer": {
          "date": "2022-06-07T07:34:13.000-07:00",
          "name": "Blagovest Kolenichev",
          "email": "quic_c_bkolen@quicinc.com"
        },
        "message": "Merge keystone/mirror-android-mainline into keystone/android-mainline-keystone-qcom-dev\n\n* keystone/mirror-android-mainline:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update …",
        "tree": {
          "url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/git/trees/44b799a44aa2e84c0a88a54a46e3949be0f47c6c",
          "sha": "44b799a44aa2e84c0a88a54a46e3949be0f47c6c"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/commits/ccfd1a42d879259e48f91829773339a36fd6165f",
          "html_url": "https://github.com/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/commit/ccfd1a42d879259e48f91829773339a36fd6165f",
          "sha": "ccfd1a42d879259e48f91829773339a36fd6165f"
        },
        {
          "url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/commits/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "html_url": "https://github.com/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/commit/a28c367546418480c41990ad2c30fa98d7a14a4d",
          "sha": "a28c367546418480c41990ad2c30fa98d7a14a4d"
        }
      ],
      "repository": {
        "id": 898767330,
        "node_id": "R_kgDONZIZ4g",
        "name": "android_kernel_motorola_sm8635",
        "full_name": "Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635",
        "private": false,
        "owner": {
          "login": "Kendrenogen-moto-sm8635",
          "id": 190461483,
          "node_id": "O_kgDOC1o2Kw",
          "avatar_url": "https://avatars.githubusercontent.com/u/190461483?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Kendrenogen-moto-sm8635",
          "html_url": "https://github.com/Kendrenogen-moto-sm8635",
          "followers_url": "https://api.github.com/users/Kendrenogen-moto-sm8635/followers",
          "following_url": "https://api.github.com/users/Kendrenogen-moto-sm8635/following{/other_user}",
          "gists_url": "https://api.github.com/users/Kendrenogen-moto-sm8635/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Kendrenogen-moto-sm8635/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Kendrenogen-moto-sm8635/subscriptions",
          "organizations_url": "https://api.github.com/users/Kendrenogen-moto-sm8635/orgs",
          "repos_url": "https://api.github.com/users/Kendrenogen-moto-sm8635/repos",
          "events_url": "https://api.github.com/users/Kendrenogen-moto-sm8635/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Kendrenogen-moto-sm8635/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635",
        "forks_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/forks",
        "keys_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/teams",
        "hooks_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/hooks",
        "issue_events_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/issues/events{/number}",
        "events_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/events",
        "assignees_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/assignees{/user}",
        "branches_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/branches{/branch}",
        "tags_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/tags",
        "blobs_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/languages",
        "stargazers_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/stargazers",
        "contributors_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/contributors",
        "subscribers_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/subscribers",
        "subscription_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/subscription",
        "commits_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/contents/{+path}",
        "compare_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/merges",
        "archive_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/downloads",
        "issues_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/issues{/number}",
        "pulls_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/labels{/name}",
        "releases_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/releases{/id}",
        "deployments_url": "https://api.github.com/repos/Kendrenogen-moto-sm8635/android_kernel_motorola_sm8635/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "sha": "b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "node_id": "MDY6Q29tbWl0OTIxNjMxNjQwOmI4OWM0YWIyZjVjOGVlMzY3MzA3ODU3MzIzMDllOGJmZDQzNTZhNDQ=",
      "html_url": "https://github.com/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commit/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44/comments",
      "commit": {
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/git/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
        "author": {
          "date": "2022-06-09T22:55:03.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "committer": {
          "date": "2022-06-10T04:40:18.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "message": "Merge keystone/android-mainline-keystone-qcom-release.5.18.0 (019bc1f) into msm-pineapple\n\n* refs/heads/tmp-019bc1f:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update TSC sync…",
        "tree": {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/git/trees/c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f",
          "sha": "c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commits/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "html_url": "https://github.com/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commit/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "sha": "fccc41b1ec75a533f7690b2843fa6da47023fb55"
        },
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commits/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "html_url": "https://github.com/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commit/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "sha": "019bc1f65e9130bcb6f02a3a70971d843fde705d"
        }
      ],
      "repository": {
        "id": 921631640,
        "node_id": "R_kgDONu77mA",
        "name": "realme_gt6-AndroidV-kernel-source",
        "full_name": "realme-kernel-opensource/realme_gt6-AndroidV-kernel-source",
        "private": false,
        "owner": {
          "login": "realme-kernel-opensource",
          "id": 48056874,
          "node_id": "MDQ6VXNlcjQ4MDU2ODc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/48056874?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/realme-kernel-opensource",
          "html_url": "https://github.com/realme-kernel-opensource",
          "followers_url": "https://api.github.com/users/realme-kernel-opensource/followers",
          "following_url": "https://api.github.com/users/realme-kernel-opensource/following{/other_user}",
          "gists_url": "https://api.github.com/users/realme-kernel-opensource/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/realme-kernel-opensource/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/realme-kernel-opensource/subscriptions",
          "organizations_url": "https://api.github.com/users/realme-kernel-opensource/orgs",
          "repos_url": "https://api.github.com/users/realme-kernel-opensource/repos",
          "events_url": "https://api.github.com/users/realme-kernel-opensource/events{/privacy}",
          "received_events_url": "https://api.github.com/users/realme-kernel-opensource/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source",
        "forks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/forks",
        "keys_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/teams",
        "hooks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/hooks",
        "issue_events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/issues/events{/number}",
        "events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/events",
        "assignees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/assignees{/user}",
        "branches_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/branches{/branch}",
        "tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/tags",
        "blobs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/languages",
        "stargazers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/stargazers",
        "contributors_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/contributors",
        "subscribers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/subscribers",
        "subscription_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/subscription",
        "commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/contents/{+path}",
        "compare_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/merges",
        "archive_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/downloads",
        "issues_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/issues{/number}",
        "pulls_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/labels{/name}",
        "releases_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/releases{/id}",
        "deployments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_gt6-AndroidV-kernel-source/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "sha": "b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "node_id": "MDY6Q29tbWl0NzY0OTU5Nzc3OmI4OWM0YWIyZjVjOGVlMzY3MzA3ODU3MzIzMDllOGJmZDQzNTZhNDQ=",
      "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commit/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44/comments",
      "commit": {
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/git/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
        "author": {
          "date": "2022-06-09T22:55:03.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "committer": {
          "date": "2022-06-10T04:40:18.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "message": "Merge keystone/android-mainline-keystone-qcom-release.5.18.0 (019bc1f) into msm-pineapple\n\n* refs/heads/tmp-019bc1f:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update TSC sync…",
        "tree": {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/git/trees/c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f",
          "sha": "c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commits/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commit/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "sha": "fccc41b1ec75a533f7690b2843fa6da47023fb55"
        },
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commits/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commit/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "sha": "019bc1f65e9130bcb6f02a3a70971d843fde705d"
        }
      ],
      "repository": {
        "id": 764959777,
        "node_id": "R_kgDOLZhcIQ",
        "name": "realme_GT5pro-AndroidU-kernel-source",
        "full_name": "realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source",
        "private": false,
        "owner": {
          "login": "realme-kernel-opensource",
          "id": 48056874,
          "node_id": "MDQ6VXNlcjQ4MDU2ODc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/48056874?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/realme-kernel-opensource",
          "html_url": "https://github.com/realme-kernel-opensource",
          "followers_url": "https://api.github.com/users/realme-kernel-opensource/followers",
          "following_url": "https://api.github.com/users/realme-kernel-opensource/following{/other_user}",
          "gists_url": "https://api.github.com/users/realme-kernel-opensource/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/realme-kernel-opensource/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/realme-kernel-opensource/subscriptions",
          "organizations_url": "https://api.github.com/users/realme-kernel-opensource/orgs",
          "repos_url": "https://api.github.com/users/realme-kernel-opensource/repos",
          "events_url": "https://api.github.com/users/realme-kernel-opensource/events{/privacy}",
          "received_events_url": "https://api.github.com/users/realme-kernel-opensource/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source",
        "forks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/forks",
        "keys_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/teams",
        "hooks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/hooks",
        "issue_events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/issues/events{/number}",
        "events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/events",
        "assignees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/assignees{/user}",
        "branches_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/branches{/branch}",
        "tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/tags",
        "blobs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/languages",
        "stargazers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/stargazers",
        "contributors_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/contributors",
        "subscribers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/subscribers",
        "subscription_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/subscription",
        "commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/contents/{+path}",
        "compare_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/merges",
        "archive_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/downloads",
        "issues_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/issues{/number}",
        "pulls_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/labels{/name}",
        "releases_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/releases{/id}",
        "deployments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidU-kernel-source/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "sha": "b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "node_id": "MDY6Q29tbWl0ODk5Mjk1MDI0OmI4OWM0YWIyZjVjOGVlMzY3MzA3ODU3MzIzMDllOGJmZDQzNTZhNDQ=",
      "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commit/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44/comments",
      "commit": {
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/git/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
        "author": {
          "date": "2022-06-09T22:55:03.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "committer": {
          "date": "2022-06-10T04:40:18.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "message": "Merge keystone/android-mainline-keystone-qcom-release.5.18.0 (019bc1f) into msm-pineapple\n\n* refs/heads/tmp-019bc1f:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update TSC sync…",
        "tree": {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/git/trees/c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f",
          "sha": "c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commits/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commit/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "sha": "fccc41b1ec75a533f7690b2843fa6da47023fb55"
        },
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commits/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commit/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "sha": "019bc1f65e9130bcb6f02a3a70971d843fde705d"
        }
      ],
      "repository": {
        "id": 899295024,
        "node_id": "R_kgDONZonMA",
        "name": "realme_GT5pro-AndroidV-kernel-source",
        "full_name": "realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source",
        "private": false,
        "owner": {
          "login": "realme-kernel-opensource",
          "id": 48056874,
          "node_id": "MDQ6VXNlcjQ4MDU2ODc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/48056874?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/realme-kernel-opensource",
          "html_url": "https://github.com/realme-kernel-opensource",
          "followers_url": "https://api.github.com/users/realme-kernel-opensource/followers",
          "following_url": "https://api.github.com/users/realme-kernel-opensource/following{/other_user}",
          "gists_url": "https://api.github.com/users/realme-kernel-opensource/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/realme-kernel-opensource/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/realme-kernel-opensource/subscriptions",
          "organizations_url": "https://api.github.com/users/realme-kernel-opensource/orgs",
          "repos_url": "https://api.github.com/users/realme-kernel-opensource/repos",
          "events_url": "https://api.github.com/users/realme-kernel-opensource/events{/privacy}",
          "received_events_url": "https://api.github.com/users/realme-kernel-opensource/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source",
        "forks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/forks",
        "keys_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/teams",
        "hooks_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/hooks",
        "issue_events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/issues/events{/number}",
        "events_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/events",
        "assignees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/assignees{/user}",
        "branches_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/branches{/branch}",
        "tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/tags",
        "blobs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/languages",
        "stargazers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/stargazers",
        "contributors_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/contributors",
        "subscribers_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/subscribers",
        "subscription_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/subscription",
        "commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/contents/{+path}",
        "compare_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/merges",
        "archive_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/downloads",
        "issues_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/issues{/number}",
        "pulls_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/labels{/name}",
        "releases_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/releases{/id}",
        "deployments_url": "https://api.github.com/repos/realme-kernel-opensource/realme_GT5pro-AndroidV-kernel-source/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "sha": "b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "node_id": "MDY6Q29tbWl0Nzc0MzIwNTcyOmI4OWM0YWIyZjVjOGVlMzY3MzA3ODU3MzIzMDllOGJmZDQzNTZhNDQ=",
      "html_url": "https://github.com/Mandi-Sa/micode-aurora-u-oss/commit/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "comments_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44/comments",
      "commit": {
        "url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/git/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
        "author": {
          "date": "2022-06-09T22:55:03.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "committer": {
          "date": "2022-06-10T04:40:18.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "message": "Merge keystone/android-mainline-keystone-qcom-release.5.18.0 (019bc1f) into msm-pineapple\n\n* refs/heads/tmp-019bc1f:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update TSC sync…",
        "tree": {
          "url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/git/trees/c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f",
          "sha": "c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/commits/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "html_url": "https://github.com/Mandi-Sa/micode-aurora-u-oss/commit/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "sha": "fccc41b1ec75a533f7690b2843fa6da47023fb55"
        },
        {
          "url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/commits/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "html_url": "https://github.com/Mandi-Sa/micode-aurora-u-oss/commit/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "sha": "019bc1f65e9130bcb6f02a3a70971d843fde705d"
        }
      ],
      "repository": {
        "id": 774320572,
        "node_id": "R_kgDOLicxvA",
        "name": "micode-aurora-u-oss",
        "full_name": "Mandi-Sa/micode-aurora-u-oss",
        "private": false,
        "owner": {
          "login": "Mandi-Sa",
          "id": 22807524,
          "node_id": "MDQ6VXNlcjIyODA3NTI0",
          "avatar_url": "https://avatars.githubusercontent.com/u/22807524?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Mandi-Sa",
          "html_url": "https://github.com/Mandi-Sa",
          "followers_url": "https://api.github.com/users/Mandi-Sa/followers",
          "following_url": "https://api.github.com/users/Mandi-Sa/following{/other_user}",
          "gists_url": "https://api.github.com/users/Mandi-Sa/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Mandi-Sa/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Mandi-Sa/subscriptions",
          "organizations_url": "https://api.github.com/users/Mandi-Sa/orgs",
          "repos_url": "https://api.github.com/users/Mandi-Sa/repos",
          "events_url": "https://api.github.com/users/Mandi-Sa/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Mandi-Sa/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/Mandi-Sa/micode-aurora-u-oss",
        "description": "Xiaomi kernel source archive for Xiaomi 14 Ultra Android U (Has been removed by Xiaomi on March 19, 2024)",
        "fork": false,
        "url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss",
        "forks_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/forks",
        "keys_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/teams",
        "hooks_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/hooks",
        "issue_events_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/issues/events{/number}",
        "events_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/events",
        "assignees_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/assignees{/user}",
        "branches_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/branches{/branch}",
        "tags_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/tags",
        "blobs_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/languages",
        "stargazers_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/stargazers",
        "contributors_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/contributors",
        "subscribers_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/subscribers",
        "subscription_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/subscription",
        "commits_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/contents/{+path}",
        "compare_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/merges",
        "archive_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/downloads",
        "issues_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/issues{/number}",
        "pulls_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/labels{/name}",
        "releases_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/releases{/id}",
        "deployments_url": "https://api.github.com/repos/Mandi-Sa/micode-aurora-u-oss/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "sha": "b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "node_id": "MDY6Q29tbWl0ODI4NTk5MDEwOmI4OWM0YWIyZjVjOGVlMzY3MzA3ODU3MzIzMDllOGJmZDQzNTZhNDQ=",
      "html_url": "https://github.com/raghavt20/android_kernel_xiaomi_sm8635/commit/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "comments_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44/comments",
      "commit": {
        "url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/git/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
        "author": {
          "date": "2022-06-09T22:55:03.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "committer": {
          "date": "2022-06-10T04:40:18.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "message": "Merge keystone/android-mainline-keystone-qcom-release.5.18.0 (019bc1f) into msm-pineapple\n\n* refs/heads/tmp-019bc1f:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update TSC sync…",
        "tree": {
          "url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/git/trees/c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f",
          "sha": "c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/commits/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "html_url": "https://github.com/raghavt20/android_kernel_xiaomi_sm8635/commit/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "sha": "fccc41b1ec75a533f7690b2843fa6da47023fb55"
        },
        {
          "url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/commits/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "html_url": "https://github.com/raghavt20/android_kernel_xiaomi_sm8635/commit/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "sha": "019bc1f65e9130bcb6f02a3a70971d843fde705d"
        }
      ],
      "repository": {
        "id": 828599010,
        "node_id": "R_kgDOMWNq4g",
        "name": "android_kernel_xiaomi_sm8635",
        "full_name": "raghavt20/android_kernel_xiaomi_sm8635",
        "private": false,
        "owner": {
          "login": "raghavt20",
          "id": 63952537,
          "node_id": "MDQ6VXNlcjYzOTUyNTM3",
          "avatar_url": "https://avatars.githubusercontent.com/u/63952537?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/raghavt20",
          "html_url": "https://github.com/raghavt20",
          "followers_url": "https://api.github.com/users/raghavt20/followers",
          "following_url": "https://api.github.com/users/raghavt20/following{/other_user}",
          "gists_url": "https://api.github.com/users/raghavt20/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/raghavt20/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/raghavt20/subscriptions",
          "organizations_url": "https://api.github.com/users/raghavt20/orgs",
          "repos_url": "https://api.github.com/users/raghavt20/repos",
          "events_url": "https://api.github.com/users/raghavt20/events{/privacy}",
          "received_events_url": "https://api.github.com/users/raghavt20/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/raghavt20/android_kernel_xiaomi_sm8635",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635",
        "forks_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/forks",
        "keys_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/teams",
        "hooks_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/hooks",
        "issue_events_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/issues/events{/number}",
        "events_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/events",
        "assignees_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/assignees{/user}",
        "branches_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/branches{/branch}",
        "tags_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/tags",
        "blobs_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/languages",
        "stargazers_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/stargazers",
        "contributors_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/contributors",
        "subscribers_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/subscribers",
        "subscription_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/subscription",
        "commits_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/contents/{+path}",
        "compare_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/merges",
        "archive_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/downloads",
        "issues_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/issues{/number}",
        "pulls_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/labels{/name}",
        "releases_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/releases{/id}",
        "deployments_url": "https://api.github.com/repos/raghavt20/android_kernel_xiaomi_sm8635/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "sha": "b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "node_id": "MDY6Q29tbWl0ODY1Mzg2NjE5OmI4OWM0YWIyZjVjOGVlMzY3MzA3ODU3MzIzMDllOGJmZDQzNTZhNDQ=",
      "html_url": "https://github.com/grass2/Kernel_Realking_xiaomi_peridot/commit/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "comments_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44/comments",
      "commit": {
        "url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/git/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
        "author": {
          "date": "2022-06-09T22:55:03.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "committer": {
          "date": "2022-06-10T04:40:18.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "message": "Merge keystone/android-mainline-keystone-qcom-release.5.18.0 (019bc1f) into msm-pineapple\n\n* refs/heads/tmp-019bc1f:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update TSC sync…",
        "tree": {
          "url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/git/trees/c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f",
          "sha": "c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/commits/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "html_url": "https://github.com/grass2/Kernel_Realking_xiaomi_peridot/commit/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "sha": "fccc41b1ec75a533f7690b2843fa6da47023fb55"
        },
        {
          "url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/commits/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "html_url": "https://github.com/grass2/Kernel_Realking_xiaomi_peridot/commit/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "sha": "019bc1f65e9130bcb6f02a3a70971d843fde705d"
        }
      ],
      "repository": {
        "id": 865386619,
        "node_id": "R_kgDOM5TAew",
        "name": "Kernel_Realking_xiaomi_peridot",
        "full_name": "grass2/Kernel_Realking_xiaomi_peridot",
        "private": false,
        "owner": {
          "login": "grass2",
          "id": 26361004,
          "node_id": "MDQ6VXNlcjI2MzYxMDA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/26361004?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/grass2",
          "html_url": "https://github.com/grass2",
          "followers_url": "https://api.github.com/users/grass2/followers",
          "following_url": "https://api.github.com/users/grass2/following{/other_user}",
          "gists_url": "https://api.github.com/users/grass2/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/grass2/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/grass2/subscriptions",
          "organizations_url": "https://api.github.com/users/grass2/orgs",
          "repos_url": "https://api.github.com/users/grass2/repos",
          "events_url": "https://api.github.com/users/grass2/events{/privacy}",
          "received_events_url": "https://api.github.com/users/grass2/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/grass2/Kernel_Realking_xiaomi_peridot",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot",
        "forks_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/forks",
        "keys_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/teams",
        "hooks_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/hooks",
        "issue_events_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/issues/events{/number}",
        "events_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/events",
        "assignees_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/assignees{/user}",
        "branches_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/branches{/branch}",
        "tags_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/tags",
        "blobs_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/languages",
        "stargazers_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/stargazers",
        "contributors_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/contributors",
        "subscribers_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/subscribers",
        "subscription_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/subscription",
        "commits_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/contents/{+path}",
        "compare_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/merges",
        "archive_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/downloads",
        "issues_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/issues{/number}",
        "pulls_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/labels{/name}",
        "releases_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/releases{/id}",
        "deployments_url": "https://api.github.com/repos/grass2/Kernel_Realking_xiaomi_peridot/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "sha": "b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "node_id": "MDY6Q29tbWl0NzY2OTA5MjY5OmI4OWM0YWIyZjVjOGVlMzY3MzA3ODU3MzIzMDllOGJmZDQzNTZhNDQ=",
      "html_url": "https://github.com/oppo-source/android_kernel_oppo_sm8650/commit/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "comments_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44/comments",
      "commit": {
        "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/git/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
        "author": {
          "date": "2022-06-09T22:55:03.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "committer": {
          "date": "2022-06-10T04:40:18.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "message": "Merge keystone/android-mainline-keystone-qcom-release.5.18.0 (019bc1f) into msm-pineapple\n\n* refs/heads/tmp-019bc1f:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update TSC sync…",
        "tree": {
          "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/git/trees/c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f",
          "sha": "c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/commits/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "html_url": "https://github.com/oppo-source/android_kernel_oppo_sm8650/commit/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "sha": "fccc41b1ec75a533f7690b2843fa6da47023fb55"
        },
        {
          "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/commits/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "html_url": "https://github.com/oppo-source/android_kernel_oppo_sm8650/commit/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "sha": "019bc1f65e9130bcb6f02a3a70971d843fde705d"
        }
      ],
      "repository": {
        "id": 766909269,
        "node_id": "R_kgDOLbYbVQ",
        "name": "android_kernel_oppo_sm8650",
        "full_name": "oppo-source/android_kernel_oppo_sm8650",
        "private": false,
        "owner": {
          "login": "oppo-source",
          "id": 3840059,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjM4NDAwNTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3840059?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/oppo-source",
          "html_url": "https://github.com/oppo-source",
          "followers_url": "https://api.github.com/users/oppo-source/followers",
          "following_url": "https://api.github.com/users/oppo-source/following{/other_user}",
          "gists_url": "https://api.github.com/users/oppo-source/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/oppo-source/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/oppo-source/subscriptions",
          "organizations_url": "https://api.github.com/users/oppo-source/orgs",
          "repos_url": "https://api.github.com/users/oppo-source/repos",
          "events_url": "https://api.github.com/users/oppo-source/events{/privacy}",
          "received_events_url": "https://api.github.com/users/oppo-source/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/oppo-source/android_kernel_oppo_sm8650",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650",
        "forks_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/forks",
        "keys_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/teams",
        "hooks_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/hooks",
        "issue_events_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/issues/events{/number}",
        "events_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/events",
        "assignees_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/assignees{/user}",
        "branches_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/branches{/branch}",
        "tags_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/tags",
        "blobs_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/languages",
        "stargazers_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/stargazers",
        "contributors_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/contributors",
        "subscribers_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/subscribers",
        "subscription_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/subscription",
        "commits_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/contents/{+path}",
        "compare_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/merges",
        "archive_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/downloads",
        "issues_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/issues{/number}",
        "pulls_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/labels{/name}",
        "releases_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/releases{/id}",
        "deployments_url": "https://api.github.com/repos/oppo-source/android_kernel_oppo_sm8650/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "sha": "b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "node_id": "MDY6Q29tbWl0ODYwMzc4MDkwOmI4OWM0YWIyZjVjOGVlMzY3MzA3ODU3MzIzMDllOGJmZDQzNTZhNDQ=",
      "html_url": "https://github.com/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commit/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44/comments",
      "commit": {
        "url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/git/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
        "author": {
          "date": "2022-06-09T22:55:03.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "committer": {
          "date": "2022-06-10T04:40:18.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "message": "Merge keystone/android-mainline-keystone-qcom-release.5.18.0 (019bc1f) into msm-pineapple\n\n* refs/heads/tmp-019bc1f:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update TSC sync…",
        "tree": {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/git/trees/c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f",
          "sha": "c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commits/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "html_url": "https://github.com/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commit/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "sha": "fccc41b1ec75a533f7690b2843fa6da47023fb55"
        },
        {
          "url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commits/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "html_url": "https://github.com/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commit/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "sha": "019bc1f65e9130bcb6f02a3a70971d843fde705d"
        }
      ],
      "repository": {
        "id": 860378090,
        "node_id": "R_kgDOM0hT6g",
        "name": "realmeGT6-AndroidU-kernel-source",
        "full_name": "realme-kernel-opensource/realmeGT6-AndroidU-kernel-source",
        "private": false,
        "owner": {
          "login": "realme-kernel-opensource",
          "id": 48056874,
          "node_id": "MDQ6VXNlcjQ4MDU2ODc0",
          "avatar_url": "https://avatars.githubusercontent.com/u/48056874?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/realme-kernel-opensource",
          "html_url": "https://github.com/realme-kernel-opensource",
          "followers_url": "https://api.github.com/users/realme-kernel-opensource/followers",
          "following_url": "https://api.github.com/users/realme-kernel-opensource/following{/other_user}",
          "gists_url": "https://api.github.com/users/realme-kernel-opensource/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/realme-kernel-opensource/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/realme-kernel-opensource/subscriptions",
          "organizations_url": "https://api.github.com/users/realme-kernel-opensource/orgs",
          "repos_url": "https://api.github.com/users/realme-kernel-opensource/repos",
          "events_url": "https://api.github.com/users/realme-kernel-opensource/events{/privacy}",
          "received_events_url": "https://api.github.com/users/realme-kernel-opensource/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source",
        "forks_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/forks",
        "keys_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/teams",
        "hooks_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/hooks",
        "issue_events_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/issues/events{/number}",
        "events_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/events",
        "assignees_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/assignees{/user}",
        "branches_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/branches{/branch}",
        "tags_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/tags",
        "blobs_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/languages",
        "stargazers_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/stargazers",
        "contributors_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/contributors",
        "subscribers_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/subscribers",
        "subscription_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/subscription",
        "commits_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/contents/{+path}",
        "compare_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/merges",
        "archive_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/downloads",
        "issues_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/issues{/number}",
        "pulls_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/labels{/name}",
        "releases_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/releases{/id}",
        "deployments_url": "https://api.github.com/repos/realme-kernel-opensource/realmeGT6-AndroidU-kernel-source/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "sha": "b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "node_id": "MDY6Q29tbWl0ODkzOTM5ODIyOmI4OWM0YWIyZjVjOGVlMzY3MzA3ODU3MzIzMDllOGJmZDQzNTZhNDQ=",
      "html_url": "https://github.com/amackpro/android_kernel_xiaomi_sm8635/commit/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "comments_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44/comments",
      "commit": {
        "url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/git/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
        "author": {
          "date": "2022-06-09T22:55:03.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "committer": {
          "date": "2022-06-10T04:40:18.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "message": "Merge keystone/android-mainline-keystone-qcom-release.5.18.0 (019bc1f) into msm-pineapple\n\n* refs/heads/tmp-019bc1f:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update TSC sync…",
        "tree": {
          "url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/git/trees/c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f",
          "sha": "c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/commits/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "html_url": "https://github.com/amackpro/android_kernel_xiaomi_sm8635/commit/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "sha": "fccc41b1ec75a533f7690b2843fa6da47023fb55"
        },
        {
          "url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/commits/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "html_url": "https://github.com/amackpro/android_kernel_xiaomi_sm8635/commit/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "sha": "019bc1f65e9130bcb6f02a3a70971d843fde705d"
        }
      ],
      "repository": {
        "id": 893939822,
        "node_id": "R_kgDONUhwbg",
        "name": "android_kernel_xiaomi_sm8635",
        "full_name": "amackpro/android_kernel_xiaomi_sm8635",
        "private": false,
        "owner": {
          "login": "amackpro",
          "id": 48667677,
          "node_id": "MDQ6VXNlcjQ4NjY3Njc3",
          "avatar_url": "https://avatars.githubusercontent.com/u/48667677?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/amackpro",
          "html_url": "https://github.com/amackpro",
          "followers_url": "https://api.github.com/users/amackpro/followers",
          "following_url": "https://api.github.com/users/amackpro/following{/other_user}",
          "gists_url": "https://api.github.com/users/amackpro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/amackpro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/amackpro/subscriptions",
          "organizations_url": "https://api.github.com/users/amackpro/orgs",
          "repos_url": "https://api.github.com/users/amackpro/repos",
          "events_url": "https://api.github.com/users/amackpro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/amackpro/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/amackpro/android_kernel_xiaomi_sm8635",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635",
        "forks_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/forks",
        "keys_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/teams",
        "hooks_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/hooks",
        "issue_events_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/issues/events{/number}",
        "events_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/events",
        "assignees_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/assignees{/user}",
        "branches_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/branches{/branch}",
        "tags_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/tags",
        "blobs_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/languages",
        "stargazers_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/stargazers",
        "contributors_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/contributors",
        "subscribers_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/subscribers",
        "subscription_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/subscription",
        "commits_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/contents/{+path}",
        "compare_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/merges",
        "archive_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/downloads",
        "issues_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/issues{/number}",
        "pulls_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/labels{/name}",
        "releases_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/releases{/id}",
        "deployments_url": "https://api.github.com/repos/amackpro/android_kernel_xiaomi_sm8635/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "sha": "b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "node_id": "MDY6Q29tbWl0Nzg2Mzc4NDk1OmI4OWM0YWIyZjVjOGVlMzY3MzA3ODU3MzIzMDllOGJmZDQzNTZhNDQ=",
      "html_url": "https://github.com/OnePlus-12-Development/android_kernel_oneplus_sm8650/commit/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "comments_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44/comments",
      "commit": {
        "url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/git/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
        "author": {
          "date": "2022-06-09T22:55:03.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "committer": {
          "date": "2022-06-10T04:40:18.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "message": "Merge keystone/android-mainline-keystone-qcom-release.5.18.0 (019bc1f) into msm-pineapple\n\n* refs/heads/tmp-019bc1f:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update TSC sync…",
        "tree": {
          "url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/git/trees/c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f",
          "sha": "c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/commits/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "html_url": "https://github.com/OnePlus-12-Development/android_kernel_oneplus_sm8650/commit/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "sha": "fccc41b1ec75a533f7690b2843fa6da47023fb55"
        },
        {
          "url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/commits/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "html_url": "https://github.com/OnePlus-12-Development/android_kernel_oneplus_sm8650/commit/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "sha": "019bc1f65e9130bcb6f02a3a70971d843fde705d"
        }
      ],
      "repository": {
        "id": 786378495,
        "node_id": "R_kgDOLt8u_w",
        "name": "android_kernel_oneplus_sm8650",
        "full_name": "OnePlus-12-Development/android_kernel_oneplus_sm8650",
        "private": false,
        "owner": {
          "login": "OnePlus-12-Development",
          "id": 154954123,
          "node_id": "O_kgDOCTxpiw",
          "avatar_url": "https://avatars.githubusercontent.com/u/154954123?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/OnePlus-12-Development",
          "html_url": "https://github.com/OnePlus-12-Development",
          "followers_url": "https://api.github.com/users/OnePlus-12-Development/followers",
          "following_url": "https://api.github.com/users/OnePlus-12-Development/following{/other_user}",
          "gists_url": "https://api.github.com/users/OnePlus-12-Development/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/OnePlus-12-Development/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/OnePlus-12-Development/subscriptions",
          "organizations_url": "https://api.github.com/users/OnePlus-12-Development/orgs",
          "repos_url": "https://api.github.com/users/OnePlus-12-Development/repos",
          "events_url": "https://api.github.com/users/OnePlus-12-Development/events{/privacy}",
          "received_events_url": "https://api.github.com/users/OnePlus-12-Development/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/OnePlus-12-Development/android_kernel_oneplus_sm8650",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650",
        "forks_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/forks",
        "keys_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/teams",
        "hooks_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/hooks",
        "issue_events_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/issues/events{/number}",
        "events_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/events",
        "assignees_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/assignees{/user}",
        "branches_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/branches{/branch}",
        "tags_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/tags",
        "blobs_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/languages",
        "stargazers_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/stargazers",
        "contributors_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/contributors",
        "subscribers_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/subscribers",
        "subscription_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/subscription",
        "commits_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/contents/{+path}",
        "compare_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/merges",
        "archive_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/downloads",
        "issues_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/issues{/number}",
        "pulls_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/labels{/name}",
        "releases_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/releases{/id}",
        "deployments_url": "https://api.github.com/repos/OnePlus-12-Development/android_kernel_oneplus_sm8650/deployments"
      },
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "sha": "b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "node_id": "MDY6Q29tbWl0ODM4Mjg0NTAyOmI4OWM0YWIyZjVjOGVlMzY3MzA3ODU3MzIzMDllOGJmZDQzNTZhNDQ=",
      "html_url": "https://github.com/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commit/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
      "comments_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44/comments",
      "commit": {
        "url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/git/commits/b89c4ab2f5c8ee36730785732309e8bfd4356a44",
        "author": {
          "date": "2022-06-09T22:55:03.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "committer": {
          "date": "2022-06-10T04:40:18.000-07:00",
          "name": "jianzhou",
          "email": "quic_jianzhou@quicinc.com"
        },
        "message": "Merge keystone/android-mainline-keystone-qcom-release.5.18.0 (019bc1f) into msm-pineapple\n\n* refs/heads/tmp-019bc1f:\n  Revert \"ANDROID: cpu-hotplug: Always use real time scheduling when hotplugging a CPU\"\n  Revert \"ANDROID: cpu: Don't prevent hotplug from DL/BATCH/IDLE\"\n  Revert \"ANDROID: timer: Add vendor hook for timer calc index\"\n  ANDROID: irq-gic-v3: remove all out-of-tree changes\n  ANDROID: init_task: Init android vendor and oem data\n  ANDROID: uapi: icmp: Bionic compat with __unused\n  ANDROID: PCI: dwc: revert dwc 32-bit DMA mask for MSI address requirement\n  lockdown: also lock down previous kgdb use\n  xtensa: Return true/false (not 1/0) from bool function\n  random: check for signals after page of pool writes\n  m68k: atari: Make Atari ROM port I/O write macros return void\n  io_uring: cleanup handling of the two task_work lists\n  EDAC/xgene: Fix typo processsors -> processors\n  mtip32xx: fix typo in comment\n  blk-mq: fix typo in comment\n  arm64/sysreg: Generate definitions for FAR_ELx\n  arm64/sysreg: Generate definitions for DACR32_EL2\n  arm64/sysreg: Generate definitions for CSSELR_EL1\n  arm64/sysreg: Generate definitions for CPACR_ELx\n  arm64/sysreg: Generate definitions for CONTEXTIDR_ELx\n  arm64/sysreg: Generate definitions for CLIDR_EL1\n  random: wire up fops->splice_{read,write}_iter()\n  random: convert to using fops->write_iter()\n  random: convert to using fops->read_iter()\n  nvme: enable uring-passthrough for admin commands\n  nvme: helper for uring-passthrough checks\n  ARM: 9204/2: module: Add all unwind tables when load module\n  ARM: 9206/1: A9: Add ARM ERRATA 764319 workaround (Updated)\n  ARM: 9201/1: spectre-bhb: rely on linker to emit cross-section literal loads\n  ARM: 9200/1: spectre-bhb: avoid cross-subsection jump using a numbered label\n  ARM: 9199/1: spectre-bhb: use local DSB and elide ISB in loop8 sequence\n  ARM: 9198/1: spectre-bhb: simplify BPIALL vector macro\n  ARM: 9195/1: entry: avoid explicit literal loads\n  ARM: 9194/1: assembler: simplify ldr_this_cpu for !SMP builds\n  ARM: 9192/1: amba: fix memory leak in amba_device_try_add()\n  ARM: 9193/1: amba: Add amba_read_periphid() helper\n  x86/tdx: Fix RETs in TDX asm\n  objtool: Fix objtool regression on x32 systems\n  objtool: Fix symbol creation\n  x86: Remove empty files\n  x86/entry: Fixup objtool/ibt validation\n  x86/microcode: Add explicit CPU vendor dependency\n  perf/x86/amd/core: Fix reloading events for SVM\n  topology: Remove unused cpu_cluster_mask()\n  sched: Reverse sched_class layout\n  bug: Use normal relative pointers in 'struct bug_entry'\n  sched/clock: Use try_cmpxchg64 in sched_clock_{local,remote}\n  x86/entry: Fix register corruption in compat syscall\n  nvme: set non-mdts limits in nvme_scan_work\n  io_uring: fix incorrect __kernel_rwf_t cast\n  platform/x86/intel/ifs: Add CPU_SUP_INTEL dependency\n  platform/x86: intel_cht_int33fe: Set driver data\n  platform/x86: intel-hid: fix _DSM function index handling\n  fs-verity: Use struct_size() helper in enable_verity()\n  random: unify batched entropy implementations\n  random: move randomize_page() into mm where it belongs\n  random: remove mostly unused async readiness notifier\n  random: remove get_random_bytes_arch() and add rng_has_arch_random()\n  random: move initialization functions out of hot pages\n  random: make consistent use of buf and len\n  random: use proper return types on get_random_{int,long}_wait()\n  random: remove extern from functions in header\n  random: use static branch for crng_ready()\n  bfq: Remove bfq_requeue_request_body()\n  bfq: Remove superfluous conversion from RQ_BIC()\n  bfq: Allow current waker to defend against a tentative one\n  bfq: Relax waker detection for shared queues\n  xen: add support for initializing xenstore later as HVM domain\n  xen: sync xs_wire.h header with upstream xen\n  x86: xen: remove STACK_FRAME_NON_STANDARD from xen_cpuid\n  xen-blk{back,front}: Update contact points for buffer_squeeze_duration_ms and feature_persistent\n  fs-writeback: writeback_sb_inodes：Recalculate 'wrote' according skipped pages\n  xen/xenbus: eliminate xenbus_grant_ring()\n  xen/sndfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/usbfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/scsifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/pcifront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/drmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/tpmfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/netfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/blkfront: use xenbus_setup_ring() and xenbus_teardown_ring()\n  xen/xenbus: add xenbus_setup_ring() service function\n  xen: update ring.h\n  xen/shbuf: switch xen-front-pgdir-shbuf to use INVALID_GRANT_REF\n  xen/dmabuf: switch gntdev-dmabuf to use INVALID_GRANT_REF\n  xen/sound: switch xen_snd_front to use INVALID_GRANT_REF\n  xen/drm: switch xen_drm_front to use INVALID_GRANT_REF\n  xen/usb: switch xen-hcd to use INVALID_GRANT_REF\n  xen/scsifront: remove unused GRANT_INVALID_REF definition\n  xen/netfront: switch netfront to use INVALID_GRANT_REF\n  xen/blkfront: switch blkfront to use INVALID_GRANT_REF\n  xen/grant-table: never put a reserved grant on the free list\n  xen: update grant_table.h\n  xen/scsifront: harden driver against malicious backend\n  xen/scsifront: use new command result macros\n  xen/scsiback: use new command result macros\n  xen: update vscsiif.h\n  x86/boot: Wrap literal addresses in absolute_pointer()\n  x86/sev: Mark the code returning to user space as syscall gap\n  riscv/efi_stub: Add support for RISCV_EFI_BOOT_PROTOCOL\n  blk-cgroup: delete rcu_read_lock_held() WARN_ON_ONCE()\n  io_uring: disallow mixed provided buffer group registrations\n  io_uring: initialize io_buffer_list head when shared ring is unregistered\n  io_uring: add fully sparse buffer registration\n  x86/sev: Annotate stack change in the #VC handler\n  fs-verity: remove unused parameter desc_size in fsverity_create_info()\n  nvme: add support for TP4084 - Time-to-Ready Enhancements\n  random: credit architectural init the exact amount\n  random: handle latent entropy and command line from random_init()\n  random: use proper jiffies comparison macro\n  random: remove ratelimiting for in-kernel unseeded randomness\n  random: move initialization out of reseeding hot path\n  random: avoid initializing twice in credit race\n  random: use symbolic constants for crng_init states\n  random32: use real rng for non-deterministic randomness\n  siphash: use one source of truth for siphash permutations\n  random: help compiler out with fast_mix() by using simpler arguments\n  random: do not use input pool from hard IRQs\n  arm64/sve: Move sve_free() into SVE code section\n  arm64: Kconfig.platforms: Add comments\n  arm64: Kconfig: Fix indentation and add comments\n  io_uring: use rcu_dereference in io_close\n  io_uring: consistently use the EPOLL* defines\n  io_uring: make apoll_events a __poll_t\n  io_uring: drop a spurious inline on a forward declaration\n  io_uring: don't use ERR_PTR for user pointers\n  io_uring: use a rwf_t for io_rw.flags\n  io_uring: add support for ring mapped supplied buffers\n  io_uring: add io_pin_pages() helper\n  io_uring: add buffer selection support to IORING_OP_NOP\n  io_uring: fix locking state for empty buffer group\n  s390/head: get rid of 31 bit leftovers\n  blk-throttle: Set BIO_THROTTLED when bio has been throttled\n  locking/atomic/x86: Introduce arch_try_cmpxchg64\n  locking/atomic: Add generic try_cmpxchg64 support\n  perf/x86/amd: Run AMD BRS code only on supported hw\n  perf/x86/amd: Fix AMD BRS period adjustment\n  EDAC/i5100: Remove unused inline function i5100_nrecmema_dm_buf_id()\n  scripts/min-tool-version.sh: raise minimum clang version to 14.0.0 for s390\n  s390/boot: do not emit debug info for assembly with llvm's IAS\n  s390/boot: workaround llvm IAS bug\n  s390/purgatory: workaround llvm's IAS limitations\n  s390/entry: workaround llvm's IAS limitations\n  s390/alternatives: remove padding generation code\n  s390/alternatives: provide identical sized orginal/alternative sequences\n  blk-cgroup: Remove unnecessary rcu_read_lock/unlock()\n  blk-cgroup: always terminate io.stat lines\n  x86/sev: Remove duplicated assignment to variable info\n  xtensa: improve call0 ABI probing\n  xtensa: support artificial division by 0 exception\n  irqchip: Add Kconfig symbols for sunxi drivers\n  arm64: mm: avoid writable executable mappings in kexec/hibernate code\n  arm64: lds: move special code sections out of kernel exec segment\n  x86/nmi: Make register_nmi_handler() more robust\n  nvme: split the enum used for various register constants\n  loadpin: stop using bdevname\n  mm: usercopy: move the virt_addr_valid() below the is_vmalloc_addr()\n  gcc-plugins: randstruct: Remove cast exception handling\n  af_unix: Silence randstruct GCC plugin warning\n  niu: Silence randstruct warnings\n  big_keys: Use struct for internal payload\n  arm64/hugetlb: Implement arm64 specific huge_ptep_get()\n  arm64/hugetlb: Use ptep_get() to get the pte value of a huge page\n  x86/sgx: Ensure no data in PCMD page after truncate\n  x86/sgx: Fix race between reclaimer and page fault handler\n  x86/sgx: Obtain backing storage page with enclave mutex held\n  x86/sgx: Mark PCMD page as dirty when modifying contents\n  x86/sgx: Disconnect backing page references from dirty status\n  arm64: kdump: Do not allocate crash low memory if not needed\n  arm64/sve: Generate ZCR definitions\n  arm64/sme: Generate defintions for SVCR\n  arm64/sme: Generate SMPRI_EL1 definitions\n  arm64/sme: Automatically generate SMPRIMAP_EL2 definitions\n  arm64/sme: Automatically generate SMIDR_EL1 defines\n  arm64/sme: Automatically generate defines for SMCR\n  arm64/sysreg: Support generation of RAZ fields\n  arm64/sme: Remove _EL0 from name of SVCR - FIXME sysreg.h\n  arm64/sme: Standardise bitfield names for SVCR\n  arm64/sme: Drop SYS_ from SMIDR_EL1 defines\n  arm64/fp: Rename SVE and SME LEN field name to _WIDTH\n  arm64/fp: Make SVE and SME length register definition match architecture\n  kselftest/arm64: Explicitly build no BTI tests with BTI disabled\n  arm64/sve: Make kernel FPU protection RT friendly\n  arm64/sve: Delay freeing memory in fpsimd_flush_thread()\n  arm64: mm: Make arch_faults_on_old_pte() check for migratability\n  arm64: mte: Clean up user tag accessors\n  kselftest/arm64: bti: force static linking\n  block, bfq: make bfq_has_work() more accurate\n  block, bfq: protect 'bfqd->queued' by 'bfqd->lock'\n  block: cleanup the VM accounting in submit_bio\n  nbd: Fix hung on disconnect request if socket is closed before\n  ata: pata_ftide010: Remove unneeded ERROR check before clk_disable_unprepare\n  s390/cpumf: add new extended counter set for IBM z16\n  m68k: math-emu: Fix dependencies of math emulation support\n  nvme-fabrics: add a request timeout helper\n  nvme-pci: harden drive presence detect in nvme_dev_disable()\n  nvme-pci: fix a NULL pointer dereference in nvme_alloc_admin_tags\n  nvme: mark internal passthru request RQF_QUIET\n  nvme: remove unneeded include from constants file\n  nvme: add missing status values to verbose logging\n  nvme: set dma alignment to dword\n  nvme: fix interpretation of DMRSL\n  cdrom: remove obsolete TODO list\n  block: remove last remaining traces of IDE documentation\n  cdrom: mark CDROMGETSPINDOWN/CDROMSETSPINDOWN obsolete\n  cdrom: remove the unused driver specific disc change ioctl\n  cdrom: make EXPORT_SYMBOL follow exported function\n  random: order timer entropy functions below interrupt functions\n  irqchip/gic-v3: Fix priority mask handling\n  irqchip/gic-v3: Refactor ISB + EOIR at ack time\n  irqchip/gic-v3: Ensure pseudo-NMIs have an ISB between ack and handling\n  random: do not pretend to handle premature next security model\n  selftests/arm64: Use switch statements in mte_common_util.c\n  selftests/arm64: Remove casts to/from void in check_tags_inclusion\n  selftests/arm64: Check failures to set tags in check_tags_inclusion\n  selftests/arm64: Allow zero tags in mte_switch_mode()\n  selftests/arm64: Log errors in verify_mte_pointer_validity()\n  arm64/sysreg: fix odd line spacing\n  arm64/sysreg: improve comment for regs without fields\n  genirq/irq_sim: Make the irq_work always run in hard irq context\n  timers: Provide a better debugobjects hint for delayed works\n  io_uring: implement multishot mode for accept\n  io_uring: let fast poll support multishot\n  io_uring: add REQ_F_APOLL_MULTISHOT for requests\n  io_uring: add IORING_ACCEPT_MULTISHOT for accept\n  random: use first 128 bits of input as fast init\n  random: do not use batches when !crng_ready()\n  random: mix in timestamps and reseed on system restore\n  random: vary jitter iterations based on cycle counter speed\n  random: insist on random_get_entropy() existing in order to simplify\n  xtensa: use fallback for random_get_entropy() instead of zero\n  sparc: use fallback for random_get_entropy() instead of zero\n  um: use fallback for random_get_entropy() instead of zero\n  x86/tsc: Use fallback for random_get_entropy() instead of zero\n  nios2: use fallback for random_get_entropy() instead of zero\n  arm: use fallback for random_get_entropy() instead of zero\n  mips: use fallback for random_get_entropy() instead of just c0 random\n  riscv: use fallback for random_get_entropy() instead of zero\n  m68k: use fallback for random_get_entropy() instead of zero\n  timekeeping: Add raw clock fallback for random_get_entropy()\n  openrisc: start CPU timer early in boot\n  powerpc: define get_cycles macro for arch-override\n  alpha: define get_cycles macro for arch-override\n  parisc: define get_cycles macro for arch-override\n  s390: define get_cycles macro for arch-override\n  ia64: define get_cycles macro for arch-override\n  init: call time_init() before rand_initialize()\n  random: fix sysctl documentation nits\n  io_uring: only wake when the correct events are set\n  security: declare member holding string literal const\n  xtensa: add trap handler for division by zero\n  io_uring: avoid io-wq -EAGAIN looping for !IOPOLL\n  x86/speculation: Add missing srbds=off to the mitigations= help text\n  io_uring: add flag for allocating a fully sparse direct descriptor space\n  io_uring: bump max direct descriptor count to 1M\n  io_uring: allow allocated fixed files for accept\n  io_uring: allow allocated fixed files for openat/openat2\n  io_uring: add basic fixed file allocator\n  io_uring: track fixed files with a bitmap\n  x86/prctl: Remove pointless task argument\n  futex: Remove a PREEMPT_RT_FULL reference.\n  debugobjects: Convert to SPDX license identifier\n  csky: Move $(core-y) into arch/csky/Kbuild\n  csky: Remove unused core-y for dts\n  csky: Remove unused $(dtb-y) from boot/Makefile\n  scripts/faddr2line: Fix overlapping text section failures\n  scripts: Create objdump-func helper script\n  blk-mq: fix passthrough plugging\n  perf/x86/amd: Remove unused variable 'hwc'\n  objtool: Remove libsubcmd.a when make clean\n  objtool: Remove inat-tables.c when make clean\n  platform/x86: toshiba_acpi: use kobj_to_dev()\n  platform/x86: samsung-laptop: use kobj_to_dev()\n  platform/x86: gigabyte-wmi: Add support for Z490 AORUS ELITE AC and X570 AORUS ELITE WIFI\n  tools/power/x86/intel-speed-select: Fix warning for perf_cap.cpu\n  tools/power/x86/intel-speed-select: Display error on turbo mode disabled\n  Documentation: In-Field Scan\n  platform/x86/intel/ifs: add ABI documentation for IFS\n  trace: platform/x86/intel/ifs: Add trace point to track Intel IFS operations\n  platform/x86/intel/ifs: Add IFS sysfs interface\n  platform/x86/intel/ifs: Add scan test support\n  platform/x86/intel/ifs: Authenticate and copy to secured memory\n  platform/x86/intel/ifs: Check IFS Image sanity\n  platform/x86/intel/ifs: Read IFS firmware image\n  platform/x86/intel/ifs: Add stub driver for In-Field Scan\n  stop_machine: Add stop_core_cpuslocked() for per-core operations\n  x86/msr-index: Define INTEGRITY_CAPABILITIES MSR\n  x86/microcode/intel: Expose collect_cpu_info_early() for IFS\n  platform/x86: asus-nb-wmi: Add keymap for MyASUS key\n  platform/x86: asus-wmi: Update unknown code message\n  Documentation/ABI: Add new attributes for mlxreg-io sysfs interfaces\n  platform/mellanox: Add support for new SN2201 system\n  perf/arm-cmn: Decode CAL devices properly in debugfs\n  block: Fix the bio.bi_opf comment\n  block: reorder the REQ_ flags\n  blk-iocost: combine local_stat and desc_stat to stat\n  rcu: Move expedited grace period (GP) work to RT kthread_worker\n  x86/vsyscall: Remove CONFIG_LEGACY_VSYSCALL_EMULATE\n  rcu: Introduce CONFIG_RCU_EXP_CPU_STALL_TIMEOUT\n  platform_data/mlxreg: Add field for notification callback\n  sched/deadline: Remove superfluous rq clock update in push_dl_task()\n  sched/core: Avoid obvious double update_rq_clock warning\n  perf/ibs: Fix comment\n  perf/amd/ibs: Advertise zen4_ibs_extensions as pmu capability attribute\n  perf/amd/ibs: Add support for L3 miss filtering\n  perf/amd/ibs: Use ->is_visible callback for dynamic attributes\n  perf/amd/ibs: Cascade pmu init functions' return value\n  perf/x86/uncore: Add new Alder Lake and Raptor Lake support\n  perf/x86/uncore: Clean up uncore_pci_ids[]\n  perf/x86/cstate: Add new Alder Lake and Raptor Lake support\n  perf/x86/msr: Add new Alder Lake and Raptor Lake support\n  perf/x86: Add new Alder Lake and Raptor Lake support\n  locking/qrwlock: Change \"queue rwlock\" to \"queued rwlock\"\n  lockdep: Delete local_irq_enable_in_hardirq()\n  nvme: add vectored-io support for uring-cmd\n  nvme: wire-up uring-cmd support for io-passthru on char-device.\n  nvme: refactor nvme_submit_user_cmd()\n  block: wire-up support for passthrough plugging\n  fs,io_uring: add infrastructure for uring-cmd\n  arm64/hugetlb: Drop TLB flush from get_clear_flush()\n  s390/preempt: disable __preempt_count_add() optimization for PROFILE_ALL_BRANCHES\n  s390/stp: clock_delta should be signed\n  s390/stp: fix todoff size\n  arm64: Declare non global symbols as static\n  perf/arm-cmn: Fix filter_sel lookup\n  xtensa/simdisk: fix proc_read_simdisk()\n  xtensa: no need to initialise statics to 0\n  gcc-plugins: Change all version strings match kernel\n  randomize_kstack: Improve docs on requirements/rationale\n  loop: remove most the top-of-file boilerplate comment from the UAPI header\n  loop: remove most the top-of-file boilerplate comment\n  loop: add a SPDX header\n  loop: remove loop.h\n  perf/marvell_cn10k: Fix tad_pmu_event_init() to check pmu type first\n  perf/amd/ibs: Use interrupt regs ip for stack unwinding\n  fscrypt: add new helper functions for test_dummy_encryption\n  fscrypt: factor out fscrypt_policy_to_key_spec()\n  io_uring: support CQE32 for nop operation\n  io_uring: enable CQE32\n  io_uring: support CQE32 in /proc info\n  io_uring: add tracing for additional CQE32 fields\n  io_uring: overflow processing for CQE32\n  io_uring: flush completions for CQE32\n  io_uring: modify io_get_cqe for CQE32\n  io_uring: add CQE32 completion processing\n  io_uring: add CQE32 setup processing\n  io_uring: change ring size calculation for CQE32\n  io_uring: store add. return values for CQE32\n  io_uring: support CQE32 in io_uring_cqe\n  io_uring: add support for 128-byte SQEs\n  io_uring: don't clear req->kbuf when buffer selection is done\n  io_uring: eliminate the need to track provided buffer ID separately\n  io_uring: move provided buffer state closer to submit state\n  io_uring: move provided and fixed buffers into the same io_kiocb area\n  io_uring: abstract out provided buffer list selection\n  io_uring: never call io_buffer_select() for a buffer re-select\n  io_uring: get rid of hashed provided buffer groups\n  io_uring: always use req->buf_index for the provided buffer group\n  io_uring: ignore ->buf_index if REQ_F_BUFFER_SELECT isn't set\n  io_uring: kill io_rw_buffer_select() wrapper\n  io_uring: make io_buffer_select() return the user address directly\n  doc: admin-guide: Update libata kernel parameters\n  ata: libata-core: Allow forcing most horkage flags\n  ata: libata-core: Improve link flags forced settings\n  ata: libata-core: Refactor force_tbl definition\n  ata: libata-core: cleanup ata_device_blacklist\n  ata: simplify the return expression of brcm_ahci_remove\n  m68k: math-emu: Fix typos in comments\n  m68k: Wire up syscall_trace_enter/leave for m68k\n  s390/pai: add support for cryptography counters\n  entry: Rename arch_check_user_regs() to arch_enter_from_user_mode()\n  lkdtm/stackleak: fix CONFIG_GCC_PLUGIN_STACKLEAK=n\n  arm64: entry: use stackleak_erase_on_task_stack()\n  stackleak: add on/off stack variants\n  lkdtm/stackleak: check stack boundaries\n  lkdtm/stackleak: prevent unexpected stack usage\n  lkdtm/stackleak: rework boundary management\n  lkdtm/stackleak: avoid spurious failure\n  stackleak: rework poison scanning\n  stackleak: rework stack high bound handling\n  stackleak: clarify variable names\n  stackleak: rework stack low bound handling\n  stackleak: remove redundant check\n  stackleak: move skip_erasing() check earlier\n  arm64: stackleak: fix current_top_of_stack()\n  randstruct: Enable Clang support\n  randstruct: Move seed generation into scripts/basic/\n  randstruct: Split randstruct Makefile and CFLAGS\n  randstruct: Reorganize Kconfigs and attribute macros\n  sancov: Split plugin build from plugin CFLAGS\n  netfs: Eliminate Clang randstruct warning\n  docs: kdump: Update the crashkernel description for arm64\n  of: Support more than one crash kernel regions for kexec -s\n  of: fdt: Add memory for devices by DT property \"linux,usable-memory-range\"\n  arm64: kdump: Reimplement crashkernel=X\n  arm64: Use insert_resource() to simplify code\n  kdump: return -ENOENT if required cmdline option does not exist\n  objtool: Fix STACK_FRAME_NON_STANDARD reloc type\n  s390/compat: cleanup compat_linux.h header file\n  s390/entry: remove broken and not needed code\n  s390/boot: convert parmarea to C\n  s390/boot: convert initial lowcore to C\n  s390/ptrace: move short psw definitions to ptrace header file\n  s390/head: initialize all new psws\n  s390/boot: change initial program check handler to disabled wait psw\n  s390/head: adjust iplstart entry point\n  s390/boot: get rid of startup archive\n  s390/vx: remove comments from macros which break LLVM's IAS\n  s390/extable: prefer local labels in .set directives\n  s390/nospec: prefer local labels in .set directives\n  s390/hypfs: fix typos in comments\n  s390/crypto: fix typos in comments\n  s390/consoles: improve panic notifiers reliability\n  arm64/sme: More sensibly define the size for the ZA register set\n  drivers/perf: hisi: Add Support for CPA PMU\n  drivers/perf: hisi: Associate PMUs in SICL with CPUs online\n  drivers/perf: arm_spe: Expose saturating counter to 16-bit\n  perf/arm-cmn: Add CMN-700 support\n  perf/arm-cmn: Refactor occupancy filter selector\n  perf/arm-cmn: Add CMN-650 support\n  dt-bindings: perf: arm-cmn: Add CMN-650 and CMN-700\n  perf: check return value of armpmu_request_irq()\n  linkage: Fix issue with missing symbol size\n  x86/entry: Remove skip_r11rcx\n  x86/entry: Use PUSH_AND_CLEAR_REGS for compat\n  x86/entry: Simplify entry_INT80_compat()\n  x86/mm: Simplify RESERVE_BRK()\n  perf: RISC-V: Remove non-kernel-doc ** comments\n  irqchip/armada-370-xp: Do not touch Performance Counter Overflow on A375, A38x, A39x\n  platform/x86: pmc_atom: dont export pmc_atom_read - no modular users\n  platform/x86: pmc_atom: remove unused pmc_atom_write()\n  platform/x86: amd-pmc: Fix build error unused-function\n  platform/surface: aggregator: Fix initialization order when compiling as builtin module\n  platform/surface: gpe: Add support for Surface Pro 8\n  platform/x86/intel: Fix 'rmmod pmt_telemetry' panic\n  platform/x86: thinkpad_acpi: Correct dual fan probe\n  platform/x86: thinkpad_acpi: Add a s2idle resume quirk for a number of laptops\n  platform/x86: thinkpad_acpi: Convert btusb DMI list to quirks\n  efi: stub: prefer mirrored memory for randomized allocations\n  io_uring: kill io_recv_buffer_select() wrapper\n  io_uring: use 'sr' vs 'req->sr_msg' consistently\n  io_uring: add POLL_FIRST support for send/sendmsg and recv/recvmsg\n  io_uring: check IOPOLL/ioprio support upfront\n  arm64: mm: Cleanup useless parameters in zone_sizes_init()\n  block: improve the error message from bio_check_eod\n  block: allow passing a NULL bdev to bio_alloc_clone/bio_init_clone\n  block: remove superfluous calls to blkcg_bio_issue_init\n  selftests/seccomp: Fix spelling mistake \"Coud\" -> \"Could\"\n  arm64: fix types in copy_highpage()\n  arm64/sysreg: Generate definitions for SCTLR_EL1\n  x86/mm: Cleanup the control_va_addr_alignment() __setup handler\n  irqchip/gic: Improved warning about incorrect type\n  irqchip/csky: Return true/false (not 1/0) from bool functions\n  irqchip/imx-irqsteer: Add runtime PM support\n  irqchip/imx-irqsteer: Constify irq_chip struct\n  irqchip/armada-370-xp: Enable MSI affinity configuration\n  irqchip/aspeed-scu-ic: Fix irq_of_parse_and_map() return value\n  irqchip/aspeed-i2c-ic: Fix irq_of_parse_and_map() return value\n  irqchip/sun6i-r: Use NULL for chip_data\n  irqchip/xtensa-mx: Fix initial IRQ affinity in non-SMP setup\n  arm64: Set ARCH_NR_GPIO to 2048 for ARCH_APPLE\n  irqchip/exiu: Fix acknowledgment of edge triggered interrupts\n  x86: Fix return value of __setup handlers\n  irqchip/gic-v3: Claim iomem resources\n  dt-bindings: interrupt-controller: arm,gic-v3: Make the v2 compat requirements explicit\n  irqchip/gic-v3: Relax polling of GIC{R,D}_CTLR.RWP\n  irqchip/gic-v3: Detect LPI invalidation MMIO registers\n  arm64/sysreg: Generate definitions for TTBRn_EL1\n  arm64/sysreg: Generate definitions for ID_AA64ISAR0_EL1\n  arm64/sysreg: Enable automatic generation of system register definitions\n  arm64: Add sysreg header generation scripting\n  arm64/sysreg: Standardise ID_AA64ISAR0_EL1 macro names\n  arm64: Update name of ID_AA64ISAR0_EL1_ATOMIC to reflect ARM\n  arm64/sysreg: Define bits for previously RES1 fields in SCTLR_EL1\n  arm64/sysreg: Rename SCTLR_EL1_NTWE/TWI to SCTLR_EL1_nTWE/TWI\n  arm64/mte: Make TCF field values and naming more standard\n  arm64/mte: Make TCF0 naming and field values more standard\n  arm64/sysreg: Introduce helpers for access to sysreg fields\n  irqchip/gic-v3: Exposes bit values for GICR_CTLR.{IR, CES}\n  block: null_blk: Improve device creation with configfs\n  block: null_blk: Cleanup messages\n  block: null_blk: Cleanup device creation and deletion\n  block: null_blk: Fix code style issues\n  xen-blkback: use bdev_discard_alignment\n  arm64: cputype: Avoid overflow using MIDR_IMPLEMENTOR_MASK\n  x86/split_lock: Enable the split lock feature on Raptor Lake\n  perf/x86/amd/core: Add PerfMonV2 overflow handling\n  perf/x86/amd/core: Add PerfMonV2 counter control\n  perf/x86/amd/core: Detect available counters\n  perf/x86/amd/core: Detect PerfMonV2 support\n  x86/msr: Add PerfCntrGlobal* registers\n  x86/cpufeatures: Add PerfMonV2 feature bit\n  kselftest/arm64: Fix ABI header directory location\n  selftests/seccomp: Add test for wait killable notifier\n  selftests/seccomp: Refactor get_proc_stat to split out file reading code\n  seccomp: Add wait_killable semantic to seccomp user notifier\n  selinux: log anon inode class name\n  selinux: declare data arrays const\n  selinux: fix indentation level of mls_ops block\n  selinux: include necessary headers in headers\n  selinux: avoid extra semicolon\n  selinux: update parameter documentation\n  selinux: resolve checkpatch errors\n  srcu: Drop needless initialization of sdp in srcu_gp_start()\n  srcu: Prevent expedited GPs and blocking readers from consuming CPU\n  srcu: Add contention check to call_srcu() srcu_data ->lock acquisition\n  srcu: Automatically determine size-transition strategy at boot\n  tools/memory-model/README: Update klitmus7 compat table\n  rnbd-srv: use bdev_discard_alignment\n  nvme: remove a spurious clear of discard_alignment\n  loop: remove a spurious clear of discard_alignment\n  dasd: don't set the discard_alignment queue limit\n  raid5: don't set the discard_alignment queue limit\n  dm-zoned: don't set the discard_alignment queue limit\n  virtio_blk: fix the discard_granularity and discard_alignment queue limits\n  null_blk: don't set the discard_alignment queue limit\n  nbd: don't set the discard_alignment queue limit\n  ubd: don't set the discard_alignment queue limit\n  efi/arm64: libstub: run image in place if randomized by the loader\n  efi: libstub: pass image handle to handle_kernel_image()\n  efi: x86: Set the NX-compatibility flag in the PE header\n  efi: libstub: ensure allocated memory to be executable\n  efi: libstub: declare DXE services table\n  x86/entry: Convert SWAPGS to swapgs and remove the definition of SWAPGS\n  x86/entry: Don't call error_entry() for XENPV\n  x86/entry: Move CLD to the start of the idtentry macro\n  x86/entry: Move PUSH_AND_CLEAR_REGS out of error_entry()\n  x86/entry: Switch the stack after error_entry() returns\n  x86/traps: Use pt_regs directly in fixup_bad_iret()\n  kthread: unexport kthread_blkcg\n  blk-cgroup: cleanup blkcg_maybe_throttle_current\n  blk-cgroup: cleanup blk_cgroup_congested\n  blk-cgroup: move blkcg_css to blk-cgroup.c\n  blk-cgroup: remove unneeded includes from <linux/blk-cgroup.h>\n  blk-cgroup: remove pointless CONFIG_BLOCK ifdefs\n  blk-cgroup: replace bio_blkcg with bio_blkcg_css\n  blktrace: cleanup the __trace_note_message interface\n  blk-cgroup: move struct blkcg to block/blk-cgroup.h\n  blk-cgroup: move blkcg_{pin,unpin}_online out of line\n  blk-cgroup: move blk_cgroup_congested out line\n  blk-cgroup: move blkcg_{get,set}_fc_appid out of line\n  nvme-fc: fold t fc_update_appid into fc_appid_store\n  nvme-fc: don't support the appid attribute without CONFIG_BLK_CGROUP_FC_APPID\n  blk-cgroup: remove __bio_blkcg\n  block: ignore RWF_HIPRI hint for sync dio\n  x86/sev: Fix address space sparse warning\n  time/sched_clock: Fix formatting of frequency reporting code\n  time/sched_clock: Use Hz as the unit for clock rate reporting below 4kHz\n  time/sched_clock: Round the frequency reported to nearest rather than down\n  genirq: Use pm_runtime_resume_and_get() instead of pm_runtime_get_sync()\n  timekeeping: Consolidate fast timekeeper\n  timekeeping: Annotate ktime_get_boot_fast_ns() with data_race()\n  EDAC: Use kcalloc()\n  x86/fpu: Cleanup variable shadowing\n  x86/aperfperf: Make it correct on 32bit and UP kernels\n  xtensa: clean up labels in the kernel entry assembly\n  xtensa: don't leave invalid TLB entry in fast_store_prohibited\n  xtensa: fix declaration of _SecondaryResetVector_text_*\n  irqchip: irq-xtensa-mx: fix initial IRQ affinity\n  xtensa: enable ARCH_HAS_DEBUG_VM_PGTABLE\n  xtensa: add hibernation support\n  xtensa: support coprocessors on SMP\n  xtensa: get rid of stack frame in coprocessor_flush\n  xtensa: merge SAVE_CP_REGS_TAB and LOAD_CP_REGS_TAB\n  xtensa: add xtensa_xsr macro\n  xtensa: handle coprocessor exceptions in kernel mode\n  xtensa: use callx0 opcode in fast_coprocessor\n  xtensa: clean up excsave1 initialization\n  xtensa: clean up declarations in coprocessor.h\n  xtensa: clean up exception handler prototypes\n  xtensa: clean up function declarations in traps.c\n  xtensa: enable KCSAN\n  xtensa: enable HAVE_VIRT_CPU_ACCOUNTING_GEN\n  xtensa: enable context tracking\n  xtensa: use abi_* register names in the kernel exit code\n  xtensa: move trace_hardirqs_off call back to entry.S\n  xtensa: drop dead code from entry.S\n  xtensa: noMMU: allow handling protection faults\n  xtensa: extract vmalloc_fault code into a function\n  xtensa: move asid_cache from fault.c to mmu.c\n  xtensa: iss: extract and constify network callbacks\n  xtensa: iss: clean up per-device locking in network driver\n  xtensa: iss: replace iss_net_set_mac with eth_mac_addr\n  xtensa: iss: drop opened_list logic from the network driver\n  xtensa: localize labels used in memmove\n  x86/apic: Do apic driver probe for \"nosmp\" use case\n  aoe: Avoid flush_scheduled_work() usage\n  smp: Make softirq handling RT safe in flush_smp_call_function_queue()\n  smp: Rename flush_smp_call_function_from_idle()\n  sched: Fix missing prototype warnings\n  io_uring: replace smp_mb() with smp_mb__after_atomic() in io_sq_thread()\n  io_uring: add IORING_SETUP_TASKRUN_FLAG\n  io_uring: use TWA_SIGNAL_NO_IPI if IORING_SETUP_COOP_TASKRUN is used\n  io_uring: set task_work notify method at init time\n  io-wq: use __set_notify_signal() to wake workers\n  io_uring: serialize ctx->rings->sq_flags with atomic_or/and\n  task_work: allow TWA_SIGNAL without a rescheduling IPI\n  io_uring: return hint on whether more data is available after receive\n  tcp: pass back data left in socket after receive\n  selftests/seccomp: Ensure that notifications come in FIFO order\n  seccomp: Use FIFO semantics to order notifications\n  selftests/seccomp: Add SKIP for failed unshare()\n  selftests/seccomp: Test PTRACE_O_SUSPEND_SECCOMP without CAP_SYS_ADMIN\n  KVM: arm64: uapi: Add kvm_debug_exit_arch.hsr_high\n  KVM: arm64: Treat ESR_EL2 as a 64-bit register\n  arm64: Treat ESR_ELx as a 64-bit register\n  arm64: compat: Do not treat syscall number as ESR_ELx for a bad syscall\n  arm64: Make ESR_ELx_xVC_IMM_MASK compatible with assembly\n  arm64/ftrace: Make function graph use ftrace directly\n  ftrace: cleanup ftrace_graph_caller enable and disable\n  arm64/sme: Fix NULL check after kzalloc\n  EDAC/ghes: Change ghes_hw from global to static\n  EDAC/armada_xp: Use devm_platform_ioremap_resource()\n  sched/fair: Remove cfs_rq_tg_path()\n  sched/fair: Remove sched_trace_*() helper functions\n  sched/fair: Refactor cpu_util_without()\n  io_uring: use the text representation of ops in trace\n  selftests/arm64: Fix O= builds for the floating point tests\n  selftests/arm64: Clean the fp helper libraries\n  selftests/arm64: Define top_srcdir for the fp tests\n  selftests/arm64: Use TEST_GEN_PROGS_EXTENDED in the FP Makefile\n  kselftest/arm64: fix array_size.cocci warning\n  selftests/arm64: Add a testcase for handling of ZA on clone()\n  kselftest/arm64: Add SME support to syscall ABI test\n  kselftest/arm64: Add coverage for the ZA ptrace interface\n  kselftest/arm64: Add streaming SVE to SVE ptrace tests\n  kselftest/arm64: signal: Add SME signal handling tests\n  kselftest/arm64: Add stress test for SME ZA context switching\n  kselftest/arm64: signal: Handle ZA signal context in core code\n  kselftest/arm64: sme: Provide streaming mode SVE stress test\n  kselftest/arm64: Extend vector configuration API tests to cover SME\n  kselftest/arm64: Add tests for TPIDR2\n  kselftest/arm64: sme: Add SME support to vlset\n  kselftest/arm64: Add manual encodings for SME instructions\n  kselftest/arm64: Add simple test for MTE prctl\n  kselftest/arm64: Refactor parameter checking in mte_switch_mode()\n  kselftest/arm64: Log unexpected asynchronous MTE faults\n  kselftest/arm64: Handle more kselftest result codes in MTE helpers\n  kselftest/arm64: Validate setting via FPSIMD and read via SVE regsets\n  kselftest/arm64: Remove assumption that tasks start FPSIMD only\n  kselftest/arm64: Fix comment for ptrace_sve_get_fpsimd_data()\n  EDAC/synopsys: Add a SPDX identifier\n  EDAC/synopsys: Add driver support for i.MX platforms\n  x86/speculation: Add missing prototype for unpriv_ebpf_notify()\n  amd_hsmp: Add HSMP protocol version 5 messages\n  platform/x86/dell: add buffer allocation/free functions for SMI calls\n  x86/aperfmperf: Integrate the fallback code from show_cpuinfo()\n  x86/aperfmperf: Replace arch_freq_get_on_cpu()\n  x86/aperfmperf: Replace aperfmperf_get_khz()\n  x86/aperfmperf: Store aperf/mperf data for cpu frequency reads\n  x86/aperfmperf: Make parts of the frequency invariance code unconditional\n  x86/aperfmperf: Restructure arch_scale_freq_tick()\n  x86/aperfmperf: Put frequency invariance aperf/mperf data into a struct\n  x86/aperfmperf: Untangle Intel and AMD frequency invariance init\n  arm64/sme: Add ID_AA64SMFR0_EL1 to __read_sysreg_by_encoding()\n  platform/x86: asus-wmi: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: Use kobj_to_dev()\n  platform/x86/intel: pmc/core: change pmc_lpm_modes to static\n  platform/x86/intel/sdsi: Fix bug in multi packet reads\n  platform/x86/intel/sdsi: Poll on ready bit for writes\n  platform/x86/intel/sdsi: Handle leaky bucket\n  platform/x86: intel-uncore-freq: Prevent driver loading in guests\n  platform/x86: gigabyte-wmi: added support for B660 GAMING X DDR4 motherboard\n  platform/x86: dell-laptop: Add quirk entry for Latitude 7520\n  platform/x86: asus-wmi: Fix driver not binding when fan curve control probe fails\n  platform/x86: asus-wmi: Potential buffer overflow in asus_wmi_evaluate_method_buf()\n  platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version()\n  x86/aperfmperf: Separate AP/BP frequency invariance init\n  x86/smp: Move APERF/MPERF code where it belongs\n  x86/aperfmperf: Dont wake idle CPUs in arch_freq_get_on_cpu()\n  x86/split-lock: Remove unused TIF_SLD bit\n  x86/split_lock: Make life miserable for split lockers\n  x86/pm: Fix false positive kmemleak report in msr_build_context()\n  x86/sev: Get the AP jump table address from secrets page\n  x86/sev: Add missing __init annotations to SEV init routines\n  virt: sevguest: Rename the sevguest dir and files to sev-guest\n  s390/irq: utilize RCU instead of irq_lock_sparse() in show_msi_interrupt()\n  io_uring: rename op -> opcode\n  io_uring: add io_uring_get_opcode\n  io_uring: add type to op enum\n  documentation: zonefs: Document sysfs attributes\n  null-blk: save memory footprint for struct nullb_cmd\n  io_uring: fix compile warning for 32-bit builds\n  md: Replace role magic numbers with defined constants\n  md/raid0: Ignore RAID0 layout if the second zone has only one device\n  md/raid5: Annotate functions that hold device_lock with __must_hold\n  md/raid5-ppl: Annotate with rcu_dereference_protected()\n  md/raid5: Annotate rdev/replacement access when mddev_lock is held\n  md/raid5: Annotate rdev/replacement accesses when nr_pending is elevated\n  md/raid5: Add __rcu annotation to struct disk_info\n  md/raid5: Un-nest struct raid5_percpu definition\n  md/raid5: Cleanup setup_conf() error returns\n  md: replace deprecated strlcpy & remove duplicated line\n  md/bitmap: don't set sb values if can't pass sanity check\n  md: fix an incorrect NULL check in md_reload_sb\n  md: fix an incorrect NULL check in does_sb_need_changing\n  raid5: introduce MD_BROKEN\n  md: Set MD_BROKEN for RAID1 and RAID10\n  arm64: document the boot requirements for MTE\n  x86/fpu/xsave: Support XSAVEC in the kernel\n  genirq/matrix: Remove redundant assignment to variable 'end'\n  timers/nohz: Switch to ONESHOT_STOPPED in the low-res handler when the tick is stopped\n  m68k: defconfig: Update defconfigs for v5.18-rc1\n  s390: add KCSAN instrumentation to barriers and spinlocks\n  s390/pci: add error record for CC 2 retries\n  s390/pci: add PCI access type and length to error records\n  s390/pci: don't log availability events as errors\n  s390/pci: make better use of zpci_dbg() levels\n  s390/vfio-ap: remove superfluous MODULE_DEVICE_TABLE declaration\n  s390/vdso: add vdso randomization\n  s390/vdso: map vdso above stack\n  s390/vdso: move vdso mapping to its own function\n  s390/mmap: increase stack/mmap gap to 128MB\n  s390/zcrypt: code cleanup\n  s390/zcrypt: cleanup CPRB struct definitions\n  s390/ap: uevent on apmask/aqpmask change\n  s390/cio: simplify the calculation of variables\n  s390/smp: sort out physical vs virtual CPU0 lowcore pointer\n  s390/zcrypt: add display of ASYM master key verification pattern\n  s390/kexec: set end-of-ipl flag in last diag308 call\n  s390/sclp: add detection of IPL-complete-control facility\n  x86/mce: Add messages for panic errors in AMD's MCE grading\n  x86/mce: Simplify AMD severity grading logic\n  btrfs: Avoid live-lock in search_ioctl() on hardware with sub-page faults\n  arm64: Add support for user sub-page fault probing\n  mm: Add fault_in_subpage_writeable() to probe at sub-page granularity\n  csky: atomic: Add conditional atomic operations' optimization\n  csky: atomic: Add custom atomic.h implementation\n  csky: atomic: Optimize cmpxchg with acquire & release\n  io_uring: cleanup error-handling around io_req_complete\n  io_uring: add socket(2) support\n  net: add __sys_socket_file()\n  io_uring: fix trace for reduced sqe padding\n  io_uring: add fgetxattr and getxattr support\n  io_uring: add fsetxattr and setxattr support\n  fs: split off do_getxattr from getxattr\n  fs: split off setxattr_copy and do_setxattr function from setxattr\n  io_uring: return an error when cqe is dropped\n  io_uring: use constants for cq_overflow bitfield\n  io_uring: rework io_uring_enter to simplify return value\n  io_uring: trace cqe overflows\n  io_uring: add trace support for CQE overflow\n  io_uring: allow re-poll if we made progress\n  io_uring: support MSG_WAITALL for IORING_OP_SEND(MSG)\n  io_uring: add support for IORING_ASYNC_CANCEL_ANY\n  io_uring: allow IORING_OP_ASYNC_CANCEL with 'fd' key\n  io_uring: add support for IORING_ASYNC_CANCEL_ALL\n  io_uring: pass in struct io_cancel_data consistently\n  io_uring: remove dead 'poll_only' argument to io_poll_cancel()\n  io_uring: refactor io_disarm_next() locking\n  io_uring: move timeout locking in io_timeout_cancel()\n  io_uring: store SCM state in io_fixed_file->file_ptr\n  io_uring: kill ctx arg from io_req_put_rsrc\n  io_uring: add a helper for putting rsrc nodes\n  io_uring: store rsrc node in req instead of refs\n  io_uring: refactor io_assign_file error path\n  io_uring: use right helpers for file assign locking\n  io_uring: add data_race annotations\n  io_uring: inline io_req_complete_fail_submit()\n  io_uring: refactor io_submit_sqe()\n  io_uring: refactor lazy link fail\n  io_uring: introduce IO_REQ_LINK_FLAGS\n  io_uring: refactor io_queue_sqe()\n  io_uring: rename io_queue_async_work()\n  io_uring: inline io_queue_sqe()\n  io_uring: helper for prep+queuing linked timeouts\n  io_uring: inline io_free_req()\n  io_uring: kill io_put_req_deferred()\n  io_uring: minor refactoring for some tw handlers\n  io_uring: clean poll tw PF_EXITING handling\n  io_uring: optimise io_get_cqe()\n  io_uring: optimise submission left counting\n  io_uring: optimise submission loop invariant\n  io_uring: add helper to return req to cache list\n  io_uring: helper for empty req cache checks\n  io_uring: inline io_flush_cached_reqs\n  io_uring: shrink final link flush\n  io_uring: memcpy CQE from req\n  io_uring: explicitly keep a CQE in io_kiocb\n  io_uring: rename io_sqe_file_register\n  io_uring: deduplicate SCM accounting\n  io_uring: don't pass around fixed index for scm\n  io_uring: refactor __io_sqe_files_scm\n  io_uring: uniform SCM accounting\n  io_uring: don't scm-account for non af_unix sockets\n  io_uring: move finish_wait() outside of loop in cqring_wait()\n  io_uring: refactor io_req_add_compl_list()\n  io_uring: silence io_for_each_link() warning\n  io_uring: partially uninline io_put_task()\n  io_uring: cleanup conditional submit locking\n  io_uring: optimise mutex locking for submit+iopoll\n  io_uring: pre-calculate syscall iopolling decision\n  io_uring: split off IOPOLL argument verifiction\n  io_uring: clean up io_queue_next()\n  io_uring: move poll recycling later in compl flushing\n  io_uring: optimise io_free_batch_list\n  io_uring: refactor io_req_find_next\n  io_uring: remove extra ifs around io_commit_cqring\n  io_uring: small optimisation of tctx_task_work\n  block/partitions/ldm: Remove redundant assignments\n  block/partitions/atari: Remove redundant assignment\n  block/partitions/acorn: Remove redundant assignments\n  block/blk-map: Remove redundant assignment\n  block/badblocks: Remove redundant assignments\n  binfmt_flat: Remove shared library support\n  arm64/sme: Provide Kconfig for SME\n  KVM: arm64: Handle SME host state when running guests\n  KVM: arm64: Trap SME usage in guest\n  KVM: arm64: Hide SME system registers from guests\n  arm64/sme: Save and restore streaming mode over EFI runtime calls\n  arm64/sme: Disable streaming mode and ZA when flushing CPU state\n  arm64/sme: Add ptrace support for ZA\n  arm64/sme: Implement ptrace support for streaming mode SVE registers\n  arm64/sme: Implement ZA signal handling\n  arm64/sme: Implement streaming SVE signal handling\n  arm64/sme: Disable ZA and streaming mode when handling signals\n  arm64/sme: Implement traps and syscall handling for SME\n  arm64/sme: Implement ZA context switching\n  arm64/sme: Implement streaming SVE context switching\n  arm64/sme: Implement SVCR context switching\n  arm64/sme: Implement support for TPIDR2\n  arm64/sme: Implement vector length configuration prctl()s\n  arm64/sme: Implement sysctl to set the default vector length\n  arm64/sme: Identify supported SME vector lengths at boot\n  arm64/sme: Basic enumeration support\n  arm64/sme: Early CPU setup for SME\n  arm64/sme: Manually encode SME instructions\n  arm64/sme: System register and exception syndrome definitions\n  arm64/sme: Provide ABI documentation for SME\n  arm64: stacktrace: align with common naming\n  arm64: stacktrace: rename stackframe to unwind_state\n  arm64: stacktrace: rename unwinder functions\n  arm64: stacktrace: make struct stackframe private to stacktrace.c\n  arm64: stacktrace: delete PCS comment\n  arm64: stacktrace: remove NULL task check from unwind_frame()\n  arm64/mm: Compute PTRS_PER_[PMD|PUD] independently of PTRS_PER_PTE\n  objtool: Update documentation\n  objtool: Remove --lto and --vmlinux in favor of --link\n  objtool: Add HAVE_NOINSTR_VALIDATION\n  objtool: Rename \"VMLINUX_VALIDATION\" -> \"NOINSTR_VALIDATION\"\n  objtool: Make noinstr hacks optional\n  objtool: Make jump label hack optional\n  objtool: Make static call annotation optional\n  objtool: Make stack validation frame-pointer-specific\n  objtool: Add CONFIG_OBJTOOL\n  objtool: Extricate sls from stack validation\n  objtool: Rework ibt and extricate from stack validation\n  objtool: Make stack validation optional\n  objtool: Add option to print section addresses\n  objtool: Don't print parentheses in function addresses\n  objtool: Ditch subcommands\n  objtool: Reorganize cmdline options\n  libsubcmd: Fix OPTION_GROUP sorting\n  sched/fair: Revise comment about lb decision matrix\n  sched/psi: report zeroes for CPU full at the system level\n  sched/fair: Delete useless condition in tg_unthrottle_up()\n  sched/fair: Fix cfs_rq_clock_pelt() for throttled cfs_rq\n  sched/fair: Move calculate of avg_load to a better location\n  mailmap: Update my email address to @redhat.com\n  MAINTAINERS: Add myself as scheduler topology reviewer\n  psi: Fix trigger being fired unexpectedly at initial\n  signal: Deliver SIGTRAP on perf event asynchronously if blocked\n  ata: Make use of the helper function devm_platform_ioremap_resource()\n  ata: libata-core: replace \"its\" with \"it is\"\n  ahci: Add a generic 'controller2' RAID id\n  x86/tdx: Annotate a noreturn function\n  virt: sevguest: Change driver name to reflect generic SEV support\n  tools/nolibc/string: Implement `strdup()` and `strndup()`\n  tools/nolibc/string: Implement `strnlen()`\n  tools/nolibc/stdlib: Implement `malloc()`, `calloc()`, `realloc()` and `free()`\n  tools/nolibc/types: Implement `offsetof()` and `container_of()` macro\n  tools/nolibc/sys: Implement `mmap()` and `munmap()`\n  tools/nolibc: i386: Implement syscall with 6 arguments\n  tools/nolibc: Remove .global _start from the entry point code\n  tools/nolibc: Replace `asm` with `__asm__`\n  tools/nolibc: x86-64: Update System V ABI document link\n  tools/nolibc/stdlib: only reference the external environ when inlined\n  tools/nolibc/string: do not use __builtin_strlen() at -O0\n  tools/nolibc: add the nolibc subdir to the common Makefile\n  tools/nolibc: add a makefile to install headers\n  tools/nolibc/types: add poll() and waitpid() flag definitions\n  tools/nolibc/sys: add syscall definition for getppid()\n  tools/nolibc/string: add strcmp() and strncmp()\n  tools/nolibc/stdio: add support for '%p' to vfprintf()\n  tools/nolibc/stdlib: add a simple getenv() implementation\n  tools/nolibc/stdio: make printf(%s) accept NULL\n  tools/nolibc/stdlib: implement abort()\n  tools/nolibc: also mention how to build by just setting the include path\n  tools/nolibc/time: create time.h with time()\n  tools/nolibc/signal: move raise() to signal.h\n  tools/nolibc/unistd: add usleep()\n  tools/nolibc/unistd: extract msleep(), sleep(), tcsetpgrp() to unistd.h\n  tools/nolibc/errno: extract errno.h from sys.h\n  tools/nolibc/string: export memset() and memmove()\n  tools/nolibc/types: define PATH_MAX and MAXPATHLEN\n  tools/nolibc/arch: mark the _start symbol as weak\n  tools/nolibc: move exported functions to their own section\n  tools/nolibc/string: add tiny versions of strncat() and strlcat()\n  tools/nolibc/string: add strncpy() and strlcpy()\n  tools/nolibc/string: slightly simplify memmove()\n  tools/nolibc/string: use unidirectional variants for memcpy()\n  tools/nolibc/sys: make getpgrp(), getpid(), gettid() not set errno\n  tools/nolibc/stdlib: make raise() use the lower level syscalls only\n  tools/nolibc/stdlib: avoid a 64-bit shift in u64toh_r()\n  tools/nolibc/sys: make open() take a vararg on the 3rd argument\n  tools/nolibc/stdio: add perror() to report the errno value\n  tools/nolibc/types: define EXIT_SUCCESS and EXIT_FAILURE\n  tools/nolibc/stdio: add a minimal [vf]printf() implementation\n  tools/nolibc/stdio: add fwrite() to stdio\n  tools/nolibc/stdio: add stdin/stdout/stderr and fget*/fput* functions\n  tools/nolibc/stdio: add a minimal set of stdio functions\n  tools/nolibc/stdlib: add utoh() and u64toh()\n  tools/nolibc/stdlib: add i64toa() and u64toa()\n  tools/nolibc/stdlib: replace the ltoa() function with more efficient ones\n  tools/nolibc/stdlib: move ltoa() to stdlib.h\n  tools/nolibc/types: move makedev to types.h and make it a macro\n  tools/nolibc/types: make FD_SETSIZE configurable\n  tools/nolibc/types: move the FD_* functions to macros in types.h\n  tools/nolibc/ctype: add the missing is* functions\n  tools/nolibc/ctype: split the is* functions to ctype.h\n  tools/nolibc/string: split the string functions into string.h\n  tools/nolibc/stdlib: extract the stdlib-specific functions to their own file\n  tools/nolibc/sys: split the syscall definitions into their own file\n  tools/nolibc/arch: split arch-specific code into individual files\n  tools/nolibc/types: split syscall-specific definitions into their own files\n  tools/nolibc/std: move the standard type definitions to std.h\n  rcutorture: Make torture.sh allow for --kasan\n  rcutorture: Make torture.sh refscale and rcuscale specify Tasks Trace RCU\n  rcutorture: Make kvm.sh allow more memory for --kasan runs\n  torture: Save \"make allmodconfig\" .config file\n  scftorture: Remove extraneous \"scf\" from per_version_boot_params\n  rcutorture: Adjust scenarios' Kconfig options for CONFIG_PREEMPT_DYNAMIC\n  torture: Enable CSD-lock stall reports for scftorture\n  torture: Skip vmlinux check for kvm-again.sh runs\n  scftorture: Adjust for TASKS_RCU Kconfig option being selected\n  rcuscale: Allow rcuscale without RCU Tasks Rude/Trace\n  rcuscale: Allow rcuscale without RCU Tasks\n  refscale: Allow refscale without RCU Tasks Rude/Trace\n  refscale: Allow refscale without RCU Tasks\n  rcutorture: Allow specifying per-scenario stat_interval\n  rcutorture: Add CONFIG_PREEMPT_DYNAMIC=n to TASKS02 scenario\n  rcutorture: Allow rcutorture without RCU Tasks Rude\n  rcutorture: Allow rcutorture without RCU Tasks\n  rcutorture: Allow rcutorture without RCU Tasks Trace\n  rcu: Make the TASKS_RCU Kconfig option be selected\n  rcu: Use IRQ_WORK_INIT_HARD() to avoid rcu_read_unlock() hangs\n  rcu_sync: Fix comment to properly reflect rcu_sync_exit() behavior\n  rcu: Check for successful spawn of ->boost_kthread_task\n  rcu: Fix preemption mode check on synchronize_rcu[_expedited]()\n  rcu: Print number of online CPUs in RCU CPU stall-warning messages\n  rcu: Add comments to final rcu_gp_cleanup() \"if\" statement\n  kernel/smp: Provide boot-time timeout for CSD lock diagnostics\n  documentation: zonefs: Cleanup the mount options section\n  zonefs: Add active seq file accounting\n  zonefs: Export open zone resource information through sysfs\n  zonefs: Always do seq file write open accounting\n  zonefs: Rename super block information fields\n  zonefs: Fix management of open zones\n  zonefs: Clear inode information flags on inode creation\n  docs: Update RCU cross-references as suggested in doc-guide\n  docs: Add documentation for rude and trace RCU flavors\n  x86/boot: Put globals that are accessed early into the .data section\n  binfmt_flat: Drop vestiges of coredump support\n  x86/mm: Fix spacing within memory encryption features message\n  Documentation: Update the recommended pattern for GPIO irqchips\n  gpio: Update TODO to mention immutable irq_chip structures\n  pinctrl: amd: Make the irqchip immutable\n  pinctrl: msmgpio: Make the irqchip immutable\n  pinctrl: apple-gpio: Make the irqchip immutable\n  gpio: pl061: Make the irqchip immutable\n  gpio: tegra186: Make the irqchip immutable\n  gpio: Add helpers to ease the transition towards immutable irq_chip\n  gpio: Expose the gpiochip_irq_re[ql]res helpers\n  gpio: Don't fiddle with irqchips marked as immutable\n  EDAC/dmc520: Don't print an error for each unconfigured interrupt line\n  binfmt_flat: do not stop relocating GOT entries prematurely on riscv\n  block/rnbd-clt: Avoid flush_workqueue(system_long_wq) usage\n  csky: optimize memcpy_{from,to}io() and memset_io()\n  csky: Add C based string functions\n  loop: don't destroy lo->workqueue in __loop_clr_fd\n  loop: remove lo_refcount and avoid lo_mutex in ->open / ->release\n  loop: avoid loop_validate_mutex/lo_mutex in ->release\n  loop: suppress uevents while reconfiguring the device\n  loop: implement ->free_disk\n  loop: only freeze the queue in __loop_clr_fd when needed\n  loop: don't freeze the queue in lo_release\n  loop: remove the racy bd_inode->i_mapping->nrpages asserts\n  loop: initialize the worker tracking fields once\n  loop: de-duplicate the idle worker freeing code\n  block: turn bdev->bd_openers into an atomic_t\n  block: add a disk_openers helper\n  zram: cleanup zram_remove\n  zram: cleanup reset_store\n  nbd: use the correct block_device in nbd_bdev_reset\n  block: change exported IO accounting interface from gendisk to bdev\n  drbd: Return true/false (not 1/0) from bool functions\n  drdb: Switch to kvfree_rcu() API\n  drbd: Replace \"unsigned\" with \"unsigned int\"\n  drbd: Make use of PFN_UP helper macro\n  block: drbd: drbd_receiver: Remove redundant assignment to err\n  drbd: address enum mismatch warnings\n  drbd: fix duplicate array initializer\n  direct-io: remove random prefetches\n  block: decouple REQ_OP_SECURE_ERASE from REQ_OP_DISCARD\n  block: add a bdev_discard_granularity helper\n  block: remove QUEUE_FLAG_DISCARD\n  block: add a bdev_max_discard_sectors helper\n  block: refactor discard bio size limiting\n  block: move {bdev,queue_limit}_discard_alignment out of line\n  block: use bdev_discard_alignment in part_discard_alignment_show\n  block: remove queue_discard_alignment\n  block: move bdev_alignment_offset and queue_limit_alignment_offset out of line\n  block: use bdev_alignment_offset in disk_alignment_offset_show\n  block: use bdev_alignment_offset in part_alignment_offset_show\n  block: add a bdev_max_zone_append_sectors helper\n  block: add a bdev_stable_writes helper\n  block: add a bdev_fua helper\n  block: add a bdev_write_cache helper\n  block: add a bdev_nonrot helper\n  mm: use bdev_is_zoned in claim_swapfile\n  ntfs3: use bdev_logical_block_size instead of open coding it\n  btrfs: use bdev_max_active_zones instead of open coding it\n  drbd: cleanup decide_on_discard_support\n  drbd: use bdev_alignment_offset instead of queue_alignment_offset\n  drbd: use bdev based limit helpers in drbd_send_sizes\n  drbd: remove assign_p_sizes_qlim\n  target: fix discard alignment on partitions\n  target: pass a block_device to target_configure_unmap_from_queue\n  target: remove an incorrect unmap zeroes data deduction\n  bfq: Make sure bfqg for which we are queueing requests is online\n  bfq: Get rid of __bio_blkcg() usage\n  bfq: Track whether bfq_group is still online\n  bfq: Remove pointless bfq_init_rq() calls\n  bfq: Drop pointless unlock-lock pair\n  bfq: Update cgroup information before merging bio\n  bfq: Split shared queues on move between cgroups\n  bfq: Avoid merging queues with different parents\n  bfq: Avoid false marking of bic as stably merged\n  pktcdvd: stop using bio_reset\n  block: turn bio_kmalloc into a simple kmalloc wrapper\n  target/pscsi: remove pscsi_get_bio\n  squashfs: always use bio_kmalloc in squashfs_bio_read\n  btrfs: simplify ->flush_bio handling\n  block: allow use of per-cpu bio alloc cache by block drivers\n  block: allow using the per-cpu bio cache from bio_alloc_bioset\n  x86/boot: Add an efi.h header for the decompressor\n  selinux: don't sleep when CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE is true\n  timekeeping: Introduce fast accessor to clock tai\n  tracing/timer: Add missing argument documentation of trace points\n  genirq: Take the proposed affinity at face value if force==true\n  x86/asm: Merge load_gs_index()\n  x86/32: Remove lazy GS macros\n  ELF: Remove elf_core_copy_kernel_regs()\n  virt: sevguest: Fix bool function returning negative value\n  x86/process: Fix kernel-doc warning due to a changed function name\n  fscrypt: log when starting to use inline encryption\n  dt-bindings: ata: renesas,rcar-sata: Add r8a774e1 support\n  fscrypt: split up FS_CRYPTO_BLOCK_SIZE\n  lib/irq_poll: Prevent softirq pending leak in irq_poll_cpu_dead()\n  cpu/hotplug: Initialise all cpuhp_cpu_state structs earlier\n  cfi: Use __builtin_function_start\n  security: don't treat structure as an array of struct hlist_head\n  usercopy: Remove HARDENED_USERCOPY_PAGESPAN\n  mm/usercopy: Detect large folio overruns\n  mm/usercopy: Detect vmalloc overruns\n  mm/usercopy: Check kmap addresses properly\n  x86/crash: Fix minor typo/bug in debug message\n  efi: Add missing prototype for efi_capsule_setup_info\n  docs: security: Add secrets/coco documentation\n  efi: Register efi_secret platform device if EFI secret area is declared\n  virt: Add efi_secret module to expose confidential computing secrets\n  efi: Save location of EFI confidential computing area\n  efi: Allow to enable EFI runtime services by default on RT\n  x86/apic: Clarify i82489DX bit overlap in APIC_LVT0\n  platform/x86: amd-pmc: Avoid reading SMU version at probe time\n  platform/x86: amd-pmc: Move FCH init to first use\n  platform/x86: amd-pmc: Move SMU logging setup out of init\n  platform/x86: hp-wmi: Correct code style related issues\n  platform/x86: wmi: replace usage of found with dedicated list iterator variable\n  platform/x86: winmate-fm07-keys: Winmate FM07/FM07P buttons\n  ata: pata_via: fix sloppy typing in via_do_set_mode()\n  ata: pata_sil680: fix result type of sil680_sel{dev|reg}()\n  x86/32: Simplify ELF_CORE_COPY_REGS\n  cpu/hotplug: Allow the CPU in CPU_UP_PREPARE state to be brought up again.\n  x86/xen: Allow to retry if cpu_initialize_context() failed.\n  ata: libata-core: fix parameter type in ata_xfer_mode2shift()\n  rcu: Check for jiffies going backwards\n  rcu: Fix rcu_preempt_deferred_qs_irqrestore() strict QS reporting\n  rcu: Clarify fill-the-gap comment in rcu_segcblist_advance()\n  tools/nolibc: guard the main file against multiple inclusion\n  tools/nolibc: use pselect6 on RISCV\n  torture: Make thread detection more robust by using lspcu\n  torture: Permit running of experimental torture types\n  torture: Use \"-o Batchmode=yes\" to disable ssh password requests\n  torture: Reposition so that $? collects ssh code in torture.sh\n  rcu: Make TASKS_RUDE_RCU select IRQ_WORK\n  rcutorture: Call preempt_schedule() through static call/key\n  rcutorture: Add missing return and use __func__ in warning\n  rcutorture: Avoid corner-case #DE with nsynctypes check\n  scftorture: Fix distribution of short handler delays\n  rcutorture: Suppress debugging grace period delays during flooding\n  torture: Add rcu_normal and rcu_expedited runs to torture.sh\n  rcu-tasks: Handle sparse cpu_possible_mask in rcu_tasks_invoke_cbs()\n  rcu-tasks: Handle sparse cpu_possible_mask\n  rcu-tasks: Make show_rcu_tasks_generic_gp_kthread() check all CPUs\n  rcu-tasks: Restore use of timers for non-RT kernels\n  rcu-tasks: Use schedule_hrtimeout_range() to wait for grace periods\n  rcu-tasks: Make Tasks RCU account for userspace execution\n  rcu-tasks: Use rcuwait for the rcu_tasks_kthread()\n  rcu-tasks: Print pre-stall-warning informational messages\n  rcu-tasks: Fix race in schedule and flush work\n  rcu/nocb: Initialize nocb kthreads only for boot CPU prior SMP initialization\n  rcu: Initialize boost kthread only for boot node prior SMP initialization\n  rcu: Assume rcu_init() is called before smp\n  rcu/nocb: Move rcu_nocb_is_setup to rcu_state\n  rcu: Remove rcu_is_nocb_cpu()\n  srcu: Add contention-triggered addition of srcu_node tree\n  srcu: Create concurrency-safe helper for initiating size transition\n  srcu: Explain srcu_funnel_gp_start() call to list_add() is safe\n  srcu: Prevent cleanup_srcu_struct() from freeing non-dynamic ->sda\n  srcu: Avoid NULL dereference in srcu_torture_stats_print()\n  srcu: Use export for srcu_struct defined by DEFINE_STATIC_SRCU()\n  srcu: Add boot-time control over srcu_node array allocation\n  srcu: Ensure snp nodes tree is fully initialized before traversal\n  srcu: Use invalid initial value for srcu_node GP sequence numbers\n  srcu: Compute snp_seq earlier in srcu_funnel_gp_start()\n  srcu: Make rcutorture dump the SRCU size state\n  srcu: Add size-state transitioning code\n  srcu: Dynamically allocate srcu_node array\n  srcu: Make Tree SRCU able to operate without snp_node array\n  srcu: Make srcu_funnel_gp_start() cache ->mynode in snp_leaf\n  srcu: Fix s/is/if/ typo in srcu_node comment\n  srcu: Tighten cleanup_srcu_struct() GP checks\n  x86: Remove a.out support\n  virt: sevguest: Fix return value check in alloc_shared_pages()\n  EDAC/mc: Get rid of edac_align_ptr()\n  EDAC/device: Sanitize edac_device_alloc_ctl_info() definition\n  m68k: Introduce a virtual m68k machine\n  clocksource/drivers: Add a goldfish-timer clocksource\n  rtc: goldfish: Use gf_ioread32()/gf_iowrite32()\n  tty: goldfish: Introduce gf_ioread32()/gf_iowrite32()\n  EDAC/device: Get rid of the silly one-shot memory allocation in edac_device_alloc_ctl_info()\n  EDAC/pci: Get rid of the silly one-shot memory allocation in edac_pci_alloc_ctl_info()\n  EDAC/mc: Get rid of silly one-shot struct allocation in edac_mc_alloc()\n  x86/kaslr: Fix build warning in KASLR code in boot stub\n  libata: Improve ATA queued command allocation\n  ata: pata_mpc52xx: Prepare cleanup of powerpc's asm/prom.h\n  x86/mm: Replace nodes_weight() with nodes_empty() where appropriate\n  x86: Replace cpumask_weight() with cpumask_empty() where appropriate\n  clocksource: Replace cpumask_weight() with cpumask_empty()\n  irqchip/bmips: Replace cpumask_weight() with cpumask_empty()\n  genirq/affinity: Replace cpumask_weight() with cpumask_empty() where appropriate\n  irqchip/gic-v3: Always trust the managed affinity provided by the core code\n  genirq: Always limit the affinity to online CPUs\n  genirq/msi: Shutdown managed interrupts with unsatifiable affinities\n  x86/PCI: Fix coding style in PIRQ table verification\n  x86/PCI: Fix ALi M1487 (IBC) PIRQ router link value interpretation\n  x86/PCI: Add $IRT PIRQ routing table support\n  x86/PCI: Handle PIRQ routing tables with no router device given\n  x86/PCI: Add PIRQ routing table range checks\n  x86/PCI: Add support for the SiS85C497 PIRQ router\n  x86/PCI: Disambiguate SiS85C503 PIRQ router code entities\n  x86/PCI: Handle IRQ swizzling with PIRQ routers\n  x86/PCI: Also match function number in $PIR table\n  x86/PCI: Include function number in $PIR table dump\n  x86/PCI: Show the physical address of the $PIR table\n  timers: Move timer sysctl into the timer code\n  clockevents: Use dedicated list iterator variable\n  timers: Simplify calc_index()\n  timers: Initialize base::next_expiry_recalc in timers_prepare_cpu()\n  Documentation/x86: Document TDX kernel architecture\n  efi/cper: Reformat CPER memory error location to more readable\n  EDAC/ghes: Unify CPER memory error location reporting\n  efi/cper: Add a cper_mem_err_status_str() to decode error description\n  x86/sev-es: Replace open-coded hlt-loop with sev_es_terminate()\n  csky: Fix versioncheck warnings\n  ACPICA: Avoid cache flush inside virtual machines\n  x86/tdx/ioapic: Add shared bit for IOAPIC base address\n  x86/mm: Make DMA memory shared for TD guest\n  x86/mm/cpa: Add support for TDX shared memory\n  x86/tdx: Make pages shared in ioremap()\n  x86/topology: Disable CPU online/offline control for TDX guests\n  x86/boot: Avoid #VE during boot for TDX platforms\n  x86/boot: Set CR0.NE early and keep it set during the boot\n  x86/acpi/x86/boot: Add multiprocessor wake-up support\n  x86/boot: Add a trampoline for booting APs via firmware handoff\n  x86/tdx: Wire up KVM hypercalls\n  x86/tdx: Port I/O: Add early boot support\n  x86/tdx: Port I/O: Add runtime hypercalls\n  x86/boot: Port I/O: Add decompression-time support for TDX\n  x86/boot: Port I/O: Allow to hook up alternative helpers\n  x86: Consolidate port I/O helpers\n  x86: Adjust types used in port I/O helpers\n  x86/tdx: Detect TDX at early kernel decompression time\n  x86/tdx: Handle in-kernel MMIO\n  x86/tdx: Handle CPUID via #VE\n  x86/tdx: Add MSR support for TDX guests\n  x86/tdx: Add HLT support for TDX guests\n  x86/traps: Add #VE support for TDX guest\n  x86/traps: Refactor exc_general_protection()\n  x86/tdx: Exclude shared bit from __PHYSICAL_MASK\n  x86/tdx: Extend the confidential computing API to support TDX guests\n  x86/tdx: Add __tdx_module_call() and __tdx_hypercall() helper functions\n  x86/tdx: Provide common base for SEAMCALL and TDCALL C wrappers\n  x86/tdx: Detect running as a TDX guest in early boot\n  x86/platform/uv: Log gap hole end size\n  x86/platform/uv: Update TSC sync…",
        "tree": {
          "url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/git/trees/c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f",
          "sha": "c12f1c3f608b7cb9e43ff393e3f11e8760d6b38f"
        },
        "comment_count": 0
      },
      "author": null,
      "committer": null,
      "parents": [
        {
          "url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commits/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "html_url": "https://github.com/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commit/fccc41b1ec75a533f7690b2843fa6da47023fb55",
          "sha": "fccc41b1ec75a533f7690b2843fa6da47023fb55"
        },
        {
          "url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commits/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "html_url": "https://github.com/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commit/019bc1f65e9130bcb6f02a3a70971d843fde705d",
          "sha": "019bc1f65e9130bcb6f02a3a70971d843fde705d"
        }
      ],
      "repository": {
        "id": 838284502,
        "node_id": "R_kgDOMfc01g",
        "name": "kernel_platform_qcom-kernel",
        "full_name": "aospa-nubia-sm8650/kernel_platform_qcom-kernel",
        "private": false,
        "owner": {
          "login": "aospa-nubia-sm8650",
          "id": 172066341,
          "node_id": "O_kgDOCkGGJQ",
          "avatar_url": "https://avatars.githubusercontent.com/u/172066341?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/aospa-nubia-sm8650",
          "html_url": "https://github.com/aospa-nubia-sm8650",
          "followers_url": "https://api.github.com/users/aospa-nubia-sm8650/followers",
          "following_url": "https://api.github.com/users/aospa-nubia-sm8650/following{/other_user}",
          "gists_url": "https://api.github.com/users/aospa-nubia-sm8650/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/aospa-nubia-sm8650/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/aospa-nubia-sm8650/subscriptions",
          "organizations_url": "https://api.github.com/users/aospa-nubia-sm8650/orgs",
          "repos_url": "https://api.github.com/users/aospa-nubia-sm8650/repos",
          "events_url": "https://api.github.com/users/aospa-nubia-sm8650/events{/privacy}",
          "received_events_url": "https://api.github.com/users/aospa-nubia-sm8650/received_events",
          "type": "Organization",
          "user_view_type": "public",
          "site_admin": false
        },
        "html_url": "https://github.com/aospa-nubia-sm8650/kernel_platform_qcom-kernel",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel",
        "forks_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/forks",
        "keys_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/teams",
        "hooks_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/hooks",
        "issue_events_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/issues/events{/number}",
        "events_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/events",
        "assignees_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/assignees{/user}",
        "branches_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/branches{/branch}",
        "tags_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/tags",
        "blobs_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/languages",
        "stargazers_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/stargazers",
        "contributors_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/contributors",
        "subscribers_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/subscribers",
        "subscription_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/subscription",
        "commits_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/contents/{+path}",
        "compare_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/merges",
        "archive_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/downloads",
        "issues_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/issues{/number}",
        "pulls_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/labels{/name}",
        "releases_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/releases{/id}",
        "deployments_url": "https://api.github.com/repos/aospa-nubia-sm8650/kernel_platform_qcom-kernel/deployments"
      },
      "score": 1.0
    }
  ]
}
